// Code generated by protoc-gen-gogo.
// source: types.proto
// DO NOT EDIT!

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
*/
package types

import proto "code.google.com/p/gogoprotobuf/proto"
import math "math"

// discarding unused import gogoproto "code.google.com/p/gogoprotobuf/gogoproto/gogo.pb"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

// First numbers correspond with Protocol Buffer FieldDescriptorProto Type in descriptor.proto
type Type int32

const (
	UNKNOWN          Type = 0
	ENCODED_DOUBLE   Type = 1
	ENCODED_FLOAT    Type = 2
	ENCODED_INT64    Type = 3
	ENCODED_UINT64   Type = 4
	ENCODED_INT32    Type = 5
	ENCODED_FIXED64  Type = 6
	ENCODED_FIXED32  Type = 7
	ENCODED_BOOL     Type = 8
	ENCODED_STRING   Type = 9
	ENCODED_GROUP    Type = 10
	ENCODED_MESSAGE  Type = 11
	ENCODED_BYTES    Type = 12
	ENCODED_UINT32   Type = 13
	ENCODED_ENUM     Type = 14
	ENCODED_SFIXED32 Type = 15
	ENCODED_SFIXED64 Type = 16
	ENCODED_SINT32   Type = 17
	ENCODED_SINT64   Type = 18
	SINGLE_DOUBLE    Type = 101
	SINGLE_FLOAT     Type = 102
	SINGLE_INT64     Type = 103
	SINGLE_UINT64    Type = 104
	SINGLE_INT32     Type = 105
	// SINGLE_FIXED64        = 106;
	// SINGLE_FIXED32        = 107;
	SINGLE_BOOL   Type = 108
	SINGLE_STRING Type = 109
	// SINGLE_GROUP          = 110;
	// SINGLE_MESSAGE        = 111;
	SINGLE_BYTES  Type = 112
	SINGLE_UINT32 Type = 113
	LIST_DOUBLE   Type = 201
	LIST_FLOAT    Type = 202
	LIST_INT64    Type = 203
	LIST_UINT64   Type = 204
	LIST_INT32    Type = 205
	// LIST_FIXED64        = 206;
	// LIST_FIXED32        = 207;
	LIST_BOOL   Type = 208
	LIST_STRING Type = 209
	// LIST_GROUP          = 210;
	// LIST_MESSAGE        = 211;
	LIST_BYTES  Type = 212
	LIST_UINT32 Type = 213
)

var Type_name = map[int32]string{
	0:   "UNKNOWN",
	1:   "ENCODED_DOUBLE",
	2:   "ENCODED_FLOAT",
	3:   "ENCODED_INT64",
	4:   "ENCODED_UINT64",
	5:   "ENCODED_INT32",
	6:   "ENCODED_FIXED64",
	7:   "ENCODED_FIXED32",
	8:   "ENCODED_BOOL",
	9:   "ENCODED_STRING",
	10:  "ENCODED_GROUP",
	11:  "ENCODED_MESSAGE",
	12:  "ENCODED_BYTES",
	13:  "ENCODED_UINT32",
	14:  "ENCODED_ENUM",
	15:  "ENCODED_SFIXED32",
	16:  "ENCODED_SFIXED64",
	17:  "ENCODED_SINT32",
	18:  "ENCODED_SINT64",
	101: "SINGLE_DOUBLE",
	102: "SINGLE_FLOAT",
	103: "SINGLE_INT64",
	104: "SINGLE_UINT64",
	105: "SINGLE_INT32",
	108: "SINGLE_BOOL",
	109: "SINGLE_STRING",
	112: "SINGLE_BYTES",
	113: "SINGLE_UINT32",
	201: "LIST_DOUBLE",
	202: "LIST_FLOAT",
	203: "LIST_INT64",
	204: "LIST_UINT64",
	205: "LIST_INT32",
	208: "LIST_BOOL",
	209: "LIST_STRING",
	212: "LIST_BYTES",
	213: "LIST_UINT32",
}
var Type_value = map[string]int32{
	"UNKNOWN":          0,
	"ENCODED_DOUBLE":   1,
	"ENCODED_FLOAT":    2,
	"ENCODED_INT64":    3,
	"ENCODED_UINT64":   4,
	"ENCODED_INT32":    5,
	"ENCODED_FIXED64":  6,
	"ENCODED_FIXED32":  7,
	"ENCODED_BOOL":     8,
	"ENCODED_STRING":   9,
	"ENCODED_GROUP":    10,
	"ENCODED_MESSAGE":  11,
	"ENCODED_BYTES":    12,
	"ENCODED_UINT32":   13,
	"ENCODED_ENUM":     14,
	"ENCODED_SFIXED32": 15,
	"ENCODED_SFIXED64": 16,
	"ENCODED_SINT32":   17,
	"ENCODED_SINT64":   18,
	"SINGLE_DOUBLE":    101,
	"SINGLE_FLOAT":     102,
	"SINGLE_INT64":     103,
	"SINGLE_UINT64":    104,
	"SINGLE_INT32":     105,
	"SINGLE_BOOL":      108,
	"SINGLE_STRING":    109,
	"SINGLE_BYTES":     112,
	"SINGLE_UINT32":    113,
	"LIST_DOUBLE":      201,
	"LIST_FLOAT":       202,
	"LIST_INT64":       203,
	"LIST_UINT64":      204,
	"LIST_INT32":       205,
	"LIST_BOOL":        208,
	"LIST_STRING":      209,
	"LIST_BYTES":       212,
	"LIST_UINT32":      213,
}

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}
func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (x *Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Type_value, data, "Type")
	if err != nil {
		return err
	}
	*x = Type(value)
	return nil
}

func init() {
	proto.RegisterEnum("types.Type", Type_name, Type_value)
}
