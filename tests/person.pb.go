// Code generated by protoc-gen-gogo.
// source: person.proto
// DO NOT EDIT!

/*
Package tests is a generated protocol buffer package.

It is generated from these files:
	person.proto

It has these top-level messages:
	Person
	Address
*/
package tests

import proto "github.com/gogo/protobuf/proto"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto/gogo.pb"

import fmt "fmt"
import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type Person struct {
	Name             *string    `protobuf:"bytes,1,opt" json:"Name,omitempty"`
	Addresses        []*Address `protobuf:"bytes,2,rep" json:"Addresses,omitempty"`
	Telephone        *string    `protobuf:"bytes,3,opt" json:"Telephone,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Person) Reset()         { *m = Person{} }
func (m *Person) String() string { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()    {}

func (m *Person) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Person) GetAddresses() []*Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Person) GetTelephone() string {
	if m != nil && m.Telephone != nil {
		return *m.Telephone
	}
	return ""
}

type Address struct {
	Number           *int64  `protobuf:"varint,1,opt" json:"Number,omitempty"`
	Street           *string `protobuf:"bytes,2,opt" json:"Street,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}

func (m *Address) GetNumber() int64 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

func (m *Address) GetStreet() string {
	if m != nil && m.Street != nil {
		return *m.Street
	}
	return ""
}

func init() {
}
func NewPopulatedPerson(r randyPerson, easy bool) *Person {
	this := &Person{}
	if r.Intn(10) != 0 {
		v1 := randStringPerson(r)
		this.Name = &v1
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(10)
		this.Addresses = make([]*Address, v2)
		for i := 0; i < v2; i++ {
			this.Addresses[i] = NewPopulatedAddress(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v3 := randStringPerson(r)
		this.Telephone = &v3
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedPerson(r, 4)
	}
	return this
}

func NewPopulatedAddress(r randyPerson, easy bool) *Address {
	this := &Address{}
	if r.Intn(10) != 0 {
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		this.Number = &v4
	}
	if r.Intn(10) != 0 {
		v5 := randStringPerson(r)
		this.Street = &v5
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedPerson(r, 3)
	}
	return this
}

type randyPerson interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RunePerson(r randyPerson) rune {
	return rune(r.Intn(126-43) + 43)
}
func randStringPerson(r randyPerson) string {
	v6 := r.Intn(100)
	tmps := make([]rune, v6)
	for i := 0; i < v6; i++ {
		tmps[i] = randUTF8RunePerson(r)
	}
	return string(tmps)
}
func randUnrecognizedPerson(r randyPerson, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldPerson(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldPerson(data []byte, r randyPerson, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulatePerson(data, uint64(key))
		v7 := r.Int63()
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		data = encodeVarintPopulatePerson(data, uint64(v7))
	case 1:
		data = encodeVarintPopulatePerson(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulatePerson(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulatePerson(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulatePerson(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulatePerson(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (this *Person) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tests.Person{` +
		`Name:` + valueToGoStringPerson(this.Name, "string"),
		`Addresses:` + fmt.Sprintf("%#v", this.Addresses),
		`Telephone:` + valueToGoStringPerson(this.Telephone, "string"),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Address) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tests.Address{` +
		`Number:` + valueToGoStringPerson(this.Number, "int64"),
		`Street:` + valueToGoStringPerson(this.Street, "string"),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func valueToGoStringPerson(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringPerson(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}
