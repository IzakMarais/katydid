// Code generated by protoc-gen-gogo.
// source: treeregister.proto
// DO NOT EDIT!

/*
Package tests is a generated protocol buffer package.

It is generated from these files:
	treeregister.proto

It has these top-level messages:
	TreeRegister
	Tree
	GeneralInformation
	OtherInformation
	Measurements
	HeightMeasurement
	Measurement
	Condition
	AdditionalInformation
	Photo
	Sender
*/
package tests

import proto "github.com/gogo/protobuf/proto"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto/gogo.pb"

import fmt "fmt"
import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type TreeGrowthCategory int32

const (
	TreeGrowthCategory_A TreeGrowthCategory = 1
	TreeGrowthCategory_B TreeGrowthCategory = 2
	TreeGrowthCategory_C TreeGrowthCategory = 3
)

var TreeGrowthCategory_name = map[int32]string{
	1: "A",
	2: "B",
	3: "C",
}
var TreeGrowthCategory_value = map[string]int32{
	"A": 1,
	"B": 2,
	"C": 3,
}

func (x TreeGrowthCategory) Enum() *TreeGrowthCategory {
	p := new(TreeGrowthCategory)
	*p = x
	return p
}
func (x TreeGrowthCategory) String() string {
	return proto.EnumName(TreeGrowthCategory_name, int32(x))
}
func (x *TreeGrowthCategory) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TreeGrowthCategory_value, data, "TreeGrowthCategory")
	if err != nil {
		return err
	}
	*x = TreeGrowthCategory(value)
	return nil
}

type GeneralAppearance int32

const (
	GeneralAppearance_Excellent                 GeneralAppearance = 1
	GeneralAppearance_Good                      GeneralAppearance = 2
	GeneralAppearance_Fair                      GeneralAppearance = 3
	GeneralAppearance_Poor                      GeneralAppearance = 4
	GeneralAppearance_DyingOrDead               GeneralAppearance = 5
	GeneralAppearance_GeneralAppearance_NotSure GeneralAppearance = 6
)

var GeneralAppearance_name = map[int32]string{
	1: "Excellent",
	2: "Good",
	3: "Fair",
	4: "Poor",
	5: "DyingOrDead",
	6: "GeneralAppearance_NotSure",
}
var GeneralAppearance_value = map[string]int32{
	"Excellent":                 1,
	"Good":                      2,
	"Fair":                      3,
	"Poor":                      4,
	"DyingOrDead":               5,
	"GeneralAppearance_NotSure": 6,
}

func (x GeneralAppearance) Enum() *GeneralAppearance {
	p := new(GeneralAppearance)
	*p = x
	return p
}
func (x GeneralAppearance) String() string {
	return proto.EnumName(GeneralAppearance_name, int32(x))
}
func (x *GeneralAppearance) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GeneralAppearance_value, data, "GeneralAppearance")
	if err != nil {
		return err
	}
	*x = GeneralAppearance(value)
	return nil
}

type TrunkStemming int32

const (
	TrunkStemming_GoodSingleStem        TrunkStemming = 1
	TrunkStemming_MultipleStemmed       TrunkStemming = 2
	TrunkStemming_TwinStemmed           TrunkStemming = 3
	TrunkStemming_TrunkStemming_NotSure TrunkStemming = 4
)

var TrunkStemming_name = map[int32]string{
	1: "GoodSingleStem",
	2: "MultipleStemmed",
	3: "TwinStemmed",
	4: "TrunkStemming_NotSure",
}
var TrunkStemming_value = map[string]int32{
	"GoodSingleStem":        1,
	"MultipleStemmed":       2,
	"TwinStemmed":           3,
	"TrunkStemming_NotSure": 4,
}

func (x TrunkStemming) Enum() *TrunkStemming {
	p := new(TrunkStemming)
	*p = x
	return p
}
func (x TrunkStemming) String() string {
	return proto.EnumName(TrunkStemming_name, int32(x))
}
func (x *TrunkStemming) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TrunkStemming_value, data, "TrunkStemming")
	if err != nil {
		return err
	}
	*x = TrunkStemming(value)
	return nil
}

type Ground int32

const (
	Ground_Level       Ground = 1
	Ground_SlightSlope Ground = 2
	Ground_SteepSlope  Ground = 3
)

var Ground_name = map[int32]string{
	1: "Level",
	2: "SlightSlope",
	3: "SteepSlope",
}
var Ground_value = map[string]int32{
	"Level":       1,
	"SlightSlope": 2,
	"SteepSlope":  3,
}

func (x Ground) Enum() *Ground {
	p := new(Ground)
	*p = x
	return p
}
func (x Ground) String() string {
	return proto.EnumName(Ground_name, int32(x))
}
func (x *Ground) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Ground_value, data, "Ground")
	if err != nil {
		return err
	}
	*x = Ground(value)
	return nil
}

type Lean int32

const (
	Lean_Lean_No               Lean = 1
	Lean_SlightlyWindswept     Lean = 2
	Lean_SixtyDegreesOrLess    Lean = 3
	Lean_HorizontalOrCollapsed Lean = 4
)

var Lean_name = map[int32]string{
	1: "Lean_No",
	2: "SlightlyWindswept",
	3: "SixtyDegreesOrLess",
	4: "HorizontalOrCollapsed",
}
var Lean_value = map[string]int32{
	"Lean_No":               1,
	"SlightlyWindswept":     2,
	"SixtyDegreesOrLess":    3,
	"HorizontalOrCollapsed": 4,
}

func (x Lean) Enum() *Lean {
	p := new(Lean)
	*p = x
	return p
}
func (x Lean) String() string {
	return proto.EnumName(Lean_name, int32(x))
}
func (x *Lean) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Lean_value, data, "Lean")
	if err != nil {
		return err
	}
	*x = Lean(value)
	return nil
}

type DeadBranches int32

const (
	DeadBranches_NoneOrVeryLittle          DeadBranches = 1
	DeadBranches_Some                      DeadBranches = 2
	DeadBranches_LotsAndOrExtensiveDieBack DeadBranches = 3
	DeadBranches_DeadBranches_NotSure      DeadBranches = 4
)

var DeadBranches_name = map[int32]string{
	1: "NoneOrVeryLittle",
	2: "Some",
	3: "LotsAndOrExtensiveDieBack",
	4: "DeadBranches_NotSure",
}
var DeadBranches_value = map[string]int32{
	"NoneOrVeryLittle": 1,
	"Some":             2,
	"LotsAndOrExtensiveDieBack": 3,
	"DeadBranches_NotSure":      4,
}

func (x DeadBranches) Enum() *DeadBranches {
	p := new(DeadBranches)
	*p = x
	return p
}
func (x DeadBranches) String() string {
	return proto.EnumName(DeadBranches_name, int32(x))
}
func (x *DeadBranches) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeadBranches_value, data, "DeadBranches")
	if err != nil {
		return err
	}
	*x = DeadBranches(value)
	return nil
}

type StormDamage int32

const (
	StormDamage_NoObviousDamage     StormDamage = 1
	StormDamage_SomeDamage          StormDamage = 2
	StormDamage_LossOfLargeLimbs    StormDamage = 3
	StormDamage_StormDamage_NotSure StormDamage = 4
)

var StormDamage_name = map[int32]string{
	1: "NoObviousDamage",
	2: "SomeDamage",
	3: "LossOfLargeLimbs",
	4: "StormDamage_NotSure",
}
var StormDamage_value = map[string]int32{
	"NoObviousDamage":     1,
	"SomeDamage":          2,
	"LossOfLargeLimbs":    3,
	"StormDamage_NotSure": 4,
}

func (x StormDamage) Enum() *StormDamage {
	p := new(StormDamage)
	*p = x
	return p
}
func (x StormDamage) String() string {
	return proto.EnumName(StormDamage_name, int32(x))
}
func (x *StormDamage) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StormDamage_value, data, "StormDamage")
	if err != nil {
		return err
	}
	*x = StormDamage(value)
	return nil
}

type PastManagement int32

const (
	PastManagement_NothingObvious          PastManagement = 1
	PastManagement_SomePruning             PastManagement = 2
	PastManagement_LoppedOrReducedInHeight PastManagement = 3
	PastManagement_OldPollard              PastManagement = 4
	PastManagement_RecentPollard           PastManagement = 5
	PastManagement_CoppiceStool            PastManagement = 6
	PastManagement_CableBraced             PastManagement = 7
	PastManagement_PastManagement_NotSure  PastManagement = 8
)

var PastManagement_name = map[int32]string{
	1: "NothingObvious",
	2: "SomePruning",
	3: "LoppedOrReducedInHeight",
	4: "OldPollard",
	5: "RecentPollard",
	6: "CoppiceStool",
	7: "CableBraced",
	8: "PastManagement_NotSure",
}
var PastManagement_value = map[string]int32{
	"NothingObvious":          1,
	"SomePruning":             2,
	"LoppedOrReducedInHeight": 3,
	"OldPollard":              4,
	"RecentPollard":           5,
	"CoppiceStool":            6,
	"CableBraced":             7,
	"PastManagement_NotSure":  8,
}

func (x PastManagement) Enum() *PastManagement {
	p := new(PastManagement)
	*p = x
	return p
}
func (x PastManagement) String() string {
	return proto.EnumName(PastManagement_name, int32(x))
}
func (x *PastManagement) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PastManagement_value, data, "PastManagement")
	if err != nil {
		return err
	}
	*x = PastManagement(value)
	return nil
}

type NotSureBool int32

const (
	NotSureBool_NotSure NotSureBool = 1
	NotSureBool_Yes     NotSureBool = 2
	NotSureBool_No      NotSureBool = 3
)

var NotSureBool_name = map[int32]string{
	1: "NotSure",
	2: "Yes",
	3: "No",
}
var NotSureBool_value = map[string]int32{
	"NotSure": 1,
	"Yes":     2,
	"No":      3,
}

func (x NotSureBool) Enum() *NotSureBool {
	p := new(NotSureBool)
	*p = x
	return p
}
func (x NotSureBool) String() string {
	return proto.EnumName(NotSureBool_name, int32(x))
}
func (x *NotSureBool) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NotSureBool_value, data, "NotSureBool")
	if err != nil {
		return err
	}
	*x = NotSureBool(value)
	return nil
}

type TreeRegister struct {
	Trees            []*Tree `protobuf:"bytes,1,rep" json:"Trees,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TreeRegister) Reset()         { *m = TreeRegister{} }
func (m *TreeRegister) String() string { return proto.CompactTextString(m) }
func (*TreeRegister) ProtoMessage()    {}

func (m *TreeRegister) GetTrees() []*Tree {
	if m != nil {
		return m.Trees
	}
	return nil
}

type Tree struct {
	GeneralInformation    *GeneralInformation    `protobuf:"bytes,1,opt" json:"GeneralInformation,omitempty"`
	OtherInformation      *OtherInformation      `protobuf:"bytes,2,opt" json:"OtherInformation,omitempty"`
	Measurements          *Measurements          `protobuf:"bytes,3,opt" json:"Measurements,omitempty"`
	Condition             *Condition             `protobuf:"bytes,4,opt" json:"Condition,omitempty"`
	AdditionalInformation *AdditionalInformation `protobuf:"bytes,5,opt" json:"AdditionalInformation,omitempty"`
	Sender                *Sender                `protobuf:"bytes,6,opt" json:"Sender,omitempty"`
	XXX_unrecognized      []byte                 `json:"-"`
}

func (m *Tree) Reset()         { *m = Tree{} }
func (m *Tree) String() string { return proto.CompactTextString(m) }
func (*Tree) ProtoMessage()    {}

func (m *Tree) GetGeneralInformation() *GeneralInformation {
	if m != nil {
		return m.GeneralInformation
	}
	return nil
}

func (m *Tree) GetOtherInformation() *OtherInformation {
	if m != nil {
		return m.OtherInformation
	}
	return nil
}

func (m *Tree) GetMeasurements() *Measurements {
	if m != nil {
		return m.Measurements
	}
	return nil
}

func (m *Tree) GetCondition() *Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (m *Tree) GetAdditionalInformation() *AdditionalInformation {
	if m != nil {
		return m.AdditionalInformation
	}
	return nil
}

func (m *Tree) GetSender() *Sender {
	if m != nil {
		return m.Sender
	}
	return nil
}

type GeneralInformation struct {
	TypeOfTree       *string `protobuf:"bytes,1,opt" json:"TypeOfTree,omitempty"`
	Ownership        *string `protobuf:"bytes,2,opt" json:"Ownership,omitempty"`
	CountryState     *string `protobuf:"bytes,3,opt" json:"CountryState,omitempty"`
	PostCodeZipCode  *string `protobuf:"bytes,4,opt" json:"PostCodeZipCode,omitempty"`
	Location         *string `protobuf:"bytes,5,opt" json:"Location,omitempty"`
	FullAddress      *string `protobuf:"bytes,6,opt" json:"FullAddress,omitempty"`
	Country          *string `protobuf:"bytes,7,opt" json:"Country,omitempty"`
	GridReference    *string `protobuf:"bytes,8,opt" json:"GridReference,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GeneralInformation) Reset()         { *m = GeneralInformation{} }
func (m *GeneralInformation) String() string { return proto.CompactTextString(m) }
func (*GeneralInformation) ProtoMessage()    {}

func (m *GeneralInformation) GetTypeOfTree() string {
	if m != nil && m.TypeOfTree != nil {
		return *m.TypeOfTree
	}
	return ""
}

func (m *GeneralInformation) GetOwnership() string {
	if m != nil && m.Ownership != nil {
		return *m.Ownership
	}
	return ""
}

func (m *GeneralInformation) GetCountryState() string {
	if m != nil && m.CountryState != nil {
		return *m.CountryState
	}
	return ""
}

func (m *GeneralInformation) GetPostCodeZipCode() string {
	if m != nil && m.PostCodeZipCode != nil {
		return *m.PostCodeZipCode
	}
	return ""
}

func (m *GeneralInformation) GetLocation() string {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return ""
}

func (m *GeneralInformation) GetFullAddress() string {
	if m != nil && m.FullAddress != nil {
		return *m.FullAddress
	}
	return ""
}

func (m *GeneralInformation) GetCountry() string {
	if m != nil && m.Country != nil {
		return *m.Country
	}
	return ""
}

func (m *GeneralInformation) GetGridReference() string {
	if m != nil && m.GridReference != nil {
		return *m.GridReference
	}
	return ""
}

type OtherInformation struct {
	PlantingDate     *string `protobuf:"bytes,1,opt" json:"PlantingDate,omitempty"`
	SeedCollectionNo *string `protobuf:"bytes,2,opt" json:"SeedCollectionNo,omitempty"`
	PlantedBy        *string `protobuf:"bytes,3,opt" json:"PlantedBy,omitempty"`
	SeedCollector    *string `protobuf:"bytes,4,opt" json:"SeedCollector,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OtherInformation) Reset()         { *m = OtherInformation{} }
func (m *OtherInformation) String() string { return proto.CompactTextString(m) }
func (*OtherInformation) ProtoMessage()    {}

func (m *OtherInformation) GetPlantingDate() string {
	if m != nil && m.PlantingDate != nil {
		return *m.PlantingDate
	}
	return ""
}

func (m *OtherInformation) GetSeedCollectionNo() string {
	if m != nil && m.SeedCollectionNo != nil {
		return *m.SeedCollectionNo
	}
	return ""
}

func (m *OtherInformation) GetPlantedBy() string {
	if m != nil && m.PlantedBy != nil {
		return *m.PlantedBy
	}
	return ""
}

func (m *OtherInformation) GetSeedCollector() string {
	if m != nil && m.SeedCollector != nil {
		return *m.SeedCollector
	}
	return ""
}

type Measurements struct {
	HeightMeasurement        *HeightMeasurement  `protobuf:"bytes,1,opt" json:"HeightMeasurement,omitempty"`
	WasHeightEstimated       *bool               `protobuf:"varint,2,opt" json:"WasHeightEstimated,omitempty"`
	Girth                    *Measurement        `protobuf:"bytes,3,opt" json:"Girth,omitempty"`
	HeightOfGirthMeasurement *Measurement        `protobuf:"bytes,4,opt" json:"HeightOfGirthMeasurement,omitempty"`
	GirthExaggerated         *bool               `protobuf:"varint,5,opt" json:"GirthExaggerated,omitempty"`
	TreeGrowthCategory       *TreeGrowthCategory `protobuf:"varint,6,opt,enum=tests.TreeGrowthCategory" json:"TreeGrowthCategory,omitempty"`
	XXX_unrecognized         []byte              `json:"-"`
}

func (m *Measurements) Reset()         { *m = Measurements{} }
func (m *Measurements) String() string { return proto.CompactTextString(m) }
func (*Measurements) ProtoMessage()    {}

func (m *Measurements) GetHeightMeasurement() *HeightMeasurement {
	if m != nil {
		return m.HeightMeasurement
	}
	return nil
}

func (m *Measurements) GetWasHeightEstimated() bool {
	if m != nil && m.WasHeightEstimated != nil {
		return *m.WasHeightEstimated
	}
	return false
}

func (m *Measurements) GetGirth() *Measurement {
	if m != nil {
		return m.Girth
	}
	return nil
}

func (m *Measurements) GetHeightOfGirthMeasurement() *Measurement {
	if m != nil {
		return m.HeightOfGirthMeasurement
	}
	return nil
}

func (m *Measurements) GetGirthExaggerated() bool {
	if m != nil && m.GirthExaggerated != nil {
		return *m.GirthExaggerated
	}
	return false
}

func (m *Measurements) GetTreeGrowthCategory() TreeGrowthCategory {
	if m != nil && m.TreeGrowthCategory != nil {
		return *m.TreeGrowthCategory
	}
	return TreeGrowthCategory_A
}

type HeightMeasurement struct {
	Metres           *float64 `protobuf:"fixed64,1,opt" json:"Metres,omitempty"`
	Feet             *float64 `protobuf:"fixed64,2,opt" json:"Feet,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *HeightMeasurement) Reset()         { *m = HeightMeasurement{} }
func (m *HeightMeasurement) String() string { return proto.CompactTextString(m) }
func (*HeightMeasurement) ProtoMessage()    {}

func (m *HeightMeasurement) GetMetres() float64 {
	if m != nil && m.Metres != nil {
		return *m.Metres
	}
	return 0
}

func (m *HeightMeasurement) GetFeet() float64 {
	if m != nil && m.Feet != nil {
		return *m.Feet
	}
	return 0
}

type Measurement struct {
	Metres           *float64 `protobuf:"fixed64,1,opt" json:"Metres,omitempty"`
	Feet             *int64   `protobuf:"varint,2,opt" json:"Feet,omitempty"`
	Inches           *int64   `protobuf:"varint,3,opt" json:"Inches,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Measurement) Reset()         { *m = Measurement{} }
func (m *Measurement) String() string { return proto.CompactTextString(m) }
func (*Measurement) ProtoMessage()    {}

func (m *Measurement) GetMetres() float64 {
	if m != nil && m.Metres != nil {
		return *m.Metres
	}
	return 0
}

func (m *Measurement) GetFeet() int64 {
	if m != nil && m.Feet != nil {
		return *m.Feet
	}
	return 0
}

func (m *Measurement) GetInches() int64 {
	if m != nil && m.Inches != nil {
		return *m.Inches
	}
	return 0
}

type Condition struct {
	GeneralAppearance                 *GeneralAppearance `protobuf:"varint,1,opt,enum=tests.GeneralAppearance" json:"GeneralAppearance,omitempty"`
	TrunkStemming                     *TrunkStemming     `protobuf:"varint,2,opt,enum=tests.TrunkStemming" json:"TrunkStemming,omitempty"`
	Ground                            *Ground            `protobuf:"varint,3,opt,enum=tests.Ground" json:"Ground,omitempty"`
	Lead                              *Lean              `protobuf:"varint,4,opt,enum=tests.Lean" json:"Lead,omitempty"`
	DeadBranches                      *DeadBranches      `protobuf:"varint,5,opt,enum=tests.DeadBranches" json:"DeadBranches,omitempty"`
	StormDamage                       *StormDamage       `protobuf:"varint,6,opt,enum=tests.StormDamage" json:"StormDamage,omitempty"`
	PastManagement                    *PastManagement    `protobuf:"varint,7,opt,enum=tests.PastManagement" json:"PastManagement,omitempty"`
	LocalOrNationalHistoricalInterest *NotSureBool       `protobuf:"varint,8,opt,enum=tests.NotSureBool" json:"LocalOrNationalHistoricalInterest,omitempty"`
	LocalLandmark                     *NotSureBool       `protobuf:"varint,9,opt,enum=tests.NotSureBool" json:"LocalLandmark,omitempty"`
	RemarkableOrUnusual               *bool              `protobuf:"varint,10,opt" json:"RemarkableOrUnusual,omitempty"`
	Veteran                           *NotSureBool       `protobuf:"varint,11,opt,enum=tests.NotSureBool" json:"Veteran,omitempty"`
	XXX_unrecognized                  []byte             `json:"-"`
}

func (m *Condition) Reset()         { *m = Condition{} }
func (m *Condition) String() string { return proto.CompactTextString(m) }
func (*Condition) ProtoMessage()    {}

func (m *Condition) GetGeneralAppearance() GeneralAppearance {
	if m != nil && m.GeneralAppearance != nil {
		return *m.GeneralAppearance
	}
	return GeneralAppearance_Excellent
}

func (m *Condition) GetTrunkStemming() TrunkStemming {
	if m != nil && m.TrunkStemming != nil {
		return *m.TrunkStemming
	}
	return TrunkStemming_GoodSingleStem
}

func (m *Condition) GetGround() Ground {
	if m != nil && m.Ground != nil {
		return *m.Ground
	}
	return Ground_Level
}

func (m *Condition) GetLead() Lean {
	if m != nil && m.Lead != nil {
		return *m.Lead
	}
	return Lean_Lean_No
}

func (m *Condition) GetDeadBranches() DeadBranches {
	if m != nil && m.DeadBranches != nil {
		return *m.DeadBranches
	}
	return DeadBranches_NoneOrVeryLittle
}

func (m *Condition) GetStormDamage() StormDamage {
	if m != nil && m.StormDamage != nil {
		return *m.StormDamage
	}
	return StormDamage_NoObviousDamage
}

func (m *Condition) GetPastManagement() PastManagement {
	if m != nil && m.PastManagement != nil {
		return *m.PastManagement
	}
	return PastManagement_NothingObvious
}

func (m *Condition) GetLocalOrNationalHistoricalInterest() NotSureBool {
	if m != nil && m.LocalOrNationalHistoricalInterest != nil {
		return *m.LocalOrNationalHistoricalInterest
	}
	return NotSureBool_NotSure
}

func (m *Condition) GetLocalLandmark() NotSureBool {
	if m != nil && m.LocalLandmark != nil {
		return *m.LocalLandmark
	}
	return NotSureBool_NotSure
}

func (m *Condition) GetRemarkableOrUnusual() bool {
	if m != nil && m.RemarkableOrUnusual != nil {
		return *m.RemarkableOrUnusual
	}
	return false
}

func (m *Condition) GetVeteran() NotSureBool {
	if m != nil && m.Veteran != nil {
		return *m.Veteran
	}
	return NotSureBool_NotSure
}

type AdditionalInformation struct {
	Comments         *string  `protobuf:"bytes,1,opt" json:"Comments,omitempty"`
	Other            *string  `protobuf:"bytes,2,opt" json:"Other,omitempty"`
	Photos           []*Photo `protobuf:"bytes,3,rep" json:"Photos,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *AdditionalInformation) Reset()         { *m = AdditionalInformation{} }
func (m *AdditionalInformation) String() string { return proto.CompactTextString(m) }
func (*AdditionalInformation) ProtoMessage()    {}

func (m *AdditionalInformation) GetComments() string {
	if m != nil && m.Comments != nil {
		return *m.Comments
	}
	return ""
}

func (m *AdditionalInformation) GetOther() string {
	if m != nil && m.Other != nil {
		return *m.Other
	}
	return ""
}

func (m *AdditionalInformation) GetPhotos() []*Photo {
	if m != nil {
		return m.Photos
	}
	return nil
}

type Photo struct {
	Filename         *string `protobuf:"bytes,1,opt" json:"Filename,omitempty"`
	Data             []byte  `protobuf:"bytes,2,opt" json:"Data,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Photo) Reset()         { *m = Photo{} }
func (m *Photo) String() string { return proto.CompactTextString(m) }
func (*Photo) ProtoMessage()    {}

func (m *Photo) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

func (m *Photo) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Sender struct {
	Name             *string `protobuf:"bytes,1,opt" json:"Name,omitempty"`
	Address          *string `protobuf:"bytes,2,opt" json:"Address,omitempty"`
	Email            *string `protobuf:"bytes,3,opt" json:"Email,omitempty"`
	Telephone        *string `protobuf:"bytes,4,opt" json:"Telephone,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Sender) Reset()         { *m = Sender{} }
func (m *Sender) String() string { return proto.CompactTextString(m) }
func (*Sender) ProtoMessage()    {}

func (m *Sender) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Sender) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *Sender) GetEmail() string {
	if m != nil && m.Email != nil {
		return *m.Email
	}
	return ""
}

func (m *Sender) GetTelephone() string {
	if m != nil && m.Telephone != nil {
		return *m.Telephone
	}
	return ""
}

func init() {
	proto.RegisterEnum("tests.TreeGrowthCategory", TreeGrowthCategory_name, TreeGrowthCategory_value)
	proto.RegisterEnum("tests.GeneralAppearance", GeneralAppearance_name, GeneralAppearance_value)
	proto.RegisterEnum("tests.TrunkStemming", TrunkStemming_name, TrunkStemming_value)
	proto.RegisterEnum("tests.Ground", Ground_name, Ground_value)
	proto.RegisterEnum("tests.Lean", Lean_name, Lean_value)
	proto.RegisterEnum("tests.DeadBranches", DeadBranches_name, DeadBranches_value)
	proto.RegisterEnum("tests.StormDamage", StormDamage_name, StormDamage_value)
	proto.RegisterEnum("tests.PastManagement", PastManagement_name, PastManagement_value)
	proto.RegisterEnum("tests.NotSureBool", NotSureBool_name, NotSureBool_value)
}
func NewPopulatedTreeRegister(r randyTreeregister, easy bool) *TreeRegister {
	this := &TreeRegister{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(10)
		this.Trees = make([]*Tree, v1)
		for i := 0; i < v1; i++ {
			this.Trees[i] = NewPopulatedTree(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTreeregister(r, 2)
	}
	return this
}

func NewPopulatedTree(r randyTreeregister, easy bool) *Tree {
	this := &Tree{}
	if r.Intn(10) != 0 {
		this.GeneralInformation = NewPopulatedGeneralInformation(r, easy)
	}
	if r.Intn(10) != 0 {
		this.OtherInformation = NewPopulatedOtherInformation(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Measurements = NewPopulatedMeasurements(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Condition = NewPopulatedCondition(r, easy)
	}
	if r.Intn(10) != 0 {
		this.AdditionalInformation = NewPopulatedAdditionalInformation(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Sender = NewPopulatedSender(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTreeregister(r, 7)
	}
	return this
}

func NewPopulatedGeneralInformation(r randyTreeregister, easy bool) *GeneralInformation {
	this := &GeneralInformation{}
	if r.Intn(10) != 0 {
		v2 := randStringTreeregister(r)
		this.TypeOfTree = &v2
	}
	if r.Intn(10) != 0 {
		v3 := randStringTreeregister(r)
		this.Ownership = &v3
	}
	if r.Intn(10) != 0 {
		v4 := randStringTreeregister(r)
		this.CountryState = &v4
	}
	if r.Intn(10) != 0 {
		v5 := randStringTreeregister(r)
		this.PostCodeZipCode = &v5
	}
	if r.Intn(10) != 0 {
		v6 := randStringTreeregister(r)
		this.Location = &v6
	}
	if r.Intn(10) != 0 {
		v7 := randStringTreeregister(r)
		this.FullAddress = &v7
	}
	if r.Intn(10) != 0 {
		v8 := randStringTreeregister(r)
		this.Country = &v8
	}
	if r.Intn(10) != 0 {
		v9 := randStringTreeregister(r)
		this.GridReference = &v9
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTreeregister(r, 9)
	}
	return this
}

func NewPopulatedOtherInformation(r randyTreeregister, easy bool) *OtherInformation {
	this := &OtherInformation{}
	if r.Intn(10) != 0 {
		v10 := randStringTreeregister(r)
		this.PlantingDate = &v10
	}
	if r.Intn(10) != 0 {
		v11 := randStringTreeregister(r)
		this.SeedCollectionNo = &v11
	}
	if r.Intn(10) != 0 {
		v12 := randStringTreeregister(r)
		this.PlantedBy = &v12
	}
	if r.Intn(10) != 0 {
		v13 := randStringTreeregister(r)
		this.SeedCollector = &v13
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTreeregister(r, 5)
	}
	return this
}

func NewPopulatedMeasurements(r randyTreeregister, easy bool) *Measurements {
	this := &Measurements{}
	if r.Intn(10) != 0 {
		this.HeightMeasurement = NewPopulatedHeightMeasurement(r, easy)
	}
	if r.Intn(10) != 0 {
		v14 := bool(r.Intn(2) == 0)
		this.WasHeightEstimated = &v14
	}
	if r.Intn(10) != 0 {
		this.Girth = NewPopulatedMeasurement(r, easy)
	}
	if r.Intn(10) != 0 {
		this.HeightOfGirthMeasurement = NewPopulatedMeasurement(r, easy)
	}
	if r.Intn(10) != 0 {
		v15 := bool(r.Intn(2) == 0)
		this.GirthExaggerated = &v15
	}
	if r.Intn(10) != 0 {
		v16 := TreeGrowthCategory([]int32{1, 2, 3}[r.Intn(3)])
		this.TreeGrowthCategory = &v16
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTreeregister(r, 7)
	}
	return this
}

func NewPopulatedHeightMeasurement(r randyTreeregister, easy bool) *HeightMeasurement {
	this := &HeightMeasurement{}
	if r.Intn(10) != 0 {
		v17 := r.Float64()
		if r.Intn(2) == 0 {
			v17 *= -1
		}
		this.Metres = &v17
	}
	if r.Intn(10) != 0 {
		v18 := r.Float64()
		if r.Intn(2) == 0 {
			v18 *= -1
		}
		this.Feet = &v18
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTreeregister(r, 3)
	}
	return this
}

func NewPopulatedMeasurement(r randyTreeregister, easy bool) *Measurement {
	this := &Measurement{}
	if r.Intn(10) != 0 {
		v19 := r.Float64()
		if r.Intn(2) == 0 {
			v19 *= -1
		}
		this.Metres = &v19
	}
	if r.Intn(10) != 0 {
		v20 := r.Int63()
		if r.Intn(2) == 0 {
			v20 *= -1
		}
		this.Feet = &v20
	}
	if r.Intn(10) != 0 {
		v21 := r.Int63()
		if r.Intn(2) == 0 {
			v21 *= -1
		}
		this.Inches = &v21
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTreeregister(r, 4)
	}
	return this
}

func NewPopulatedCondition(r randyTreeregister, easy bool) *Condition {
	this := &Condition{}
	if r.Intn(10) != 0 {
		v22 := GeneralAppearance([]int32{1, 2, 3, 4, 5, 6}[r.Intn(6)])
		this.GeneralAppearance = &v22
	}
	if r.Intn(10) != 0 {
		v23 := TrunkStemming([]int32{1, 2, 3, 4}[r.Intn(4)])
		this.TrunkStemming = &v23
	}
	if r.Intn(10) != 0 {
		v24 := Ground([]int32{1, 2, 3}[r.Intn(3)])
		this.Ground = &v24
	}
	if r.Intn(10) != 0 {
		v25 := Lean([]int32{1, 2, 3, 4}[r.Intn(4)])
		this.Lead = &v25
	}
	if r.Intn(10) != 0 {
		v26 := DeadBranches([]int32{1, 2, 3, 4}[r.Intn(4)])
		this.DeadBranches = &v26
	}
	if r.Intn(10) != 0 {
		v27 := StormDamage([]int32{1, 2, 3, 4}[r.Intn(4)])
		this.StormDamage = &v27
	}
	if r.Intn(10) != 0 {
		v28 := PastManagement([]int32{1, 2, 3, 4, 5, 6, 7, 8}[r.Intn(8)])
		this.PastManagement = &v28
	}
	if r.Intn(10) != 0 {
		v29 := NotSureBool([]int32{1, 2, 3}[r.Intn(3)])
		this.LocalOrNationalHistoricalInterest = &v29
	}
	if r.Intn(10) != 0 {
		v30 := NotSureBool([]int32{1, 2, 3}[r.Intn(3)])
		this.LocalLandmark = &v30
	}
	if r.Intn(10) != 0 {
		v31 := bool(r.Intn(2) == 0)
		this.RemarkableOrUnusual = &v31
	}
	if r.Intn(10) != 0 {
		v32 := NotSureBool([]int32{1, 2, 3}[r.Intn(3)])
		this.Veteran = &v32
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTreeregister(r, 12)
	}
	return this
}

func NewPopulatedAdditionalInformation(r randyTreeregister, easy bool) *AdditionalInformation {
	this := &AdditionalInformation{}
	if r.Intn(10) != 0 {
		v33 := randStringTreeregister(r)
		this.Comments = &v33
	}
	if r.Intn(10) != 0 {
		v34 := randStringTreeregister(r)
		this.Other = &v34
	}
	if r.Intn(10) != 0 {
		v35 := r.Intn(10)
		this.Photos = make([]*Photo, v35)
		for i := 0; i < v35; i++ {
			this.Photos[i] = NewPopulatedPhoto(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTreeregister(r, 4)
	}
	return this
}

func NewPopulatedPhoto(r randyTreeregister, easy bool) *Photo {
	this := &Photo{}
	if r.Intn(10) != 0 {
		v36 := randStringTreeregister(r)
		this.Filename = &v36
	}
	if r.Intn(10) != 0 {
		v37 := r.Intn(100)
		this.Data = make([]byte, v37)
		for i := 0; i < v37; i++ {
			this.Data[i] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTreeregister(r, 3)
	}
	return this
}

func NewPopulatedSender(r randyTreeregister, easy bool) *Sender {
	this := &Sender{}
	if r.Intn(10) != 0 {
		v38 := randStringTreeregister(r)
		this.Name = &v38
	}
	if r.Intn(10) != 0 {
		v39 := randStringTreeregister(r)
		this.Address = &v39
	}
	if r.Intn(10) != 0 {
		v40 := randStringTreeregister(r)
		this.Email = &v40
	}
	if r.Intn(10) != 0 {
		v41 := randStringTreeregister(r)
		this.Telephone = &v41
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTreeregister(r, 5)
	}
	return this
}

type randyTreeregister interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTreeregister(r randyTreeregister) rune {
	return rune(r.Intn(126-43) + 43)
}
func randStringTreeregister(r randyTreeregister) string {
	v42 := r.Intn(100)
	tmps := make([]rune, v42)
	for i := 0; i < v42; i++ {
		tmps[i] = randUTF8RuneTreeregister(r)
	}
	return string(tmps)
}
func randUnrecognizedTreeregister(r randyTreeregister, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldTreeregister(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldTreeregister(data []byte, r randyTreeregister, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateTreeregister(data, uint64(key))
		v43 := r.Int63()
		if r.Intn(2) == 0 {
			v43 *= -1
		}
		data = encodeVarintPopulateTreeregister(data, uint64(v43))
	case 1:
		data = encodeVarintPopulateTreeregister(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateTreeregister(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateTreeregister(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateTreeregister(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateTreeregister(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (this *TreeRegister) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tests.TreeRegister{` +
		`Trees:` + fmt.Sprintf("%#v", this.Trees),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Tree) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tests.Tree{` +
		`GeneralInformation:` + fmt.Sprintf("%#v", this.GeneralInformation),
		`OtherInformation:` + fmt.Sprintf("%#v", this.OtherInformation),
		`Measurements:` + fmt.Sprintf("%#v", this.Measurements),
		`Condition:` + fmt.Sprintf("%#v", this.Condition),
		`AdditionalInformation:` + fmt.Sprintf("%#v", this.AdditionalInformation),
		`Sender:` + fmt.Sprintf("%#v", this.Sender),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *GeneralInformation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tests.GeneralInformation{` +
		`TypeOfTree:` + valueToGoStringTreeregister(this.TypeOfTree, "string"),
		`Ownership:` + valueToGoStringTreeregister(this.Ownership, "string"),
		`CountryState:` + valueToGoStringTreeregister(this.CountryState, "string"),
		`PostCodeZipCode:` + valueToGoStringTreeregister(this.PostCodeZipCode, "string"),
		`Location:` + valueToGoStringTreeregister(this.Location, "string"),
		`FullAddress:` + valueToGoStringTreeregister(this.FullAddress, "string"),
		`Country:` + valueToGoStringTreeregister(this.Country, "string"),
		`GridReference:` + valueToGoStringTreeregister(this.GridReference, "string"),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *OtherInformation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tests.OtherInformation{` +
		`PlantingDate:` + valueToGoStringTreeregister(this.PlantingDate, "string"),
		`SeedCollectionNo:` + valueToGoStringTreeregister(this.SeedCollectionNo, "string"),
		`PlantedBy:` + valueToGoStringTreeregister(this.PlantedBy, "string"),
		`SeedCollector:` + valueToGoStringTreeregister(this.SeedCollector, "string"),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Measurements) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tests.Measurements{` +
		`HeightMeasurement:` + fmt.Sprintf("%#v", this.HeightMeasurement),
		`WasHeightEstimated:` + valueToGoStringTreeregister(this.WasHeightEstimated, "bool"),
		`Girth:` + fmt.Sprintf("%#v", this.Girth),
		`HeightOfGirthMeasurement:` + fmt.Sprintf("%#v", this.HeightOfGirthMeasurement),
		`GirthExaggerated:` + valueToGoStringTreeregister(this.GirthExaggerated, "bool"),
		`TreeGrowthCategory:` + valueToGoStringTreeregister(this.TreeGrowthCategory, "tests.TreeGrowthCategory"),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *HeightMeasurement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tests.HeightMeasurement{` +
		`Metres:` + valueToGoStringTreeregister(this.Metres, "float64"),
		`Feet:` + valueToGoStringTreeregister(this.Feet, "float64"),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Measurement) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tests.Measurement{` +
		`Metres:` + valueToGoStringTreeregister(this.Metres, "float64"),
		`Feet:` + valueToGoStringTreeregister(this.Feet, "int64"),
		`Inches:` + valueToGoStringTreeregister(this.Inches, "int64"),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Condition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tests.Condition{` +
		`GeneralAppearance:` + valueToGoStringTreeregister(this.GeneralAppearance, "tests.GeneralAppearance"),
		`TrunkStemming:` + valueToGoStringTreeregister(this.TrunkStemming, "tests.TrunkStemming"),
		`Ground:` + valueToGoStringTreeregister(this.Ground, "tests.Ground"),
		`Lead:` + valueToGoStringTreeregister(this.Lead, "tests.Lean"),
		`DeadBranches:` + valueToGoStringTreeregister(this.DeadBranches, "tests.DeadBranches"),
		`StormDamage:` + valueToGoStringTreeregister(this.StormDamage, "tests.StormDamage"),
		`PastManagement:` + valueToGoStringTreeregister(this.PastManagement, "tests.PastManagement"),
		`LocalOrNationalHistoricalInterest:` + valueToGoStringTreeregister(this.LocalOrNationalHistoricalInterest, "tests.NotSureBool"),
		`LocalLandmark:` + valueToGoStringTreeregister(this.LocalLandmark, "tests.NotSureBool"),
		`RemarkableOrUnusual:` + valueToGoStringTreeregister(this.RemarkableOrUnusual, "bool"),
		`Veteran:` + valueToGoStringTreeregister(this.Veteran, "tests.NotSureBool"),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *AdditionalInformation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tests.AdditionalInformation{` +
		`Comments:` + valueToGoStringTreeregister(this.Comments, "string"),
		`Other:` + valueToGoStringTreeregister(this.Other, "string"),
		`Photos:` + fmt.Sprintf("%#v", this.Photos),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Photo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tests.Photo{` +
		`Filename:` + valueToGoStringTreeregister(this.Filename, "string"),
		`Data:` + valueToGoStringTreeregister(this.Data, "byte"),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Sender) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&tests.Sender{` +
		`Name:` + valueToGoStringTreeregister(this.Name, "string"),
		`Address:` + valueToGoStringTreeregister(this.Address, "string"),
		`Email:` + valueToGoStringTreeregister(this.Email, "string"),
		`Telephone:` + valueToGoStringTreeregister(this.Telephone, "string"),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func valueToGoStringTreeregister(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringTreeregister(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}
