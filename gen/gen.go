//  Copyright 2013 Walter Schulze
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

package gen

import (
	"flag"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

func CapFirst(s string) string {
	b := []byte(s)
	b[0] ^= ' '
	return string(b)
}

func LowerFirst(s string) string {
	b := []byte(s)
	b[0] |= ('a' - 'A')
	return string(b)
}

var funcMap = template.FuncMap{
	"capFirst":   CapFirst,
	"lowerFirst": LowerFirst,
}

type gen struct {
	name string
	dir  string
}

func NewFunc(packageName string) func(template string, filename string, objects []interface{}, imports ...string) {
	dir := "."
	flag.Parse()
	args := flag.Args()
	if len(args) == 1 {
		dir = args[0]
	}
	fmt.Fprintf(os.Stderr, "generating code in %s\n", dir)
	g := &gen{packageName, dir}
	return g.gen
}

func (this *gen) gen(tmp string, filename string, objects []interface{}, imports ...string) {
	f, err := os.Create(filepath.Join(this.dir, filename))
	if err != nil {
		panic(err)
	}
	f.Write([]byte(`// Code generated by ` + this.name + `-gen.` + "\n"))
	f.Write([]byte(`// DO NOT EDIT!` + "\n\n"))
	f.Write([]byte(`package ` + this.name + "\n"))
	if len(imports) > 0 {
		f.Write([]byte("\nimport (\n"))
		f.Write([]byte(strings.Join(imports, "\n")))
		f.Write([]byte("\n)\n\n"))
	}
	t := template.Must(template.New("a").Funcs(funcMap).Parse(tmp))
	for _, o := range objects {
		err := t.Execute(f, o)
		if err != nil {
			panic(err)
		}
	}
}
