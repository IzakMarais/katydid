// Code generated by funcs-gen.
// DO NOT EDIT!

package funcs

import (
	"github.com/katydid/katydid/parser"
)

type varDouble struct {
	Value parser.Value
}

var _ Setter = &varDouble{}
var _ Variable = &varDouble{}

func (this *varDouble) Eval() (float64, error) {
	v, err := this.Value.Double()
	if err != nil {
		return 0, err
	}
	return v, nil
}

func (this *varDouble) IsVariable() {}

func (this *varDouble) SetValue(v parser.Value) {
	this.Value = v
}

func (this *varDouble) String() string {
	return "$double"
}

func DoubleVar() *varDouble {
	return &varDouble{}
}

type varInt struct {
	Value parser.Value
}

var _ Setter = &varInt{}
var _ Variable = &varInt{}

func (this *varInt) Eval() (int64, error) {
	v, err := this.Value.Int()
	if err != nil {
		return 0, err
	}
	return v, nil
}

func (this *varInt) IsVariable() {}

func (this *varInt) SetValue(v parser.Value) {
	this.Value = v
}

func (this *varInt) String() string {
	return "$int"
}

func IntVar() *varInt {
	return &varInt{}
}

type varUint struct {
	Value parser.Value
}

var _ Setter = &varUint{}
var _ Variable = &varUint{}

func (this *varUint) Eval() (uint64, error) {
	v, err := this.Value.Uint()
	if err != nil {
		return 0, err
	}
	return v, nil
}

func (this *varUint) IsVariable() {}

func (this *varUint) SetValue(v parser.Value) {
	this.Value = v
}

func (this *varUint) String() string {
	return "$uint"
}

func UintVar() *varUint {
	return &varUint{}
}

type varBool struct {
	Value parser.Value
}

var _ Setter = &varBool{}
var _ Variable = &varBool{}

func (this *varBool) Eval() (bool, error) {
	v, err := this.Value.Bool()
	if err != nil {
		return false, err
	}
	return v, nil
}

func (this *varBool) IsVariable() {}

func (this *varBool) SetValue(v parser.Value) {
	this.Value = v
}

func (this *varBool) String() string {
	return "$bool"
}

func BoolVar() *varBool {
	return &varBool{}
}

type varString struct {
	Value parser.Value
}

var _ Setter = &varString{}
var _ Variable = &varString{}

func (this *varString) Eval() (string, error) {
	v, err := this.Value.String()
	if err != nil {
		return "", err
	}
	return v, nil
}

func (this *varString) IsVariable() {}

func (this *varString) SetValue(v parser.Value) {
	this.Value = v
}

func (this *varString) String() string {
	return "$string"
}

func StringVar() *varString {
	return &varString{}
}

type varBytes struct {
	Value parser.Value
}

var _ Setter = &varBytes{}
var _ Variable = &varBytes{}

func (this *varBytes) Eval() ([]byte, error) {
	v, err := this.Value.Bytes()
	if err != nil {
		return nil, err
	}
	return v, nil
}

func (this *varBytes) IsVariable() {}

func (this *varBytes) SetValue(v parser.Value) {
	this.Value = v
}

func (this *varBytes) String() string {
	return "$[]byte"
}

func BytesVar() *varBytes {
	return &varBytes{}
}
