// Code generated by funcs-gen.
// DO NOT EDIT!

package funcs

type lenDoubles struct {
	E Doubles
}

func (this *lenDoubles) Eval() (int64, error) {
	e, err := this.E.Eval()
	if err != nil {
		return 0, err
	}
	return int64(len(e)), nil
}

func init() {
	Register("length", new(lenDoubles))
}

func LenDoubles(e Doubles) Int {
	return &lenDoubles{E: e}
}

type lenInts struct {
	E Ints
}

func (this *lenInts) Eval() (int64, error) {
	e, err := this.E.Eval()
	if err != nil {
		return 0, err
	}
	return int64(len(e)), nil
}

func init() {
	Register("length", new(lenInts))
}

func LenInts(e Ints) Int {
	return &lenInts{E: e}
}

type lenUints struct {
	E Uints
}

func (this *lenUints) Eval() (int64, error) {
	e, err := this.E.Eval()
	if err != nil {
		return 0, err
	}
	return int64(len(e)), nil
}

func init() {
	Register("length", new(lenUints))
}

func LenUints(e Uints) Int {
	return &lenUints{E: e}
}

type lenBools struct {
	E Bools
}

func (this *lenBools) Eval() (int64, error) {
	e, err := this.E.Eval()
	if err != nil {
		return 0, err
	}
	return int64(len(e)), nil
}

func init() {
	Register("length", new(lenBools))
}

func LenBools(e Bools) Int {
	return &lenBools{E: e}
}

type lenStrings struct {
	E Strings
}

func (this *lenStrings) Eval() (int64, error) {
	e, err := this.E.Eval()
	if err != nil {
		return 0, err
	}
	return int64(len(e)), nil
}

func init() {
	Register("length", new(lenStrings))
}

func LenStrings(e Strings) Int {
	return &lenStrings{E: e}
}

type lenListOfBytes struct {
	E ListOfBytes
}

func (this *lenListOfBytes) Eval() (int64, error) {
	e, err := this.E.Eval()
	if err != nil {
		return 0, err
	}
	return int64(len(e)), nil
}

func init() {
	Register("length", new(lenListOfBytes))
}

func LenListOfBytes(e ListOfBytes) Int {
	return &lenListOfBytes{E: e}
}

type lenString struct {
	E String
}

func (this *lenString) Eval() (int64, error) {
	e, err := this.E.Eval()
	if err != nil {
		return 0, err
	}
	return int64(len(e)), nil
}

func init() {
	Register("length", new(lenString))
}

func LenString(e String) Int {
	return &lenString{E: e}
}

type lenBytes struct {
	E Bytes
}

func (this *lenBytes) Eval() (int64, error) {
	e, err := this.E.Eval()
	if err != nil {
		return 0, err
	}
	return int64(len(e)), nil
}

func init() {
	Register("length", new(lenBytes))
}

func LenBytes(e Bytes) Int {
	return &lenBytes{E: e}
}
