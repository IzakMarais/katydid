// Code generated by serialize-gen.
// DO NOT EDIT!

package serialize

import (
	"fmt"
)

var ErrNotDouble = fmt.Errorf("value is not a double")

func (*errValue) Double() (float64, error) {
	return 0, ErrNotDouble
}

type doubleValue struct {
	*errValue
	v float64
}

func NewDoubleValue(v float64) Decoder {
	return &doubleValue{&errValue{}, v}
}

func (v *doubleValue) Double() (float64, error) {
	return v.v, nil
}

var ErrNotInt = fmt.Errorf("value is not a int")

func (*errValue) Int() (int64, error) {
	return 0, ErrNotInt
}

type intValue struct {
	*errValue
	v int64
}

func NewIntValue(v int64) Decoder {
	return &intValue{&errValue{}, v}
}

func (v *intValue) Int() (int64, error) {
	return v.v, nil
}

var ErrNotUint = fmt.Errorf("value is not a uint")

func (*errValue) Uint() (uint64, error) {
	return 0, ErrNotUint
}

type uintValue struct {
	*errValue
	v uint64
}

func NewUintValue(v uint64) Decoder {
	return &uintValue{&errValue{}, v}
}

func (v *uintValue) Uint() (uint64, error) {
	return v.v, nil
}

var ErrNotBool = fmt.Errorf("value is not a bool")

func (*errValue) Bool() (bool, error) {
	return false, ErrNotBool
}

type boolValue struct {
	*errValue
	v bool
}

func NewBoolValue(v bool) Decoder {
	return &boolValue{&errValue{}, v}
}

func (v *boolValue) Bool() (bool, error) {
	return v.v, nil
}

var ErrNotString = fmt.Errorf("value is not a string")

func (*errValue) String() (string, error) {
	return "", ErrNotString
}

type stringValue struct {
	*errValue
	v string
}

func NewStringValue(v string) Decoder {
	return &stringValue{&errValue{}, v}
}

func (v *stringValue) String() (string, error) {
	return v.v, nil
}

var ErrNotBytes = fmt.Errorf("value is not a bytes")

func (*errValue) Bytes() ([]byte, error) {
	return nil, ErrNotBytes
}

type bytesValue struct {
	*errValue
	v []byte
}

func NewBytesValue(v []byte) Decoder {
	return &bytesValue{&errValue{}, v}
}

func (v *bytesValue) Bytes() ([]byte, error) {
	return v.v, nil
}
