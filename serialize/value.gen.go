// Code generated by serialize-gen.
// DO NOT EDIT!

package serialize

import (
	"fmt"
)

var ErrNotFloat64 = fmt.Errorf("value is not a float64")

func (*errValue) Float64() (float64, error) {
	return 0, ErrNotFloat64
}

type float64Value struct {
	*errValue
	v float64
}

func NewFloat64Value(v float64) Decoder {
	return &float64Value{&errValue{}, v}
}

func (v *float64Value) Float64() (float64, error) {
	return v.v, nil
}

var ErrNotInt64 = fmt.Errorf("value is not a int64")

func (*errValue) Int64() (int64, error) {
	return 0, ErrNotInt64
}

type int64Value struct {
	*errValue
	v int64
}

func NewInt64Value(v int64) Decoder {
	return &int64Value{&errValue{}, v}
}

func (v *int64Value) Int64() (int64, error) {
	return v.v, nil
}

var ErrNotUint64 = fmt.Errorf("value is not a uint64")

func (*errValue) Uint64() (uint64, error) {
	return 0, ErrNotUint64
}

type uint64Value struct {
	*errValue
	v uint64
}

func NewUint64Value(v uint64) Decoder {
	return &uint64Value{&errValue{}, v}
}

func (v *uint64Value) Uint64() (uint64, error) {
	return v.v, nil
}

var ErrNotBool = fmt.Errorf("value is not a bool")

func (*errValue) Bool() (bool, error) {
	return false, ErrNotBool
}

type boolValue struct {
	*errValue
	v bool
}

func NewBoolValue(v bool) Decoder {
	return &boolValue{&errValue{}, v}
}

func (v *boolValue) Bool() (bool, error) {
	return v.v, nil
}

var ErrNotString = fmt.Errorf("value is not a string")

func (*errValue) String() (string, error) {
	return "", ErrNotString
}

type stringValue struct {
	*errValue
	v string
}

func NewStringValue(v string) Decoder {
	return &stringValue{&errValue{}, v}
}

func (v *stringValue) String() (string, error) {
	return v.v, nil
}

var ErrNotBytes = fmt.Errorf("value is not a bytes")

func (*errValue) Bytes() ([]byte, error) {
	return nil, ErrNotBytes
}

type bytesValue struct {
	*errValue
	v []byte
}

func NewBytesValue(v []byte) Decoder {
	return &bytesValue{&errValue{}, v}
}

func (v *bytesValue) Bytes() ([]byte, error) {
	return v.v, nil
}
