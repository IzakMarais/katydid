// Code generated by compose-gen.
// DO NOT EDIT!

package compose

import (
	"github.com/awalterschulze/katydid/asm/ast"
	"github.com/awalterschulze/katydid/funcs"
	"github.com/awalterschulze/katydid/types"
)

func composeFloat64(expr *ast.Expr) (funcs.Float64, error) {
	uniq, err := prep(expr, types.SINGLE_DOUBLE)
	if err != nil {
		return nil, err
	}
	if expr.Terminal != nil {
		return funcs.NewFloat64(expr.GetTerminal().GetDoubleValue()), nil
	}
	values, err := newValues(expr.GetFunction().GetParams())
	if err != nil {
		return nil, err
	}
	return funcs.NewFloat64Func(uniq, values...)
}

func composeFloat64s(expr *ast.Expr) (funcs.Float64s, error) {
	uniq, err := prep(expr, types.LIST_DOUBLE)
	if err != nil {
		return nil, err
	}
	if expr.List != nil {
		vs, err := newValues(expr.GetList().GetElems())
		if err != nil {
			return nil, err
		}
		bs := make([]funcs.Float64, len(vs))
		var ok bool
		for i := range vs {
			bs[i], ok = vs[i].(funcs.Float64)
			if !ok {
				return nil, &errExpected{types.SINGLE_DOUBLE.String(), expr.String()}
			}
		}
		return funcs.NewListOfFloat64(bs), nil
	}
	values, err := newValues(expr.GetFunction().GetParams())
	if err != nil {
		return nil, err
	}
	return funcs.NewFloat64sFunc(uniq, values...)
}

func composeFloat32(expr *ast.Expr) (funcs.Float32, error) {
	uniq, err := prep(expr, types.SINGLE_FLOAT)
	if err != nil {
		return nil, err
	}
	if expr.Terminal != nil {
		return funcs.NewFloat32(expr.GetTerminal().GetFloatValue()), nil
	}
	values, err := newValues(expr.GetFunction().GetParams())
	if err != nil {
		return nil, err
	}
	return funcs.NewFloat32Func(uniq, values...)
}

func composeFloat32s(expr *ast.Expr) (funcs.Float32s, error) {
	uniq, err := prep(expr, types.LIST_FLOAT)
	if err != nil {
		return nil, err
	}
	if expr.List != nil {
		vs, err := newValues(expr.GetList().GetElems())
		if err != nil {
			return nil, err
		}
		bs := make([]funcs.Float32, len(vs))
		var ok bool
		for i := range vs {
			bs[i], ok = vs[i].(funcs.Float32)
			if !ok {
				return nil, &errExpected{types.SINGLE_FLOAT.String(), expr.String()}
			}
		}
		return funcs.NewListOfFloat32(bs), nil
	}
	values, err := newValues(expr.GetFunction().GetParams())
	if err != nil {
		return nil, err
	}
	return funcs.NewFloat32sFunc(uniq, values...)
}

func composeInt64(expr *ast.Expr) (funcs.Int64, error) {
	uniq, err := prep(expr, types.SINGLE_INT64)
	if err != nil {
		return nil, err
	}
	if expr.Terminal != nil {
		return funcs.NewInt64(expr.GetTerminal().GetInt64Value()), nil
	}
	values, err := newValues(expr.GetFunction().GetParams())
	if err != nil {
		return nil, err
	}
	return funcs.NewInt64Func(uniq, values...)
}

func composeInt64s(expr *ast.Expr) (funcs.Int64s, error) {
	uniq, err := prep(expr, types.LIST_INT64)
	if err != nil {
		return nil, err
	}
	if expr.List != nil {
		vs, err := newValues(expr.GetList().GetElems())
		if err != nil {
			return nil, err
		}
		bs := make([]funcs.Int64, len(vs))
		var ok bool
		for i := range vs {
			bs[i], ok = vs[i].(funcs.Int64)
			if !ok {
				return nil, &errExpected{types.SINGLE_INT64.String(), expr.String()}
			}
		}
		return funcs.NewListOfInt64(bs), nil
	}
	values, err := newValues(expr.GetFunction().GetParams())
	if err != nil {
		return nil, err
	}
	return funcs.NewInt64sFunc(uniq, values...)
}

func composeUint64(expr *ast.Expr) (funcs.Uint64, error) {
	uniq, err := prep(expr, types.SINGLE_UINT64)
	if err != nil {
		return nil, err
	}
	if expr.Terminal != nil {
		return funcs.NewUint64(expr.GetTerminal().GetUint64Value()), nil
	}
	values, err := newValues(expr.GetFunction().GetParams())
	if err != nil {
		return nil, err
	}
	return funcs.NewUint64Func(uniq, values...)
}

func composeUint64s(expr *ast.Expr) (funcs.Uint64s, error) {
	uniq, err := prep(expr, types.LIST_UINT64)
	if err != nil {
		return nil, err
	}
	if expr.List != nil {
		vs, err := newValues(expr.GetList().GetElems())
		if err != nil {
			return nil, err
		}
		bs := make([]funcs.Uint64, len(vs))
		var ok bool
		for i := range vs {
			bs[i], ok = vs[i].(funcs.Uint64)
			if !ok {
				return nil, &errExpected{types.SINGLE_UINT64.String(), expr.String()}
			}
		}
		return funcs.NewListOfUint64(bs), nil
	}
	values, err := newValues(expr.GetFunction().GetParams())
	if err != nil {
		return nil, err
	}
	return funcs.NewUint64sFunc(uniq, values...)
}

func composeInt32(expr *ast.Expr) (funcs.Int32, error) {
	uniq, err := prep(expr, types.SINGLE_INT32)
	if err != nil {
		return nil, err
	}
	if expr.Terminal != nil {
		return funcs.NewInt32(expr.GetTerminal().GetInt32Value()), nil
	}
	values, err := newValues(expr.GetFunction().GetParams())
	if err != nil {
		return nil, err
	}
	return funcs.NewInt32Func(uniq, values...)
}

func composeInt32s(expr *ast.Expr) (funcs.Int32s, error) {
	uniq, err := prep(expr, types.LIST_INT32)
	if err != nil {
		return nil, err
	}
	if expr.List != nil {
		vs, err := newValues(expr.GetList().GetElems())
		if err != nil {
			return nil, err
		}
		bs := make([]funcs.Int32, len(vs))
		var ok bool
		for i := range vs {
			bs[i], ok = vs[i].(funcs.Int32)
			if !ok {
				return nil, &errExpected{types.SINGLE_INT32.String(), expr.String()}
			}
		}
		return funcs.NewListOfInt32(bs), nil
	}
	values, err := newValues(expr.GetFunction().GetParams())
	if err != nil {
		return nil, err
	}
	return funcs.NewInt32sFunc(uniq, values...)
}

func composeUint32(expr *ast.Expr) (funcs.Uint32, error) {
	uniq, err := prep(expr, types.SINGLE_UINT32)
	if err != nil {
		return nil, err
	}
	if expr.Terminal != nil {
		return funcs.NewUint32(expr.GetTerminal().GetUint32Value()), nil
	}
	values, err := newValues(expr.GetFunction().GetParams())
	if err != nil {
		return nil, err
	}
	return funcs.NewUint32Func(uniq, values...)
}

func composeUint32s(expr *ast.Expr) (funcs.Uint32s, error) {
	uniq, err := prep(expr, types.LIST_UINT32)
	if err != nil {
		return nil, err
	}
	if expr.List != nil {
		vs, err := newValues(expr.GetList().GetElems())
		if err != nil {
			return nil, err
		}
		bs := make([]funcs.Uint32, len(vs))
		var ok bool
		for i := range vs {
			bs[i], ok = vs[i].(funcs.Uint32)
			if !ok {
				return nil, &errExpected{types.SINGLE_UINT32.String(), expr.String()}
			}
		}
		return funcs.NewListOfUint32(bs), nil
	}
	values, err := newValues(expr.GetFunction().GetParams())
	if err != nil {
		return nil, err
	}
	return funcs.NewUint32sFunc(uniq, values...)
}

func composeBool(expr *ast.Expr) (funcs.Bool, error) {
	uniq, err := prep(expr, types.SINGLE_BOOL)
	if err != nil {
		return nil, err
	}
	if expr.Terminal != nil {
		return funcs.NewBool(expr.GetTerminal().GetBoolValue()), nil
	}
	values, err := newValues(expr.GetFunction().GetParams())
	if err != nil {
		return nil, err
	}
	return funcs.NewBoolFunc(uniq, values...)
}

func composeBools(expr *ast.Expr) (funcs.Bools, error) {
	uniq, err := prep(expr, types.LIST_BOOL)
	if err != nil {
		return nil, err
	}
	if expr.List != nil {
		vs, err := newValues(expr.GetList().GetElems())
		if err != nil {
			return nil, err
		}
		bs := make([]funcs.Bool, len(vs))
		var ok bool
		for i := range vs {
			bs[i], ok = vs[i].(funcs.Bool)
			if !ok {
				return nil, &errExpected{types.SINGLE_BOOL.String(), expr.String()}
			}
		}
		return funcs.NewListOfBool(bs), nil
	}
	values, err := newValues(expr.GetFunction().GetParams())
	if err != nil {
		return nil, err
	}
	return funcs.NewBoolsFunc(uniq, values...)
}

func composeString(expr *ast.Expr) (funcs.String, error) {
	uniq, err := prep(expr, types.SINGLE_STRING)
	if err != nil {
		return nil, err
	}
	if expr.Terminal != nil {
		return funcs.NewString(expr.GetTerminal().GetStringValue()), nil
	}
	values, err := newValues(expr.GetFunction().GetParams())
	if err != nil {
		return nil, err
	}
	return funcs.NewStringFunc(uniq, values...)
}

func composeStrings(expr *ast.Expr) (funcs.Strings, error) {
	uniq, err := prep(expr, types.LIST_STRING)
	if err != nil {
		return nil, err
	}
	if expr.List != nil {
		vs, err := newValues(expr.GetList().GetElems())
		if err != nil {
			return nil, err
		}
		bs := make([]funcs.String, len(vs))
		var ok bool
		for i := range vs {
			bs[i], ok = vs[i].(funcs.String)
			if !ok {
				return nil, &errExpected{types.SINGLE_STRING.String(), expr.String()}
			}
		}
		return funcs.NewListOfString(bs), nil
	}
	values, err := newValues(expr.GetFunction().GetParams())
	if err != nil {
		return nil, err
	}
	return funcs.NewStringsFunc(uniq, values...)
}

func composeBytes(expr *ast.Expr) (funcs.Bytes, error) {
	uniq, err := prep(expr, types.SINGLE_BYTES)
	if err != nil {
		return nil, err
	}
	if expr.Terminal != nil {
		return funcs.NewBytes(expr.GetTerminal().GetBytesValue()), nil
	}
	values, err := newValues(expr.GetFunction().GetParams())
	if err != nil {
		return nil, err
	}
	return funcs.NewBytesFunc(uniq, values...)
}

func composeListOfBytes(expr *ast.Expr) (funcs.ListOfBytes, error) {
	uniq, err := prep(expr, types.LIST_BYTES)
	if err != nil {
		return nil, err
	}
	if expr.List != nil {
		vs, err := newValues(expr.GetList().GetElems())
		if err != nil {
			return nil, err
		}
		bs := make([]funcs.Bytes, len(vs))
		var ok bool
		for i := range vs {
			bs[i], ok = vs[i].(funcs.Bytes)
			if !ok {
				return nil, &errExpected{types.SINGLE_BYTES.String(), expr.String()}
			}
		}
		return funcs.NewListOfBytes(bs), nil
	}
	values, err := newValues(expr.GetFunction().GetParams())
	if err != nil {
		return nil, err
	}
	return funcs.NewListOfBytesFunc(uniq, values...)
}
