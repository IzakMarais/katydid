//  Copyright 2013 Walter Schulze
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

syntax = "proto2";

package asm;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/katydid/katydid/expr/ast/expr.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.gostring_all) = true;

message Rules {
	repeated Rule Rules = 1;
	optional expr.Space Final = 2;
}

message Rule {
	optional Root Root = 1;
	optional Init Init = 2;
	optional Final Final = 3;
	optional Transition Transition = 4;
	optional FunctionDecl FunctionDecl = 5;
}

message Root {
	optional expr.Space Before = 1;
	optional expr.Keyword Eq = 2;
	optional expr.Space BeforeQualId = 3;
	optional string Package = 4 [(gogoproto.nullable) = false];
	optional string Message = 5 [(gogoproto.nullable) = false];
}

message Init {
	optional expr.Space Before = 1;
	optional expr.Keyword Eq = 2;
	optional expr.Space BeforeState = 3;
	optional string State = 4 [(gogoproto.nullable) = false];
}

message Final {
	optional expr.Space Before = 1;
	optional expr.Keyword Eq = 2;
	optional expr.Space BeforeState = 3;
	optional string State = 4 [(gogoproto.nullable) = false];
}

message Transition {
	optional expr.Space Before = 1;
	optional string Src = 2 [(gogoproto.nullable) = false];
	optional expr.Space BeforeInput = 3;
	optional string Input = 4 [(gogoproto.nullable) = false];
	optional expr.Keyword Eq = 5;
	optional Destination Dst = 6;
}

message Destination {
	optional expr.Keyword OpenParen = 1;
	optional expr.Space BeforeChild = 2;
	optional string Child = 3 [(gogoproto.nullable) = false];
	optional expr.Keyword CommaOne = 4;
	optional expr.Space BeforeSuccess = 5;
	optional string Success = 6 [(gogoproto.nullable) = false];
	optional expr.Keyword CommaTwo = 7;
	optional expr.Space BeforeFailure = 8;
	optional string Failure = 9 [(gogoproto.nullable) = false];
	optional expr.Keyword CloseParen = 10;
}

message FunctionDecl {
	optional expr.Space Before = 1;
	optional expr.Space BeforeName = 2;
	optional string Name = 3 [(gogoproto.nullable) = false];
	optional expr.Keyword Eq = 4;
	optional expr.Space BeforeFunc = 5;
	optional expr.Function Function = 6;
}


