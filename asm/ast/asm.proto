//  Copyright 2013 Walter Schulze
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

syntax = "proto2";

package ast;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/katydid/katydid/types/types.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.gostring_all) = true;

message Rules {
	repeated Rule Rules = 1;
	optional Space Final = 2;
}

message Rule {
	optional Root Root = 1;
	optional Init Init = 2;
	optional Transition Transition = 3;
	optional IfExpr IfExpr = 4;
}

message Root {
	optional Space Before = 1;
	optional Keyword Equal = 2;
	optional Space BeforeQualId = 3;
	optional string Package = 4 [(gogoproto.nullable) = false];
	optional string Message = 5 [(gogoproto.nullable) = false];
	optional string State = 6 [(gogoproto.nullable) = false];
}

message Init {
	optional Space Before = 1;
	optional string Package = 2 [(gogoproto.nullable) = false];
	optional string Message = 3 [(gogoproto.nullable) = false];
	optional Keyword Equal = 4;
	optional Space BeforeState = 5;
	optional string State = 6 [(gogoproto.nullable) = false];
}

message Transition {
	optional Space Before = 1;
	optional string Src = 2 [(gogoproto.nullable) = false];
	optional Space BeforeInput = 3;
	optional string Input = 4 [(gogoproto.nullable) = false];
	optional Keyword Equal = 5;
	optional Space BeforeDst = 6;
	optional string Dst = 7 [(gogoproto.nullable) = false];
}

message IfExpr {
	optional Space Before = 1;
	optional Expr Condition = 2;
	optional Keyword ThenWord = 3;
	optional StateExpr ThenClause = 4;
	optional Keyword ElseWord = 5;
	optional StateExpr ElseClause = 6;
}

message StateExpr {
	optional Space Before = 1;
	optional string State = 2;
	optional IfExpr IfExpr = 3;
	optional Keyword CloseCurly = 4;
}

message Expr {
	optional Keyword Comma = 1;
	optional Terminal Terminal = 2;
	optional List List = 3;
	optional Function Function = 4;
}

message List {
	optional Space Before = 1;
	optional types.Type Type = 2 [(gogoproto.nullable) = false];
	optional Keyword OpenCurly = 3;
	repeated Expr Elems = 4;
	optional Keyword CloseCurly = 5;
}

message Function {
	optional Space Before = 1;
	optional string Name = 2 [(gogoproto.nullable) = false];
	optional Keyword OpenParen = 3;
	repeated Expr Params = 4;
	optional Keyword CloseParen = 5;
}

message Terminal {
	optional Space Before = 1;
	optional string Literal = 2 [(gogoproto.nullable) = false];

	optional double DoubleValue = 3;
	optional float FloatValue = 4;
	optional int64 Int64Value = 5;
	optional uint64 Uint64Value = 6;
	optional int32 Int32Value = 7;

	optional bool BoolValue = 8;
	optional string StringValue = 9;

	optional bytes BytesValue = 10;
	optional uint32 Uint32Value = 11;

	optional Variable Variable = 50;
}

message Variable {
	optional string Name  = 1 [(gogoproto.nullable) = false];
	optional types.Type Type = 2 [(gogoproto.nullable) = false];
}

message Keyword {
	optional Space Before = 1;
	optional string Value = 2 [(gogoproto.nullable) = false];
}

message Space {
	repeated string Space = 1;
}

