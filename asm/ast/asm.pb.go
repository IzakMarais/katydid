// Code generated by protoc-gen-gogo.
// source: asm.proto
// DO NOT EDIT!

/*
Package ast is a generated protocol buffer package.

It is generated from these files:
	asm.proto

It has these top-level messages:
	Rules
	Rule
	Root
	Init
	Final
	Transition
	Destination
	FunctionDecl
	Expr
	List
	Function
	Terminal
	Variable
	Keyword
	Space
*/
package ast

import proto "github.com/gogo/protobuf/proto"
import math "math"

// discarding unused import gogoproto "github.com/gogo/protobuf/gogoproto/gogo.pb"
import types "github.com/katydid/katydid/types"

import fmt "fmt"
import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type Rules struct {
	Rules            []*Rule `protobuf:"bytes,1,rep" json:"Rules,omitempty"`
	Final            *Space  `protobuf:"bytes,2,opt" json:"Final,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Rules) Reset()      { *m = Rules{} }
func (*Rules) ProtoMessage() {}

func (m *Rules) GetRules() []*Rule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *Rules) GetFinal() *Space {
	if m != nil {
		return m.Final
	}
	return nil
}

type Rule struct {
	Root             *Root         `protobuf:"bytes,1,opt" json:"Root,omitempty"`
	Init             *Init         `protobuf:"bytes,2,opt" json:"Init,omitempty"`
	Final            *Final        `protobuf:"bytes,3,opt" json:"Final,omitempty"`
	Transition       *Transition   `protobuf:"bytes,4,opt" json:"Transition,omitempty"`
	FunctionDecl     *FunctionDecl `protobuf:"bytes,5,opt" json:"FunctionDecl,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *Rule) Reset()      { *m = Rule{} }
func (*Rule) ProtoMessage() {}

func (m *Rule) GetRoot() *Root {
	if m != nil {
		return m.Root
	}
	return nil
}

func (m *Rule) GetInit() *Init {
	if m != nil {
		return m.Init
	}
	return nil
}

func (m *Rule) GetFinal() *Final {
	if m != nil {
		return m.Final
	}
	return nil
}

func (m *Rule) GetTransition() *Transition {
	if m != nil {
		return m.Transition
	}
	return nil
}

func (m *Rule) GetFunctionDecl() *FunctionDecl {
	if m != nil {
		return m.FunctionDecl
	}
	return nil
}

type Root struct {
	Before           *Space   `protobuf:"bytes,1,opt" json:"Before,omitempty"`
	Equal            *Keyword `protobuf:"bytes,2,opt" json:"Equal,omitempty"`
	BeforeQualId     *Space   `protobuf:"bytes,3,opt" json:"BeforeQualId,omitempty"`
	Package          string   `protobuf:"bytes,4,opt" json:"Package"`
	Message          string   `protobuf:"bytes,5,opt" json:"Message"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Root) Reset()      { *m = Root{} }
func (*Root) ProtoMessage() {}

func (m *Root) GetBefore() *Space {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *Root) GetEqual() *Keyword {
	if m != nil {
		return m.Equal
	}
	return nil
}

func (m *Root) GetBeforeQualId() *Space {
	if m != nil {
		return m.BeforeQualId
	}
	return nil
}

func (m *Root) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

func (m *Root) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Init struct {
	Before           *Space   `protobuf:"bytes,1,opt" json:"Before,omitempty"`
	Equal            *Keyword `protobuf:"bytes,2,opt" json:"Equal,omitempty"`
	BeforeState      *Space   `protobuf:"bytes,3,opt" json:"BeforeState,omitempty"`
	State            string   `protobuf:"bytes,4,opt" json:"State"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Init) Reset()      { *m = Init{} }
func (*Init) ProtoMessage() {}

func (m *Init) GetBefore() *Space {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *Init) GetEqual() *Keyword {
	if m != nil {
		return m.Equal
	}
	return nil
}

func (m *Init) GetBeforeState() *Space {
	if m != nil {
		return m.BeforeState
	}
	return nil
}

func (m *Init) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type Final struct {
	Before           *Space   `protobuf:"bytes,1,opt" json:"Before,omitempty"`
	Equal            *Keyword `protobuf:"bytes,2,opt" json:"Equal,omitempty"`
	BeforeState      *Space   `protobuf:"bytes,3,opt" json:"BeforeState,omitempty"`
	State            string   `protobuf:"bytes,4,opt" json:"State"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Final) Reset()      { *m = Final{} }
func (*Final) ProtoMessage() {}

func (m *Final) GetBefore() *Space {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *Final) GetEqual() *Keyword {
	if m != nil {
		return m.Equal
	}
	return nil
}

func (m *Final) GetBeforeState() *Space {
	if m != nil {
		return m.BeforeState
	}
	return nil
}

func (m *Final) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type Transition struct {
	Before           *Space       `protobuf:"bytes,1,opt" json:"Before,omitempty"`
	Src              string       `protobuf:"bytes,2,opt" json:"Src"`
	BeforeInput      *Space       `protobuf:"bytes,3,opt" json:"BeforeInput,omitempty"`
	Input            string       `protobuf:"bytes,4,opt" json:"Input"`
	Equal            *Keyword     `protobuf:"bytes,5,opt" json:"Equal,omitempty"`
	Dst              *Destination `protobuf:"bytes,6,opt" json:"Dst,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Transition) Reset()      { *m = Transition{} }
func (*Transition) ProtoMessage() {}

func (m *Transition) GetBefore() *Space {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *Transition) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *Transition) GetBeforeInput() *Space {
	if m != nil {
		return m.BeforeInput
	}
	return nil
}

func (m *Transition) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *Transition) GetEqual() *Keyword {
	if m != nil {
		return m.Equal
	}
	return nil
}

func (m *Transition) GetDst() *Destination {
	if m != nil {
		return m.Dst
	}
	return nil
}

type Destination struct {
	OpenParen        *Keyword `protobuf:"bytes,1,opt" json:"OpenParen,omitempty"`
	BeforeChild      *Space   `protobuf:"bytes,2,opt" json:"BeforeChild,omitempty"`
	Child            string   `protobuf:"bytes,3,opt" json:"Child"`
	CommaOne         *Keyword `protobuf:"bytes,4,opt" json:"CommaOne,omitempty"`
	BeforeSuccess    *Space   `protobuf:"bytes,5,opt" json:"BeforeSuccess,omitempty"`
	Success          string   `protobuf:"bytes,6,opt" json:"Success"`
	CommaTwo         *Keyword `protobuf:"bytes,7,opt" json:"CommaTwo,omitempty"`
	BeforeFailure    *Space   `protobuf:"bytes,8,opt" json:"BeforeFailure,omitempty"`
	Failure          string   `protobuf:"bytes,9,opt" json:"Failure"`
	CloseParen       *Keyword `protobuf:"bytes,10,opt" json:"CloseParen,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Destination) Reset()      { *m = Destination{} }
func (*Destination) ProtoMessage() {}

func (m *Destination) GetOpenParen() *Keyword {
	if m != nil {
		return m.OpenParen
	}
	return nil
}

func (m *Destination) GetBeforeChild() *Space {
	if m != nil {
		return m.BeforeChild
	}
	return nil
}

func (m *Destination) GetChild() string {
	if m != nil {
		return m.Child
	}
	return ""
}

func (m *Destination) GetCommaOne() *Keyword {
	if m != nil {
		return m.CommaOne
	}
	return nil
}

func (m *Destination) GetBeforeSuccess() *Space {
	if m != nil {
		return m.BeforeSuccess
	}
	return nil
}

func (m *Destination) GetSuccess() string {
	if m != nil {
		return m.Success
	}
	return ""
}

func (m *Destination) GetCommaTwo() *Keyword {
	if m != nil {
		return m.CommaTwo
	}
	return nil
}

func (m *Destination) GetBeforeFailure() *Space {
	if m != nil {
		return m.BeforeFailure
	}
	return nil
}

func (m *Destination) GetFailure() string {
	if m != nil {
		return m.Failure
	}
	return ""
}

func (m *Destination) GetCloseParen() *Keyword {
	if m != nil {
		return m.CloseParen
	}
	return nil
}

type FunctionDecl struct {
	Before           *Space    `protobuf:"bytes,1,opt" json:"Before,omitempty"`
	BeforeName       *Space    `protobuf:"bytes,2,opt" json:"BeforeName,omitempty"`
	Name             string    `protobuf:"bytes,3,opt" json:"Name"`
	Equal            *Keyword  `protobuf:"bytes,4,opt" json:"Equal,omitempty"`
	BeforeFunc       *Space    `protobuf:"bytes,5,opt" json:"BeforeFunc,omitempty"`
	Function         *Function `protobuf:"bytes,6,opt" json:"Function,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *FunctionDecl) Reset()      { *m = FunctionDecl{} }
func (*FunctionDecl) ProtoMessage() {}

func (m *FunctionDecl) GetBefore() *Space {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *FunctionDecl) GetBeforeName() *Space {
	if m != nil {
		return m.BeforeName
	}
	return nil
}

func (m *FunctionDecl) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FunctionDecl) GetEqual() *Keyword {
	if m != nil {
		return m.Equal
	}
	return nil
}

func (m *FunctionDecl) GetBeforeFunc() *Space {
	if m != nil {
		return m.BeforeFunc
	}
	return nil
}

func (m *FunctionDecl) GetFunction() *Function {
	if m != nil {
		return m.Function
	}
	return nil
}

type Expr struct {
	Comma            *Keyword  `protobuf:"bytes,1,opt" json:"Comma,omitempty"`
	Terminal         *Terminal `protobuf:"bytes,2,opt" json:"Terminal,omitempty"`
	List             *List     `protobuf:"bytes,3,opt" json:"List,omitempty"`
	Function         *Function `protobuf:"bytes,4,opt" json:"Function,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Expr) Reset()      { *m = Expr{} }
func (*Expr) ProtoMessage() {}

func (m *Expr) GetComma() *Keyword {
	if m != nil {
		return m.Comma
	}
	return nil
}

func (m *Expr) GetTerminal() *Terminal {
	if m != nil {
		return m.Terminal
	}
	return nil
}

func (m *Expr) GetList() *List {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *Expr) GetFunction() *Function {
	if m != nil {
		return m.Function
	}
	return nil
}

type List struct {
	Before           *Space     `protobuf:"bytes,1,opt" json:"Before,omitempty"`
	Type             types.Type `protobuf:"varint,2,opt,enum=types.Type" json:"Type"`
	OpenCurly        *Keyword   `protobuf:"bytes,3,opt" json:"OpenCurly,omitempty"`
	Elems            []*Expr    `protobuf:"bytes,4,rep" json:"Elems,omitempty"`
	CloseCurly       *Keyword   `protobuf:"bytes,5,opt" json:"CloseCurly,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *List) Reset()      { *m = List{} }
func (*List) ProtoMessage() {}

func (m *List) GetBefore() *Space {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *List) GetType() types.Type {
	if m != nil {
		return m.Type
	}
	return types.UNKNOWN
}

func (m *List) GetOpenCurly() *Keyword {
	if m != nil {
		return m.OpenCurly
	}
	return nil
}

func (m *List) GetElems() []*Expr {
	if m != nil {
		return m.Elems
	}
	return nil
}

func (m *List) GetCloseCurly() *Keyword {
	if m != nil {
		return m.CloseCurly
	}
	return nil
}

type Function struct {
	Before           *Space   `protobuf:"bytes,1,opt" json:"Before,omitempty"`
	Name             string   `protobuf:"bytes,2,opt" json:"Name"`
	OpenParen        *Keyword `protobuf:"bytes,3,opt" json:"OpenParen,omitempty"`
	Params           []*Expr  `protobuf:"bytes,4,rep" json:"Params,omitempty"`
	CloseParen       *Keyword `protobuf:"bytes,5,opt" json:"CloseParen,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Function) Reset()      { *m = Function{} }
func (*Function) ProtoMessage() {}

func (m *Function) GetBefore() *Space {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *Function) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Function) GetOpenParen() *Keyword {
	if m != nil {
		return m.OpenParen
	}
	return nil
}

func (m *Function) GetParams() []*Expr {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *Function) GetCloseParen() *Keyword {
	if m != nil {
		return m.CloseParen
	}
	return nil
}

type Terminal struct {
	Before           *Space    `protobuf:"bytes,1,opt" json:"Before,omitempty"`
	Literal          string    `protobuf:"bytes,2,opt" json:"Literal"`
	DoubleValue      *float64  `protobuf:"fixed64,3,opt" json:"DoubleValue,omitempty"`
	FloatValue       *float32  `protobuf:"fixed32,4,opt" json:"FloatValue,omitempty"`
	Int64Value       *int64    `protobuf:"varint,5,opt" json:"Int64Value,omitempty"`
	Uint64Value      *uint64   `protobuf:"varint,6,opt" json:"Uint64Value,omitempty"`
	Int32Value       *int32    `protobuf:"varint,7,opt" json:"Int32Value,omitempty"`
	BoolValue        *bool     `protobuf:"varint,8,opt" json:"BoolValue,omitempty"`
	StringValue      *string   `protobuf:"bytes,9,opt" json:"StringValue,omitempty"`
	BytesValue       []byte    `protobuf:"bytes,10,opt" json:"BytesValue,omitempty"`
	Uint32Value      *uint32   `protobuf:"varint,11,opt" json:"Uint32Value,omitempty"`
	Variable         *Variable `protobuf:"bytes,50,opt" json:"Variable,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Terminal) Reset()      { *m = Terminal{} }
func (*Terminal) ProtoMessage() {}

func (m *Terminal) GetBefore() *Space {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *Terminal) GetLiteral() string {
	if m != nil {
		return m.Literal
	}
	return ""
}

func (m *Terminal) GetDoubleValue() float64 {
	if m != nil && m.DoubleValue != nil {
		return *m.DoubleValue
	}
	return 0
}

func (m *Terminal) GetFloatValue() float32 {
	if m != nil && m.FloatValue != nil {
		return *m.FloatValue
	}
	return 0
}

func (m *Terminal) GetInt64Value() int64 {
	if m != nil && m.Int64Value != nil {
		return *m.Int64Value
	}
	return 0
}

func (m *Terminal) GetUint64Value() uint64 {
	if m != nil && m.Uint64Value != nil {
		return *m.Uint64Value
	}
	return 0
}

func (m *Terminal) GetInt32Value() int32 {
	if m != nil && m.Int32Value != nil {
		return *m.Int32Value
	}
	return 0
}

func (m *Terminal) GetBoolValue() bool {
	if m != nil && m.BoolValue != nil {
		return *m.BoolValue
	}
	return false
}

func (m *Terminal) GetStringValue() string {
	if m != nil && m.StringValue != nil {
		return *m.StringValue
	}
	return ""
}

func (m *Terminal) GetBytesValue() []byte {
	if m != nil {
		return m.BytesValue
	}
	return nil
}

func (m *Terminal) GetUint32Value() uint32 {
	if m != nil && m.Uint32Value != nil {
		return *m.Uint32Value
	}
	return 0
}

func (m *Terminal) GetVariable() *Variable {
	if m != nil {
		return m.Variable
	}
	return nil
}

type Variable struct {
	Type             types.Type `protobuf:"varint,2,opt,enum=types.Type" json:"Type"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Variable) Reset()      { *m = Variable{} }
func (*Variable) ProtoMessage() {}

func (m *Variable) GetType() types.Type {
	if m != nil {
		return m.Type
	}
	return types.UNKNOWN
}

type Keyword struct {
	Before           *Space `protobuf:"bytes,1,opt" json:"Before,omitempty"`
	Value            string `protobuf:"bytes,2,opt" json:"Value"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Keyword) Reset()      { *m = Keyword{} }
func (*Keyword) ProtoMessage() {}

func (m *Keyword) GetBefore() *Space {
	if m != nil {
		return m.Before
	}
	return nil
}

func (m *Keyword) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Space struct {
	Space            []string `protobuf:"bytes,1,rep" json:"Space,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Space) Reset()      { *m = Space{} }
func (*Space) ProtoMessage() {}

func (m *Space) GetSpace() []string {
	if m != nil {
		return m.Space
	}
	return nil
}

func init() {
}
func (this *Rules) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ast.Rules{` +
		`Rules:` + fmt.Sprintf("%#v", this.Rules),
		`Final:` + fmt.Sprintf("%#v", this.Final),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Rule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ast.Rule{` +
		`Root:` + fmt.Sprintf("%#v", this.Root),
		`Init:` + fmt.Sprintf("%#v", this.Init),
		`Final:` + fmt.Sprintf("%#v", this.Final),
		`Transition:` + fmt.Sprintf("%#v", this.Transition),
		`FunctionDecl:` + fmt.Sprintf("%#v", this.FunctionDecl),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Root) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ast.Root{` +
		`Before:` + fmt.Sprintf("%#v", this.Before),
		`Equal:` + fmt.Sprintf("%#v", this.Equal),
		`BeforeQualId:` + fmt.Sprintf("%#v", this.BeforeQualId),
		`Package:` + fmt.Sprintf("%#v", this.Package),
		`Message:` + fmt.Sprintf("%#v", this.Message),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Init) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ast.Init{` +
		`Before:` + fmt.Sprintf("%#v", this.Before),
		`Equal:` + fmt.Sprintf("%#v", this.Equal),
		`BeforeState:` + fmt.Sprintf("%#v", this.BeforeState),
		`State:` + fmt.Sprintf("%#v", this.State),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Final) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ast.Final{` +
		`Before:` + fmt.Sprintf("%#v", this.Before),
		`Equal:` + fmt.Sprintf("%#v", this.Equal),
		`BeforeState:` + fmt.Sprintf("%#v", this.BeforeState),
		`State:` + fmt.Sprintf("%#v", this.State),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Transition) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ast.Transition{` +
		`Before:` + fmt.Sprintf("%#v", this.Before),
		`Src:` + fmt.Sprintf("%#v", this.Src),
		`BeforeInput:` + fmt.Sprintf("%#v", this.BeforeInput),
		`Input:` + fmt.Sprintf("%#v", this.Input),
		`Equal:` + fmt.Sprintf("%#v", this.Equal),
		`Dst:` + fmt.Sprintf("%#v", this.Dst),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Destination) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ast.Destination{` +
		`OpenParen:` + fmt.Sprintf("%#v", this.OpenParen),
		`BeforeChild:` + fmt.Sprintf("%#v", this.BeforeChild),
		`Child:` + fmt.Sprintf("%#v", this.Child),
		`CommaOne:` + fmt.Sprintf("%#v", this.CommaOne),
		`BeforeSuccess:` + fmt.Sprintf("%#v", this.BeforeSuccess),
		`Success:` + fmt.Sprintf("%#v", this.Success),
		`CommaTwo:` + fmt.Sprintf("%#v", this.CommaTwo),
		`BeforeFailure:` + fmt.Sprintf("%#v", this.BeforeFailure),
		`Failure:` + fmt.Sprintf("%#v", this.Failure),
		`CloseParen:` + fmt.Sprintf("%#v", this.CloseParen),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *FunctionDecl) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ast.FunctionDecl{` +
		`Before:` + fmt.Sprintf("%#v", this.Before),
		`BeforeName:` + fmt.Sprintf("%#v", this.BeforeName),
		`Name:` + fmt.Sprintf("%#v", this.Name),
		`Equal:` + fmt.Sprintf("%#v", this.Equal),
		`BeforeFunc:` + fmt.Sprintf("%#v", this.BeforeFunc),
		`Function:` + fmt.Sprintf("%#v", this.Function),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Expr) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ast.Expr{` +
		`Comma:` + fmt.Sprintf("%#v", this.Comma),
		`Terminal:` + fmt.Sprintf("%#v", this.Terminal),
		`List:` + fmt.Sprintf("%#v", this.List),
		`Function:` + fmt.Sprintf("%#v", this.Function),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *List) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ast.List{` +
		`Before:` + fmt.Sprintf("%#v", this.Before),
		`Type:` + fmt.Sprintf("%#v", this.Type),
		`OpenCurly:` + fmt.Sprintf("%#v", this.OpenCurly),
		`Elems:` + fmt.Sprintf("%#v", this.Elems),
		`CloseCurly:` + fmt.Sprintf("%#v", this.CloseCurly),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Function) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ast.Function{` +
		`Before:` + fmt.Sprintf("%#v", this.Before),
		`Name:` + fmt.Sprintf("%#v", this.Name),
		`OpenParen:` + fmt.Sprintf("%#v", this.OpenParen),
		`Params:` + fmt.Sprintf("%#v", this.Params),
		`CloseParen:` + fmt.Sprintf("%#v", this.CloseParen),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Terminal) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ast.Terminal{` +
		`Before:` + fmt.Sprintf("%#v", this.Before),
		`Literal:` + fmt.Sprintf("%#v", this.Literal),
		`DoubleValue:` + valueToGoStringAsm(this.DoubleValue, "float64"),
		`FloatValue:` + valueToGoStringAsm(this.FloatValue, "float32"),
		`Int64Value:` + valueToGoStringAsm(this.Int64Value, "int64"),
		`Uint64Value:` + valueToGoStringAsm(this.Uint64Value, "uint64"),
		`Int32Value:` + valueToGoStringAsm(this.Int32Value, "int32"),
		`BoolValue:` + valueToGoStringAsm(this.BoolValue, "bool"),
		`StringValue:` + valueToGoStringAsm(this.StringValue, "string"),
		`BytesValue:` + valueToGoStringAsm(this.BytesValue, "byte"),
		`Uint32Value:` + valueToGoStringAsm(this.Uint32Value, "uint32"),
		`Variable:` + fmt.Sprintf("%#v", this.Variable),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Variable) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ast.Variable{` +
		`Type:` + fmt.Sprintf("%#v", this.Type),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Keyword) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ast.Keyword{` +
		`Before:` + fmt.Sprintf("%#v", this.Before),
		`Value:` + fmt.Sprintf("%#v", this.Value),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func (this *Space) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ast.Space{` +
		`Space:` + fmt.Sprintf("%#v", this.Space),
		`XXX_unrecognized:` + fmt.Sprintf("%#v", this.XXX_unrecognized) + `}`}, ", ")
	return s
}
func valueToGoStringAsm(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringAsm(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}
