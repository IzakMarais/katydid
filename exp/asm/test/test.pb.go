// Code generated by protoc-gen-gogo.
// source: test.proto
// DO NOT EDIT!

package test

import proto "code.google.com/p/gogoprotobuf/proto"
import json "encoding/json"
import math "math"

// discarding unused import gogoproto "code.google.com/p/gogoprotobuf/gogoproto/gogo.pb"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type Person struct {
	Name             *string    `protobuf:"bytes,1,opt" json:"Name,omitempty"`
	Addresses        []*Address `protobuf:"bytes,2,rep" json:"Addresses,omitempty"`
	Telephone        *string    `protobuf:"bytes,3,opt" json:"Telephone,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *Person) Reset()         { *m = Person{} }
func (m *Person) String() string { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()    {}

func (m *Person) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Person) GetAddresses() []*Address {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Person) GetTelephone() string {
	if m != nil && m.Telephone != nil {
		return *m.Telephone
	}
	return ""
}

type Address struct {
	Number           *int64  `protobuf:"varint,1,opt" json:"Number,omitempty"`
	Street           *string `protobuf:"bytes,2,opt" json:"Street,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}

func (m *Address) GetNumber() int64 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

func (m *Address) GetStreet() string {
	if m != nil && m.Street != nil {
		return *m.Street
	}
	return ""
}

type SrcTree struct {
	PackageName      *string    `protobuf:"bytes,1,opt" json:"PackageName,omitempty"`
	Imports          []*SrcTree `protobuf:"bytes,2,rep" json:"Imports,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *SrcTree) Reset()         { *m = SrcTree{} }
func (m *SrcTree) String() string { return proto.CompactTextString(m) }
func (*SrcTree) ProtoMessage()    {}

func (m *SrcTree) GetPackageName() string {
	if m != nil && m.PackageName != nil {
		return *m.PackageName
	}
	return ""
}

func (m *SrcTree) GetImports() []*SrcTree {
	if m != nil {
		return m.Imports
	}
	return nil
}

func init() {
}
func NewPopulatedPerson(r randyTest, easy bool) *Person {
	this := &Person{}
	if r.Intn(10) != 0 {
		v1 := randStringTest(r)
		this.Name = &v1
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(10)
		this.Addresses = make([]*Address, v2)
		for i := 0; i < v2; i++ {
			this.Addresses[i] = NewPopulatedAddress(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v3 := randStringTest(r)
		this.Telephone = &v3
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTest(r, 4)
	}
	return this
}

func NewPopulatedAddress(r randyTest, easy bool) *Address {
	this := &Address{}
	if r.Intn(10) != 0 {
		v4 := r.Int63()
		this.Number = &v4
	}
	if r.Intn(10) != 0 {
		v5 := randStringTest(r)
		this.Street = &v5
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTest(r, 3)
	}
	return this
}

func NewPopulatedSrcTree(r randyTest, easy bool) *SrcTree {
	this := &SrcTree{}
	if r.Intn(10) != 0 {
		v6 := randStringTest(r)
		this.PackageName = &v6
	}
	if r.Intn(10) != 0 {
		v7 := r.Intn(10)
		this.Imports = make([]*SrcTree, v7)
		for i := 0; i < v7; i++ {
			this.Imports[i] = NewPopulatedSrcTree(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTest(r, 3)
	}
	return this
}

type randyTest interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTest(r randyTest) rune {
	res := rune(r.Uint32() % 1112064)
	if 55296 <= res {
		res += 2047
	}
	return res
}
func randStringTest(r randyTest) string {
	v8 := r.Intn(100)
	tmps := make([]rune, v8)
	for i := 0; i < v8; i++ {
		tmps[i] = randUTF8RuneTest(r)
	}
	return string(tmps)
}
func randUnrecognizedTest(r randyTest, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldTest(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldTest(data []byte, r randyTest, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateTest(data, uint64(key))
		data = encodeVarintPopulateTest(data, uint64(r.Int63()))
	case 1:
		data = encodeVarintPopulateTest(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateTest(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateTest(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateTest(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateTest(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
