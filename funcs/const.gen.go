// Code generated by funcs-gen.
// DO NOT EDIT!

package funcs

import (
	"fmt"
	"reflect"
	"strings"
)

type ConstFloat64 interface {
	Float64
}

var typConstFloat64 reflect.Type = reflect.TypeOf((*ConstFloat64)(nil)).Elem()

type constFloat64 struct {
	v float64
}

func NewConstFloat64(v float64) ConstFloat64 {
	return &constFloat64{v}
}

func (this *constFloat64) IsConst() {}

func (this *constFloat64) Eval() float64 {
	return this.v
}

func (this *constFloat64) String() string {
	return fmt.Sprintf("double(%f)", this.v)
}

type ConstInt64 interface {
	Int64
}

var typConstInt64 reflect.Type = reflect.TypeOf((*ConstInt64)(nil)).Elem()

type constInt64 struct {
	v int64
}

func NewConstInt64(v int64) ConstInt64 {
	return &constInt64{v}
}

func (this *constInt64) IsConst() {}

func (this *constInt64) Eval() int64 {
	return this.v
}

func (this *constInt64) String() string {
	return fmt.Sprintf("int64(%d)", this.v)
}

type ConstUint64 interface {
	Uint64
}

var typConstUint64 reflect.Type = reflect.TypeOf((*ConstUint64)(nil)).Elem()

type constUint64 struct {
	v uint64
}

func NewConstUint64(v uint64) ConstUint64 {
	return &constUint64{v}
}

func (this *constUint64) IsConst() {}

func (this *constUint64) Eval() uint64 {
	return this.v
}

func (this *constUint64) String() string {
	return fmt.Sprintf("uint64(%d)", this.v)
}

type ConstBool interface {
	Bool
}

var typConstBool reflect.Type = reflect.TypeOf((*ConstBool)(nil)).Elem()

type constBool struct {
	v bool
}

func NewConstBool(v bool) ConstBool {
	return &constBool{v}
}

func (this *constBool) IsConst() {}

func (this *constBool) Eval() bool {
	return this.v
}

func (this *constBool) String() string {
	return fmt.Sprintf("%v", this.v)
}

type ConstString interface {
	String
}

var typConstString reflect.Type = reflect.TypeOf((*ConstString)(nil)).Elem()

type constString struct {
	v string
}

func NewConstString(v string) ConstString {
	return &constString{v}
}

func (this *constString) IsConst() {}

func (this *constString) Eval() string {
	return this.v
}

func (this *constString) String() string {
	return fmt.Sprintf("`%s`", this.v)
}

type ConstBytes interface {
	Bytes
}

var typConstBytes reflect.Type = reflect.TypeOf((*ConstBytes)(nil)).Elem()

type constBytes struct {
	v []byte
}

func NewConstBytes(v []byte) ConstBytes {
	return &constBytes{v}
}

func (this *constBytes) IsConst() {}

func (this *constBytes) Eval() []byte {
	return this.v
}

func (this *constBytes) String() string {
	return fmt.Sprintf("%#v", this.v)
}

type ConstFloat64s interface {
	Float64s
}

var typConstFloat64s reflect.Type = reflect.TypeOf((*ConstFloat64s)(nil)).Elem()

type constFloat64s struct {
	v []float64
}

func NewConstFloat64s(v []float64) ConstFloat64s {
	return &constFloat64s{v}
}

func (this *constFloat64s) IsConst() {}

func (this *constFloat64s) Eval() []float64 {
	return this.v
}

func (this *constFloat64s) String() string {
	ss := make([]string, len(this.v))
	for i := range this.v {
		ss[i] = fmt.Sprintf("double(%f)", this.v[i])
	}
	return "[]double{" + strings.Join(ss, ",") + "}"
}

type ConstInt64s interface {
	Int64s
}

var typConstInt64s reflect.Type = reflect.TypeOf((*ConstInt64s)(nil)).Elem()

type constInt64s struct {
	v []int64
}

func NewConstInt64s(v []int64) ConstInt64s {
	return &constInt64s{v}
}

func (this *constInt64s) IsConst() {}

func (this *constInt64s) Eval() []int64 {
	return this.v
}

func (this *constInt64s) String() string {
	ss := make([]string, len(this.v))
	for i := range this.v {
		ss[i] = fmt.Sprintf("int64(%d)", this.v[i])
	}
	return "[]int64{" + strings.Join(ss, ",") + "}"
}

type ConstUint64s interface {
	Uint64s
}

var typConstUint64s reflect.Type = reflect.TypeOf((*ConstUint64s)(nil)).Elem()

type constUint64s struct {
	v []uint64
}

func NewConstUint64s(v []uint64) ConstUint64s {
	return &constUint64s{v}
}

func (this *constUint64s) IsConst() {}

func (this *constUint64s) Eval() []uint64 {
	return this.v
}

func (this *constUint64s) String() string {
	ss := make([]string, len(this.v))
	for i := range this.v {
		ss[i] = fmt.Sprintf("uint64(%d)", this.v[i])
	}
	return "[]uint64{" + strings.Join(ss, ",") + "}"
}

type ConstBools interface {
	Bools
}

var typConstBools reflect.Type = reflect.TypeOf((*ConstBools)(nil)).Elem()

type constBools struct {
	v []bool
}

func NewConstBools(v []bool) ConstBools {
	return &constBools{v}
}

func (this *constBools) IsConst() {}

func (this *constBools) Eval() []bool {
	return this.v
}

func (this *constBools) String() string {
	ss := make([]string, len(this.v))
	for i := range this.v {
		ss[i] = fmt.Sprintf("%v", this.v[i])
	}
	return "[]bool{" + strings.Join(ss, ",") + "}"
}

type ConstStrings interface {
	Strings
}

var typConstStrings reflect.Type = reflect.TypeOf((*ConstStrings)(nil)).Elem()

type constStrings struct {
	v []string
}

func NewConstStrings(v []string) ConstStrings {
	return &constStrings{v}
}

func (this *constStrings) IsConst() {}

func (this *constStrings) Eval() []string {
	return this.v
}

func (this *constStrings) String() string {
	ss := make([]string, len(this.v))
	for i := range this.v {
		ss[i] = fmt.Sprintf("`%s`", this.v[i])
	}
	return "[]string{" + strings.Join(ss, ",") + "}"
}

type ConstListOfBytes interface {
	ListOfBytes
}

var typConstListOfBytes reflect.Type = reflect.TypeOf((*ConstListOfBytes)(nil)).Elem()

type constListOfBytes struct {
	v [][]byte
}

func NewConstListOfBytes(v [][]byte) ConstListOfBytes {
	return &constListOfBytes{v}
}

func (this *constListOfBytes) IsConst() {}

func (this *constListOfBytes) Eval() [][]byte {
	return this.v
}

func (this *constListOfBytes) String() string {
	ss := make([]string, len(this.v))
	for i := range this.v {
		ss[i] = fmt.Sprintf("%#v", this.v[i])
	}
	return "[][]byte{" + strings.Join(ss, ",") + "}"
}
