// Code generated by funcs-gen.
// DO NOT EDIT!

package funcs

import (
	"fmt"
)

type printFloat64 struct {
	E Float64
}

func (this *printFloat64) Eval() float64 {
	v := this.E.Eval()
	fmt.Printf("%#v\n", v)
	return v
}

func (this *printFloat64) IsVariable() {}

func init() {
	Register("print", new(printFloat64))
}

func PrintFloat64(e Float64) Float64 {
	return &printFloat64{E: e}
}

type printInt64 struct {
	E Int64
}

func (this *printInt64) Eval() int64 {
	v := this.E.Eval()
	fmt.Printf("%#v\n", v)
	return v
}

func (this *printInt64) IsVariable() {}

func init() {
	Register("print", new(printInt64))
}

func PrintInt64(e Int64) Int64 {
	return &printInt64{E: e}
}

type printUint64 struct {
	E Uint64
}

func (this *printUint64) Eval() uint64 {
	v := this.E.Eval()
	fmt.Printf("%#v\n", v)
	return v
}

func (this *printUint64) IsVariable() {}

func init() {
	Register("print", new(printUint64))
}

func PrintUint64(e Uint64) Uint64 {
	return &printUint64{E: e}
}

type printBool struct {
	E Bool
}

func (this *printBool) Eval() bool {
	v := this.E.Eval()
	fmt.Printf("%#v\n", v)
	return v
}

func (this *printBool) IsVariable() {}

func init() {
	Register("print", new(printBool))
}

func PrintBool(e Bool) Bool {
	return &printBool{E: e}
}

type printString struct {
	E String
}

func (this *printString) Eval() string {
	v := this.E.Eval()
	fmt.Printf("%#v\n", v)
	return v
}

func (this *printString) IsVariable() {}

func init() {
	Register("print", new(printString))
}

func PrintString(e String) String {
	return &printString{E: e}
}

type printBytes struct {
	E Bytes
}

func (this *printBytes) Eval() []byte {
	v := this.E.Eval()
	fmt.Printf("%#v\n", v)
	return v
}

func (this *printBytes) IsVariable() {}

func init() {
	Register("print", new(printBytes))
}

func PrintBytes(e Bytes) Bytes {
	return &printBytes{E: e}
}

type printFloat64s struct {
	E Float64s
}

func (this *printFloat64s) Eval() []float64 {
	v := this.E.Eval()
	fmt.Printf("%#v\n", v)
	return v
}

func (this *printFloat64s) IsVariable() {}

func init() {
	Register("print", new(printFloat64s))
}

func PrintFloat64s(e Float64s) Float64s {
	return &printFloat64s{E: e}
}

type printInt64s struct {
	E Int64s
}

func (this *printInt64s) Eval() []int64 {
	v := this.E.Eval()
	fmt.Printf("%#v\n", v)
	return v
}

func (this *printInt64s) IsVariable() {}

func init() {
	Register("print", new(printInt64s))
}

func PrintInt64s(e Int64s) Int64s {
	return &printInt64s{E: e}
}

type printUint64s struct {
	E Uint64s
}

func (this *printUint64s) Eval() []uint64 {
	v := this.E.Eval()
	fmt.Printf("%#v\n", v)
	return v
}

func (this *printUint64s) IsVariable() {}

func init() {
	Register("print", new(printUint64s))
}

func PrintUint64s(e Uint64s) Uint64s {
	return &printUint64s{E: e}
}

type printBools struct {
	E Bools
}

func (this *printBools) Eval() []bool {
	v := this.E.Eval()
	fmt.Printf("%#v\n", v)
	return v
}

func (this *printBools) IsVariable() {}

func init() {
	Register("print", new(printBools))
}

func PrintBools(e Bools) Bools {
	return &printBools{E: e}
}

type printStrings struct {
	E Strings
}

func (this *printStrings) Eval() []string {
	v := this.E.Eval()
	fmt.Printf("%#v\n", v)
	return v
}

func (this *printStrings) IsVariable() {}

func init() {
	Register("print", new(printStrings))
}

func PrintStrings(e Strings) Strings {
	return &printStrings{E: e}
}

type printListOfBytes struct {
	E ListOfBytes
}

func (this *printListOfBytes) Eval() [][]byte {
	v := this.E.Eval()
	fmt.Printf("%#v\n", v)
	return v
}

func (this *printListOfBytes) IsVariable() {}

func init() {
	Register("print", new(printListOfBytes))
}

func PrintListOfBytes(e ListOfBytes) ListOfBytes {
	return &printListOfBytes{E: e}
}
