// Code generated by funcs-gen.
// DO NOT EDIT!

package funcs

type elemDoubles struct {
	List  Doubles
	Index Int
	Thrower
}

func (this *elemDoubles) Eval() float64 {
	list := this.List.Eval()
	index := int(this.Index.Eval())
	if len(list) == 0 {
		return this.ThrowDouble(NewRangeCheckErr(index, len(list)))
	}
	if index < 0 {
		index = index % len(list)
	}
	if len(list) <= index {
		return this.ThrowDouble(NewRangeCheckErr(index, len(list)))
	}
	return list[index]
}

func init() {
	Register("elem", new(elemDoubles))
}

func ElemDoubles(list Doubles, index Int) Double {
	return &elemDoubles{
		List:  list,
		Index: index,
	}
}

type elemInts struct {
	List  Ints
	Index Int
	Thrower
}

func (this *elemInts) Eval() int64 {
	list := this.List.Eval()
	index := int(this.Index.Eval())
	if len(list) == 0 {
		return this.ThrowInt(NewRangeCheckErr(index, len(list)))
	}
	if index < 0 {
		index = index % len(list)
	}
	if len(list) <= index {
		return this.ThrowInt(NewRangeCheckErr(index, len(list)))
	}
	return list[index]
}

func init() {
	Register("elem", new(elemInts))
}

func ElemInts(list Ints, index Int) Int {
	return &elemInts{
		List:  list,
		Index: index,
	}
}

type elemUints struct {
	List  Uints
	Index Int
	Thrower
}

func (this *elemUints) Eval() uint64 {
	list := this.List.Eval()
	index := int(this.Index.Eval())
	if len(list) == 0 {
		return this.ThrowUint(NewRangeCheckErr(index, len(list)))
	}
	if index < 0 {
		index = index % len(list)
	}
	if len(list) <= index {
		return this.ThrowUint(NewRangeCheckErr(index, len(list)))
	}
	return list[index]
}

func init() {
	Register("elem", new(elemUints))
}

func ElemUints(list Uints, index Int) Uint {
	return &elemUints{
		List:  list,
		Index: index,
	}
}

type elemBools struct {
	List  Bools
	Index Int
	Thrower
}

func (this *elemBools) Eval() bool {
	list := this.List.Eval()
	index := int(this.Index.Eval())
	if len(list) == 0 {
		return this.ThrowBool(NewRangeCheckErr(index, len(list)))
	}
	if index < 0 {
		index = index % len(list)
	}
	if len(list) <= index {
		return this.ThrowBool(NewRangeCheckErr(index, len(list)))
	}
	return list[index]
}

func init() {
	Register("elem", new(elemBools))
}

func ElemBools(list Bools, index Int) Bool {
	return &elemBools{
		List:  list,
		Index: index,
	}
}

type elemStrings struct {
	List  Strings
	Index Int
	Thrower
}

func (this *elemStrings) Eval() string {
	list := this.List.Eval()
	index := int(this.Index.Eval())
	if len(list) == 0 {
		return this.ThrowString(NewRangeCheckErr(index, len(list)))
	}
	if index < 0 {
		index = index % len(list)
	}
	if len(list) <= index {
		return this.ThrowString(NewRangeCheckErr(index, len(list)))
	}
	return list[index]
}

func init() {
	Register("elem", new(elemStrings))
}

func ElemStrings(list Strings, index Int) String {
	return &elemStrings{
		List:  list,
		Index: index,
	}
}

type elemListOfBytes struct {
	List  ListOfBytes
	Index Int
	Thrower
}

func (this *elemListOfBytes) Eval() []byte {
	list := this.List.Eval()
	index := int(this.Index.Eval())
	if len(list) == 0 {
		return this.ThrowBytes(NewRangeCheckErr(index, len(list)))
	}
	if index < 0 {
		index = index % len(list)
	}
	if len(list) <= index {
		return this.ThrowBytes(NewRangeCheckErr(index, len(list)))
	}
	return list[index]
}

func init() {
	Register("elem", new(elemListOfBytes))
}

func ElemListOfBytes(list ListOfBytes, index Int) Bytes {
	return &elemListOfBytes{
		List:  list,
		Index: index,
	}
}
