// Code generated by funcs-gen.
// DO NOT EDIT!

package funcs

type elemFloat64s struct {
	List  Float64s
	Index Int64
}

func (this *elemFloat64s) Eval(buf []byte) float64 {
	list := this.List.Eval(buf)
	index := int(this.Index.Eval(buf))
	index = index % len(list)
	return list[index]
}

func init() {
	Register("elem", new(elemFloat64s))
}

type elemFloat32s struct {
	List  Float32s
	Index Int64
}

func (this *elemFloat32s) Eval(buf []byte) float32 {
	list := this.List.Eval(buf)
	index := int(this.Index.Eval(buf))
	index = index % len(list)
	return list[index]
}

func init() {
	Register("elem", new(elemFloat32s))
}

type elemInt64s struct {
	List  Int64s
	Index Int64
}

func (this *elemInt64s) Eval(buf []byte) int64 {
	list := this.List.Eval(buf)
	index := int(this.Index.Eval(buf))
	index = index % len(list)
	return list[index]
}

func init() {
	Register("elem", new(elemInt64s))
}

type elemUint64s struct {
	List  Uint64s
	Index Int64
}

func (this *elemUint64s) Eval(buf []byte) uint64 {
	list := this.List.Eval(buf)
	index := int(this.Index.Eval(buf))
	index = index % len(list)
	return list[index]
}

func init() {
	Register("elem", new(elemUint64s))
}

type elemInt32s struct {
	List  Int32s
	Index Int64
}

func (this *elemInt32s) Eval(buf []byte) int32 {
	list := this.List.Eval(buf)
	index := int(this.Index.Eval(buf))
	index = index % len(list)
	return list[index]
}

func init() {
	Register("elem", new(elemInt32s))
}

type elemUint32s struct {
	List  Uint32s
	Index Int64
}

func (this *elemUint32s) Eval(buf []byte) uint32 {
	list := this.List.Eval(buf)
	index := int(this.Index.Eval(buf))
	index = index % len(list)
	return list[index]
}

func init() {
	Register("elem", new(elemUint32s))
}

type elemBools struct {
	List  Bools
	Index Int64
}

func (this *elemBools) Eval(buf []byte) bool {
	list := this.List.Eval(buf)
	index := int(this.Index.Eval(buf))
	index = index % len(list)
	return list[index]
}

func init() {
	Register("elem", new(elemBools))
}

type elemStrings struct {
	List  Strings
	Index Int64
}

func (this *elemStrings) Eval(buf []byte) string {
	list := this.List.Eval(buf)
	index := int(this.Index.Eval(buf))
	index = index % len(list)
	return list[index]
}

func init() {
	Register("elem", new(elemStrings))
}

type elemListOfBytes struct {
	List  ListOfBytes
	Index Int64
}

func (this *elemListOfBytes) Eval(buf []byte) []byte {
	list := this.List.Eval(buf)
	index := int(this.Index.Eval(buf))
	index = index % len(list)
	return list[index]
}

func init() {
	Register("elem", new(elemListOfBytes))
}
