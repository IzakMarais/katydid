// Code generated by funcs-gen.
// DO NOT EDIT!

package funcs

type rangeFloat64s struct {
	List  Float64s
	First Int64
	Last  Int64
	Thrower
}

func (this *rangeFloat64s) Eval() []float64 {
	list := this.List.Eval()
	first := int(this.First.Eval())
	if len(list) == 0 {
		return this.ThrowFloat64s(NewRangeCheckErr(first, len(list)))
	}
	if first < 0 {
		first = first % len(list)
	}
	if first > len(list) {
		return this.ThrowFloat64s(NewRangeCheckErr(first, len(list)))
	}
	last := int(this.Last.Eval())
	if last < 0 {
		last = last % len(list)
	}
	if last > len(list) {
		return this.ThrowFloat64s(NewRangeCheckErr(last, len(list)))
	}
	if first > last {
		return this.ThrowFloat64s(NewRangeErr(first, last))
	}
	return list[first:last]
}

func init() {
	Register("range", new(rangeFloat64s))
}

type rangeInt64s struct {
	List  Int64s
	First Int64
	Last  Int64
	Thrower
}

func (this *rangeInt64s) Eval() []int64 {
	list := this.List.Eval()
	first := int(this.First.Eval())
	if len(list) == 0 {
		return this.ThrowInt64s(NewRangeCheckErr(first, len(list)))
	}
	if first < 0 {
		first = first % len(list)
	}
	if first > len(list) {
		return this.ThrowInt64s(NewRangeCheckErr(first, len(list)))
	}
	last := int(this.Last.Eval())
	if last < 0 {
		last = last % len(list)
	}
	if last > len(list) {
		return this.ThrowInt64s(NewRangeCheckErr(last, len(list)))
	}
	if first > last {
		return this.ThrowInt64s(NewRangeErr(first, last))
	}
	return list[first:last]
}

func init() {
	Register("range", new(rangeInt64s))
}

type rangeUint64s struct {
	List  Uint64s
	First Int64
	Last  Int64
	Thrower
}

func (this *rangeUint64s) Eval() []uint64 {
	list := this.List.Eval()
	first := int(this.First.Eval())
	if len(list) == 0 {
		return this.ThrowUint64s(NewRangeCheckErr(first, len(list)))
	}
	if first < 0 {
		first = first % len(list)
	}
	if first > len(list) {
		return this.ThrowUint64s(NewRangeCheckErr(first, len(list)))
	}
	last := int(this.Last.Eval())
	if last < 0 {
		last = last % len(list)
	}
	if last > len(list) {
		return this.ThrowUint64s(NewRangeCheckErr(last, len(list)))
	}
	if first > last {
		return this.ThrowUint64s(NewRangeErr(first, last))
	}
	return list[first:last]
}

func init() {
	Register("range", new(rangeUint64s))
}

type rangeBools struct {
	List  Bools
	First Int64
	Last  Int64
	Thrower
}

func (this *rangeBools) Eval() []bool {
	list := this.List.Eval()
	first := int(this.First.Eval())
	if len(list) == 0 {
		return this.ThrowBools(NewRangeCheckErr(first, len(list)))
	}
	if first < 0 {
		first = first % len(list)
	}
	if first > len(list) {
		return this.ThrowBools(NewRangeCheckErr(first, len(list)))
	}
	last := int(this.Last.Eval())
	if last < 0 {
		last = last % len(list)
	}
	if last > len(list) {
		return this.ThrowBools(NewRangeCheckErr(last, len(list)))
	}
	if first > last {
		return this.ThrowBools(NewRangeErr(first, last))
	}
	return list[first:last]
}

func init() {
	Register("range", new(rangeBools))
}

type rangeStrings struct {
	List  Strings
	First Int64
	Last  Int64
	Thrower
}

func (this *rangeStrings) Eval() []string {
	list := this.List.Eval()
	first := int(this.First.Eval())
	if len(list) == 0 {
		return this.ThrowStrings(NewRangeCheckErr(first, len(list)))
	}
	if first < 0 {
		first = first % len(list)
	}
	if first > len(list) {
		return this.ThrowStrings(NewRangeCheckErr(first, len(list)))
	}
	last := int(this.Last.Eval())
	if last < 0 {
		last = last % len(list)
	}
	if last > len(list) {
		return this.ThrowStrings(NewRangeCheckErr(last, len(list)))
	}
	if first > last {
		return this.ThrowStrings(NewRangeErr(first, last))
	}
	return list[first:last]
}

func init() {
	Register("range", new(rangeStrings))
}

type rangeListOfBytes struct {
	List  ListOfBytes
	First Int64
	Last  Int64
	Thrower
}

func (this *rangeListOfBytes) Eval() [][]byte {
	list := this.List.Eval()
	first := int(this.First.Eval())
	if len(list) == 0 {
		return this.ThrowListOfBytes(NewRangeCheckErr(first, len(list)))
	}
	if first < 0 {
		first = first % len(list)
	}
	if first > len(list) {
		return this.ThrowListOfBytes(NewRangeCheckErr(first, len(list)))
	}
	last := int(this.Last.Eval())
	if last < 0 {
		last = last % len(list)
	}
	if last > len(list) {
		return this.ThrowListOfBytes(NewRangeCheckErr(last, len(list)))
	}
	if first > last {
		return this.ThrowListOfBytes(NewRangeErr(first, last))
	}
	return list[first:last]
}

func init() {
	Register("range", new(rangeListOfBytes))
}
