// Code generated by funcs-gen.
// DO NOT EDIT!

package funcs

type rangeDoubles struct {
	List  Doubles
	First Int
	Last  Int
	Thrower
}

func (this *rangeDoubles) Eval() []float64 {
	list := this.List.Eval()
	first := int(this.First.Eval())
	if len(list) == 0 {
		return this.ThrowDoubles(NewRangeCheckErr(first, len(list)))
	}
	if first < 0 {
		first = first % len(list)
	}
	if first > len(list) {
		return this.ThrowDoubles(NewRangeCheckErr(first, len(list)))
	}
	last := int(this.Last.Eval())
	if last < 0 {
		last = last % len(list)
	}
	if last > len(list) {
		return this.ThrowDoubles(NewRangeCheckErr(last, len(list)))
	}
	if first > last {
		return this.ThrowDoubles(NewRangeErr(first, last))
	}
	return list[first:last]
}

func init() {
	Register("range", new(rangeDoubles))
}

func RangeDoubles(list Doubles, from, to Int) Doubles {
	return &rangeDoubles{
		List:  list,
		First: from,
		Last:  to,
	}
}

type rangeInts struct {
	List  Ints
	First Int
	Last  Int
	Thrower
}

func (this *rangeInts) Eval() []int64 {
	list := this.List.Eval()
	first := int(this.First.Eval())
	if len(list) == 0 {
		return this.ThrowInts(NewRangeCheckErr(first, len(list)))
	}
	if first < 0 {
		first = first % len(list)
	}
	if first > len(list) {
		return this.ThrowInts(NewRangeCheckErr(first, len(list)))
	}
	last := int(this.Last.Eval())
	if last < 0 {
		last = last % len(list)
	}
	if last > len(list) {
		return this.ThrowInts(NewRangeCheckErr(last, len(list)))
	}
	if first > last {
		return this.ThrowInts(NewRangeErr(first, last))
	}
	return list[first:last]
}

func init() {
	Register("range", new(rangeInts))
}

func RangeInts(list Ints, from, to Int) Ints {
	return &rangeInts{
		List:  list,
		First: from,
		Last:  to,
	}
}

type rangeUints struct {
	List  Uints
	First Int
	Last  Int
	Thrower
}

func (this *rangeUints) Eval() []uint64 {
	list := this.List.Eval()
	first := int(this.First.Eval())
	if len(list) == 0 {
		return this.ThrowUints(NewRangeCheckErr(first, len(list)))
	}
	if first < 0 {
		first = first % len(list)
	}
	if first > len(list) {
		return this.ThrowUints(NewRangeCheckErr(first, len(list)))
	}
	last := int(this.Last.Eval())
	if last < 0 {
		last = last % len(list)
	}
	if last > len(list) {
		return this.ThrowUints(NewRangeCheckErr(last, len(list)))
	}
	if first > last {
		return this.ThrowUints(NewRangeErr(first, last))
	}
	return list[first:last]
}

func init() {
	Register("range", new(rangeUints))
}

func RangeUints(list Uints, from, to Int) Uints {
	return &rangeUints{
		List:  list,
		First: from,
		Last:  to,
	}
}

type rangeBools struct {
	List  Bools
	First Int
	Last  Int
	Thrower
}

func (this *rangeBools) Eval() []bool {
	list := this.List.Eval()
	first := int(this.First.Eval())
	if len(list) == 0 {
		return this.ThrowBools(NewRangeCheckErr(first, len(list)))
	}
	if first < 0 {
		first = first % len(list)
	}
	if first > len(list) {
		return this.ThrowBools(NewRangeCheckErr(first, len(list)))
	}
	last := int(this.Last.Eval())
	if last < 0 {
		last = last % len(list)
	}
	if last > len(list) {
		return this.ThrowBools(NewRangeCheckErr(last, len(list)))
	}
	if first > last {
		return this.ThrowBools(NewRangeErr(first, last))
	}
	return list[first:last]
}

func init() {
	Register("range", new(rangeBools))
}

func RangeBools(list Bools, from, to Int) Bools {
	return &rangeBools{
		List:  list,
		First: from,
		Last:  to,
	}
}

type rangeStrings struct {
	List  Strings
	First Int
	Last  Int
	Thrower
}

func (this *rangeStrings) Eval() []string {
	list := this.List.Eval()
	first := int(this.First.Eval())
	if len(list) == 0 {
		return this.ThrowStrings(NewRangeCheckErr(first, len(list)))
	}
	if first < 0 {
		first = first % len(list)
	}
	if first > len(list) {
		return this.ThrowStrings(NewRangeCheckErr(first, len(list)))
	}
	last := int(this.Last.Eval())
	if last < 0 {
		last = last % len(list)
	}
	if last > len(list) {
		return this.ThrowStrings(NewRangeCheckErr(last, len(list)))
	}
	if first > last {
		return this.ThrowStrings(NewRangeErr(first, last))
	}
	return list[first:last]
}

func init() {
	Register("range", new(rangeStrings))
}

func RangeStrings(list Strings, from, to Int) Strings {
	return &rangeStrings{
		List:  list,
		First: from,
		Last:  to,
	}
}

type rangeListOfBytes struct {
	List  ListOfBytes
	First Int
	Last  Int
	Thrower
}

func (this *rangeListOfBytes) Eval() [][]byte {
	list := this.List.Eval()
	first := int(this.First.Eval())
	if len(list) == 0 {
		return this.ThrowListOfBytes(NewRangeCheckErr(first, len(list)))
	}
	if first < 0 {
		first = first % len(list)
	}
	if first > len(list) {
		return this.ThrowListOfBytes(NewRangeCheckErr(first, len(list)))
	}
	last := int(this.Last.Eval())
	if last < 0 {
		last = last % len(list)
	}
	if last > len(list) {
		return this.ThrowListOfBytes(NewRangeCheckErr(last, len(list)))
	}
	if first > last {
		return this.ThrowListOfBytes(NewRangeErr(first, last))
	}
	return list[first:last]
}

func init() {
	Register("range", new(rangeListOfBytes))
}

func RangeListOfBytes(list ListOfBytes, from, to Int) ListOfBytes {
	return &rangeListOfBytes{
		List:  list,
		First: from,
		Last:  to,
	}
}
