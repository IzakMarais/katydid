// Code generated by funcs-gen.
// DO NOT EDIT!

package funcs

import (
	"bytes"
)

type doubleGE struct {
	V1 Double
	V2 Double
}

func (this *doubleGE) Eval() bool {
	return this.V1.Eval() >= this.V2.Eval()
}

func init() {
	Register("ge", new(doubleGE))
}

func DoubleGE(a, b Double) Bool {
	return &doubleGE{V1: a, V2: b}
}

type intGE struct {
	V1 Int
	V2 Int
}

func (this *intGE) Eval() bool {
	return this.V1.Eval() >= this.V2.Eval()
}

func init() {
	Register("ge", new(intGE))
}

func IntGE(a, b Int) Bool {
	return &intGE{V1: a, V2: b}
}

type uintGE struct {
	V1 Uint
	V2 Uint
}

func (this *uintGE) Eval() bool {
	return this.V1.Eval() >= this.V2.Eval()
}

func init() {
	Register("ge", new(uintGE))
}

func UintGE(a, b Uint) Bool {
	return &uintGE{V1: a, V2: b}
}

type bytesGE struct {
	V1 Bytes
	V2 Bytes
}

func (this *bytesGE) Eval() bool {
	return bytes.Compare(this.V1.Eval(), this.V2.Eval()) >= 0
}

func init() {
	Register("ge", new(bytesGE))
}

func BytesGE(a, b Bytes) Bool {
	return &bytesGE{V1: a, V2: b}
}

type doubleGt struct {
	V1 Double
	V2 Double
}

func (this *doubleGt) Eval() bool {
	return this.V1.Eval() > this.V2.Eval()
}

func init() {
	Register("gt", new(doubleGt))
}

func DoubleGt(a, b Double) Bool {
	return &doubleGt{V1: a, V2: b}
}

type intGt struct {
	V1 Int
	V2 Int
}

func (this *intGt) Eval() bool {
	return this.V1.Eval() > this.V2.Eval()
}

func init() {
	Register("gt", new(intGt))
}

func IntGt(a, b Int) Bool {
	return &intGt{V1: a, V2: b}
}

type uintGt struct {
	V1 Uint
	V2 Uint
}

func (this *uintGt) Eval() bool {
	return this.V1.Eval() > this.V2.Eval()
}

func init() {
	Register("gt", new(uintGt))
}

func UintGt(a, b Uint) Bool {
	return &uintGt{V1: a, V2: b}
}

type bytesGt struct {
	V1 Bytes
	V2 Bytes
}

func (this *bytesGt) Eval() bool {
	return bytes.Compare(this.V1.Eval(), this.V2.Eval()) > 0
}

func init() {
	Register("gt", new(bytesGt))
}

func BytesGt(a, b Bytes) Bool {
	return &bytesGt{V1: a, V2: b}
}

type doubleLE struct {
	V1 Double
	V2 Double
}

func (this *doubleLE) Eval() bool {
	return this.V1.Eval() <= this.V2.Eval()
}

func init() {
	Register("le", new(doubleLE))
}

func DoubleLE(a, b Double) Bool {
	return &doubleLE{V1: a, V2: b}
}

type intLE struct {
	V1 Int
	V2 Int
}

func (this *intLE) Eval() bool {
	return this.V1.Eval() <= this.V2.Eval()
}

func init() {
	Register("le", new(intLE))
}

func IntLE(a, b Int) Bool {
	return &intLE{V1: a, V2: b}
}

type uintLE struct {
	V1 Uint
	V2 Uint
}

func (this *uintLE) Eval() bool {
	return this.V1.Eval() <= this.V2.Eval()
}

func init() {
	Register("le", new(uintLE))
}

func UintLE(a, b Uint) Bool {
	return &uintLE{V1: a, V2: b}
}

type bytesLE struct {
	V1 Bytes
	V2 Bytes
}

func (this *bytesLE) Eval() bool {
	return bytes.Compare(this.V1.Eval(), this.V2.Eval()) <= 0
}

func init() {
	Register("le", new(bytesLE))
}

func BytesLE(a, b Bytes) Bool {
	return &bytesLE{V1: a, V2: b}
}

type doubleLt struct {
	V1 Double
	V2 Double
}

func (this *doubleLt) Eval() bool {
	return this.V1.Eval() < this.V2.Eval()
}

func init() {
	Register("lt", new(doubleLt))
}

func DoubleLt(a, b Double) Bool {
	return &doubleLt{V1: a, V2: b}
}

type intLt struct {
	V1 Int
	V2 Int
}

func (this *intLt) Eval() bool {
	return this.V1.Eval() < this.V2.Eval()
}

func init() {
	Register("lt", new(intLt))
}

func IntLt(a, b Int) Bool {
	return &intLt{V1: a, V2: b}
}

type uintLt struct {
	V1 Uint
	V2 Uint
}

func (this *uintLt) Eval() bool {
	return this.V1.Eval() < this.V2.Eval()
}

func init() {
	Register("lt", new(uintLt))
}

func UintLt(a, b Uint) Bool {
	return &uintLt{V1: a, V2: b}
}

type bytesLt struct {
	V1 Bytes
	V2 Bytes
}

func (this *bytesLt) Eval() bool {
	return bytes.Compare(this.V1.Eval(), this.V2.Eval()) < 0
}

func init() {
	Register("lt", new(bytesLt))
}

func BytesLt(a, b Bytes) Bool {
	return &bytesLt{V1: a, V2: b}
}

type doubleEq struct {
	V1 Double
	V2 Double
}

func (this *doubleEq) Eval() bool {
	return this.V1.Eval() == this.V2.Eval()
}

func init() {
	Register("eq", new(doubleEq))
}

func DoubleEq(a, b Double) Bool {
	return &doubleEq{V1: a, V2: b}
}

type intEq struct {
	V1 Int
	V2 Int
}

func (this *intEq) Eval() bool {
	return this.V1.Eval() == this.V2.Eval()
}

func init() {
	Register("eq", new(intEq))
}

func IntEq(a, b Int) Bool {
	return &intEq{V1: a, V2: b}
}

type uintEq struct {
	V1 Uint
	V2 Uint
}

func (this *uintEq) Eval() bool {
	return this.V1.Eval() == this.V2.Eval()
}

func init() {
	Register("eq", new(uintEq))
}

func UintEq(a, b Uint) Bool {
	return &uintEq{V1: a, V2: b}
}

type boolEq struct {
	V1 Bool
	V2 Bool
}

func (this *boolEq) Eval() bool {
	return this.V1.Eval() == this.V2.Eval()
}

func init() {
	Register("eq", new(boolEq))
}

func BoolEq(a, b Bool) Bool {
	return &boolEq{V1: a, V2: b}
}

type stringEq struct {
	V1 String
	V2 String
}

func (this *stringEq) Eval() bool {
	return this.V1.Eval() == this.V2.Eval()
}

func init() {
	Register("eq", new(stringEq))
}

func StringEq(a, b String) Bool {
	return &stringEq{V1: a, V2: b}
}

type bytesEq struct {
	V1 Bytes
	V2 Bytes
}

func (this *bytesEq) Eval() bool {
	return bytes.Equal(this.V1.Eval(), this.V2.Eval())
}

func init() {
	Register("eq", new(bytesEq))
}

func BytesEq(a, b Bytes) Bool {
	return &bytesEq{V1: a, V2: b}
}
