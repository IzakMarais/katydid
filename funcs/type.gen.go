// Code generated by funcs-gen.
// DO NOT EDIT!

package funcs

type typDouble struct {
	E Double
}

func (this *typDouble) Eval() (bool, error) {
	_, err := this.E.Eval()
	return (err == nil), nil
}

func init() {
	Register("type", new(typDouble))
}

func TypeDouble(v Double) Bool {
	return &typDouble{E: v}
}

type typInt struct {
	E Int
}

func (this *typInt) Eval() (bool, error) {
	_, err := this.E.Eval()
	return (err == nil), nil
}

func init() {
	Register("type", new(typInt))
}

func TypeInt(v Int) Bool {
	return &typInt{E: v}
}

type typUint struct {
	E Uint
}

func (this *typUint) Eval() (bool, error) {
	_, err := this.E.Eval()
	return (err == nil), nil
}

func init() {
	Register("type", new(typUint))
}

func TypeUint(v Uint) Bool {
	return &typUint{E: v}
}

type typBool struct {
	E Bool
}

func (this *typBool) Eval() (bool, error) {
	_, err := this.E.Eval()
	return (err == nil), nil
}

func init() {
	Register("type", new(typBool))
}

func TypeBool(v Bool) Bool {
	return &typBool{E: v}
}

type typString struct {
	E String
}

func (this *typString) Eval() (bool, error) {
	_, err := this.E.Eval()
	return (err == nil), nil
}

func init() {
	Register("type", new(typString))
}

func TypeString(v String) Bool {
	return &typString{E: v}
}

type typBytes struct {
	E Bytes
}

func (this *typBytes) Eval() (bool, error) {
	_, err := this.E.Eval()
	return (err == nil), nil
}

func init() {
	Register("type", new(typBytes))
}

func TypeBytes(v Bytes) Bool {
	return &typBytes{E: v}
}
