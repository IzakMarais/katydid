// Code generated by funcs-gen.
// DO NOT EDIT!

package funcs

import (
	"strings"
)

type listOfDouble struct {
	List []Double
}

func NewListOfDouble(v []Double) Doubles {
	return &listOfDouble{v}
}

func (this *listOfDouble) Eval() []float64 {
	res := make([]float64, len(this.List))
	for i, e := range this.List {
		res[i] = e.Eval()
	}
	return res
}

func (this *listOfDouble) String() string {
	ss := make([]string, len(this.List))
	for i := range this.List {
		ss[i] = Sprint(this.List[i])
	}
	return "[]float64{" + strings.Join(ss, ",") + "}"
}

func (this *listOfDouble) IsListOf() {}

type listOfInt struct {
	List []Int
}

func NewListOfInt(v []Int) Ints {
	return &listOfInt{v}
}

func (this *listOfInt) Eval() []int64 {
	res := make([]int64, len(this.List))
	for i, e := range this.List {
		res[i] = e.Eval()
	}
	return res
}

func (this *listOfInt) String() string {
	ss := make([]string, len(this.List))
	for i := range this.List {
		ss[i] = Sprint(this.List[i])
	}
	return "[]int64{" + strings.Join(ss, ",") + "}"
}

func (this *listOfInt) IsListOf() {}

type listOfUint struct {
	List []Uint
}

func NewListOfUint(v []Uint) Uints {
	return &listOfUint{v}
}

func (this *listOfUint) Eval() []uint64 {
	res := make([]uint64, len(this.List))
	for i, e := range this.List {
		res[i] = e.Eval()
	}
	return res
}

func (this *listOfUint) String() string {
	ss := make([]string, len(this.List))
	for i := range this.List {
		ss[i] = Sprint(this.List[i])
	}
	return "[]uint64{" + strings.Join(ss, ",") + "}"
}

func (this *listOfUint) IsListOf() {}

type listOfBool struct {
	List []Bool
}

func NewListOfBool(v []Bool) Bools {
	return &listOfBool{v}
}

func (this *listOfBool) Eval() []bool {
	res := make([]bool, len(this.List))
	for i, e := range this.List {
		res[i] = e.Eval()
	}
	return res
}

func (this *listOfBool) String() string {
	ss := make([]string, len(this.List))
	for i := range this.List {
		ss[i] = Sprint(this.List[i])
	}
	return "[]bool{" + strings.Join(ss, ",") + "}"
}

func (this *listOfBool) IsListOf() {}

type listOfString struct {
	List []String
}

func NewListOfString(v []String) Strings {
	return &listOfString{v}
}

func (this *listOfString) Eval() []string {
	res := make([]string, len(this.List))
	for i, e := range this.List {
		res[i] = e.Eval()
	}
	return res
}

func (this *listOfString) String() string {
	ss := make([]string, len(this.List))
	for i := range this.List {
		ss[i] = Sprint(this.List[i])
	}
	return "[]string{" + strings.Join(ss, ",") + "}"
}

func (this *listOfString) IsListOf() {}

type listOfBytes struct {
	List []Bytes
}

func NewListOfBytes(v []Bytes) ListOfBytes {
	return &listOfBytes{v}
}

func (this *listOfBytes) Eval() [][]byte {
	res := make([][]byte, len(this.List))
	for i, e := range this.List {
		res[i] = e.Eval()
	}
	return res
}

func (this *listOfBytes) String() string {
	ss := make([]string, len(this.List))
	for i := range this.List {
		ss[i] = Sprint(this.List[i])
	}
	return "[][]byte{" + strings.Join(ss, ",") + "}"
}

func (this *listOfBytes) IsListOf() {}
