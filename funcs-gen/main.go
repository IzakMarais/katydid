//  Copyright 2013 Walter Schulze
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

package main

import (
	"flag"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

func capFirst(s string) string {
	b := []byte(s)
	b[0] ^= ' '
	return string(b)
}

const compareStr string = `
type {{.Type}}{{.CName}} struct {
	V1 {{.CType}}
	V2 {{.CType}}
}

func (this *{{.Type}}{{.CName}}) Eval(buf []byte) bool {
	{{if .Eval}}{{.Eval}}{{else}}return this.V1.Eval(buf) {{.Operator}} this.V2.Eval(buf){{end}}
}

func init() {
	Register("{{.Name}}", new({{.Type}}{{.CName}}))
}
`

type compare struct {
	Name     string
	Operator string
	Type     string
	Eval     string
}

func (this *compare) CName() string {
	return capFirst(this.Name)
}

func (this *compare) CType() string {
	return capFirst(this.Type)
}

const newFuncStr = `
func New{{.}}Func(uniq string, values ...interface{}) ({{.}}, error) {
	f, err := newFunc(uniq, values...)
	if err != nil {
		return nil, err
	}
	return f.({{.}}), nil
}
`

const constStr = `
type const{{.CType}} struct {
	v {{.GoType}}
}

func New{{.CType}}(v {{.GoType}}) {{.CType}} {
	return &const{{.CType}}{v}
}

func (this *const{{.CType}}) Eval(buf []byte) {{.GoType}} {
	return this.v
}
`

type conster struct {
	CType  string
	GoType string
}

var (
	dir = "."
)

func main() {
	flag.Parse()
	args := flag.Args()
	if len(args) == 1 {
		dir = args[0]
	}
	fmt.Printf("generating code in %v\n", dir)
	gen(compareStr, "compare.gen.go", []interface{}{
		&compare{"ge", ">=", "float64", ""},
		&compare{"ge", ">=", "float32", ""},
		&compare{"ge", ">=", "int64", ""},
		&compare{"ge", ">=", "uint64", ""},
		&compare{"ge", ">=", "int32", ""},
		&compare{"ge", ">=", "uint32", ""},
		&compare{"ge", "", "bytes", "return bytes.Compare(this.V1.Eval(buf), this.V2.Eval(buf)) >= 0"},
		&compare{"gt", ">", "float64", ""},
		&compare{"gt", ">", "float32", ""},
		&compare{"gt", ">", "int64", ""},
		&compare{"gt", ">", "uint64", ""},
		&compare{"gt", ">", "int32", ""},
		&compare{"gt", ">", "uint32", ""},
		&compare{"gt", "", "bytes", "return bytes.Compare(this.V1.Eval(buf), this.V2.Eval(buf)) > 0"},
		&compare{"le", "<=", "float64", ""},
		&compare{"le", "<=", "float32", ""},
		&compare{"le", "<=", "int64", ""},
		&compare{"le", "<=", "uint64", ""},
		&compare{"le", "<=", "int32", ""},
		&compare{"le", "<=", "uint32", ""},
		&compare{"le", "", "bytes", "return bytes.Compare(this.V1.Eval(buf), this.V2.Eval(buf)) <= 0"},
		&compare{"lt", "<", "float64", ""},
		&compare{"lt", "<", "float32", ""},
		&compare{"lt", "<", "int64", ""},
		&compare{"lt", "<", "uint64", ""},
		&compare{"lt", "<", "int32", ""},
		&compare{"lt", "<", "uint32", ""},
		&compare{"lt", "", "bytes", "return bytes.Compare(this.V1.Eval(buf), this.V2.Eval(buf)) < 0"},
		&compare{"eq", "==", "float64", ""},
		&compare{"eq", "==", "float32", ""},
		&compare{"eq", "==", "int64", ""},
		&compare{"eq", "==", "uint64", ""},
		&compare{"eq", "==", "int32", ""},
		&compare{"eq", "==", "uint32", ""},
		&compare{"eq", "==", "bool", ""},
		&compare{"eq", "==", "string", ""},
		&compare{"eq", "", "bytes", "return bytes.Equal(this.V1.Eval(buf), this.V2.Eval(buf))"},
	}, "bytes")
	gen(newFuncStr, "newfunc.gen.go", []interface{}{
		"Float64",
		"Float32",
		"Int64",
		"Uint64",
		"Int32",
		"Uint32",
		"Bool",
		"String",
		"Bytes",
	})
	gen(constStr, "const.gen.go", []interface{}{
		&conster{"Float64", "float64"},
		&conster{"Float32", "float32"},
		&conster{"Int64", "int64"},
		&conster{"Uint64", "uint64"},
		&conster{"Int32", "int32"},
		&conster{"Uint32", "uint32"},
		&conster{"Bool", "bool"},
		&conster{"String", "string"},
		&conster{"Bytes", "[]byte"},
	})
}

func gen(tmp string, filename string, objects []interface{}, imports ...string) {
	f, err := os.Create(filepath.Join(dir, filename))
	if err != nil {
		panic(err)
	}
	f.Write([]byte(`// Code generated by funcs-gen.
// DO NOT EDIT!

package funcs
`))
	if len(imports) > 0 {
		f.Write([]byte(`
import (
`))
		f.Write([]byte(`"` + strings.Join(imports, "\n") + `"`))
		f.Write([]byte(`
)

	`))
	}
	t := template.Must(template.New("a").Parse(tmp))
	for _, o := range objects {
		err := t.Execute(f, o)
		if err != nil {
			panic(err)
		}
	}
}
