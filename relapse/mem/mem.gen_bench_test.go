// Code generated by mem_test-gen.
// DO NOT EDIT!

package mem_test

import (
"testing"
"github.com/katydid/katydid/relapse/tests"
)


func BenchmarkProtoNumAndNameTelephoneProtoNum(b *testing.B) {
	v := tests.BenchValidators["ProtoNumAndNameTelephone"]["protoNum"]
	bench(b, v.Grammar, tests.RandomPersonProtoNumParser)
}

func BenchmarkProtoNumBridgePepperProtoNum(b *testing.B) {
	v := tests.BenchValidators["ProtoNumBridgePepper"]["protoNum"]
	bench(b, v.Grammar, tests.RandomPuddingMilkshakeProtoNumParser)
}

func BenchmarkProtoNumBridgePepperAndFountainTargetProtoNum(b *testing.B) {
	v := tests.BenchValidators["ProtoNumBridgePepperAndFountainTarget"]["protoNum"]
	bench(b, v.Grammar, tests.RandomPuddingMilkshakeProtoNumParser)
}

func BenchmarkProtoNumContextPersonProtoNum(b *testing.B) {
	v := tests.BenchValidators["ProtoNumContextPerson"]["protoNum"]
	bench(b, v.Grammar, tests.RandomPersonProtoNumParser)
}

func BenchmarkProtoNumCorrectNotNameProtoNum(b *testing.B) {
	v := tests.BenchValidators["ProtoNumCorrectNotName"]["protoNum"]
	bench(b, v.Grammar, tests.RandomPersonProtoNumParser)
}

func BenchmarkProtoNumEmptyOrNilProtoNum(b *testing.B) {
	v := tests.BenchValidators["ProtoNumEmptyOrNil"]["protoNum"]
	bench(b, v.Grammar, tests.RandomPersonProtoNumParser)
}

func BenchmarkProtoNumIncorrectNotNameProtoNum(b *testing.B) {
	v := tests.BenchValidators["ProtoNumIncorrectNotName"]["protoNum"]
	bench(b, v.Grammar, tests.RandomPersonProtoNumParser)
}

func BenchmarkProtoNumLenNameProtoNum(b *testing.B) {
	v := tests.BenchValidators["ProtoNumLenName"]["protoNum"]
	bench(b, v.Grammar, tests.RandomPersonProtoNumParser)
}

func BenchmarkProtoNumListIndexAddressProtoNum(b *testing.B) {
	v := tests.BenchValidators["ProtoNumListIndexAddress"]["protoNum"]
	bench(b, v.Grammar, tests.RandomPersonProtoNumParser)
}

func BenchmarkProtoNumNilNameProtoNum(b *testing.B) {
	v := tests.BenchValidators["ProtoNumNilName"]["protoNum"]
	bench(b, v.Grammar, tests.RandomPersonProtoNumParser)
}

func BenchmarkProtoNumOrNameTelephoneProtoNum(b *testing.B) {
	v := tests.BenchValidators["ProtoNumOrNameTelephone"]["protoNum"]
	bench(b, v.Grammar, tests.RandomPersonProtoNumParser)
}

func BenchmarkProtoNumRecursiveSrcTreeProtoNum(b *testing.B) {
	v := tests.BenchValidators["ProtoNumRecursiveSrcTree"]["protoNum"]
	bench(b, v.Grammar, tests.RandomSrcTreeProtoNumParser)
}

func BenchmarkProtoNumTypewriterPrisonDaisySledProtoNum(b *testing.B) {
	v := tests.BenchValidators["ProtoNumTypewriterPrisonDaisySled"]["protoNum"]
	bench(b, v.Grammar, tests.RandomTypewriterPrisonProtoNumParser)
}

func BenchmarkProtoNumTypewriterPrisonMapSharkProtoNum(b *testing.B) {
	v := tests.BenchValidators["ProtoNumTypewriterPrisonMapShark"]["protoNum"]
	bench(b, v.Grammar, tests.RandomTypewriterPrisonProtoNumParser)
}

func BenchmarkProtoNumTypewriterPrisonMenuPaperclipProtoNum(b *testing.B) {
	v := tests.BenchValidators["ProtoNumTypewriterPrisonMenuPaperclip"]["protoNum"]
	bench(b, v.Grammar, tests.RandomTypewriterPrisonProtoNumParser)
}

func BenchmarkProtoNumTypewriterPrisonScarBusStopProtoNum(b *testing.B) {
	v := tests.BenchValidators["ProtoNumTypewriterPrisonScarBusStop"]["protoNum"]
	bench(b, v.Grammar, tests.RandomTypewriterPrisonProtoNumParser)
}

func BenchmarkProtoNumTypewriterPrisonSmileLetterProtoNum(b *testing.B) {
	v := tests.BenchValidators["ProtoNumTypewriterPrisonSmileLetter"]["protoNum"]
	bench(b, v.Grammar, tests.RandomTypewriterPrisonProtoNumParser)
}
