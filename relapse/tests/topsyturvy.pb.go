// Code generated by protoc-gen-gogo.
// source: topsyturvy.proto
// DO NOT EDIT!

/*
Package tests is a generated protocol buffer package.

It is generated from these files:
	topsyturvy.proto

It has these top-level messages:
	TopsyTurvy
	Topsy
	Turvy
*/
package tests

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type TopsyTurvy struct {
	Top              *Topsy `protobuf:"bytes,1,opt,name=Top" json:"Top,omitempty"`
	Turf             *Turvy `protobuf:"bytes,2,opt,name=Turf" json:"Turf,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TopsyTurvy) Reset()                    { *m = TopsyTurvy{} }
func (m *TopsyTurvy) String() string            { return proto.CompactTextString(m) }
func (*TopsyTurvy) ProtoMessage()               {}
func (*TopsyTurvy) Descriptor() ([]byte, []int) { return fileDescriptorTopsyturvy, []int{0} }

func (m *TopsyTurvy) GetTop() *Topsy {
	if m != nil {
		return m.Top
	}
	return nil
}

func (m *TopsyTurvy) GetTurf() *Turvy {
	if m != nil {
		return m.Turf
	}
	return nil
}

type Topsy struct {
	Top              *int64 `protobuf:"varint,1,opt,name=Top" json:"Top,omitempty"`
	Turf             *int64 `protobuf:"varint,2,opt,name=Turf" json:"Turf,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Topsy) Reset()                    { *m = Topsy{} }
func (m *Topsy) String() string            { return proto.CompactTextString(m) }
func (*Topsy) ProtoMessage()               {}
func (*Topsy) Descriptor() ([]byte, []int) { return fileDescriptorTopsyturvy, []int{1} }

func (m *Topsy) GetTop() int64 {
	if m != nil && m.Top != nil {
		return *m.Top
	}
	return 0
}

func (m *Topsy) GetTurf() int64 {
	if m != nil && m.Turf != nil {
		return *m.Turf
	}
	return 0
}

type Turvy struct {
	Turf             *int64 `protobuf:"varint,1,opt,name=Turf" json:"Turf,omitempty"`
	Top              *int64 `protobuf:"varint,2,opt,name=Top" json:"Top,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Turvy) Reset()                    { *m = Turvy{} }
func (m *Turvy) String() string            { return proto.CompactTextString(m) }
func (*Turvy) ProtoMessage()               {}
func (*Turvy) Descriptor() ([]byte, []int) { return fileDescriptorTopsyturvy, []int{2} }

func (m *Turvy) GetTurf() int64 {
	if m != nil && m.Turf != nil {
		return *m.Turf
	}
	return 0
}

func (m *Turvy) GetTop() int64 {
	if m != nil && m.Top != nil {
		return *m.Top
	}
	return 0
}

func init() {
	proto.RegisterType((*TopsyTurvy)(nil), "tests.TopsyTurvy")
	proto.RegisterType((*Topsy)(nil), "tests.Topsy")
	proto.RegisterType((*Turvy)(nil), "tests.Turvy")
}
func (this *TopsyTurvy) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return TopsyturvyDescription()
}
func (this *Topsy) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return TopsyturvyDescription()
}
func (this *Turvy) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return TopsyturvyDescription()
}
func TopsyturvyDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 2674 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x59, 0x5b, 0x70, 0x1b, 0x57,
		0x19, 0x46, 0x37, 0x5b, 0xfa, 0x25, 0xdb, 0xeb, 0xb5, 0x93, 0x6c, 0x4c, 0x9a, 0x8b, 0xc8, 0x8d,
		0xb6, 0x91, 0x83, 0x73, 0x69, 0xea, 0x00, 0xc5, 0xb2, 0x15, 0xd7, 0x1d, 0xdb, 0x32, 0xb6, 0xcc,
		0xb4, 0x7d, 0xd9, 0x59, 0xaf, 0x8e, 0xe4, 0x4d, 0x56, 0xbb, 0x62, 0x77, 0x95, 0xc4, 0x61, 0x98,
		0x81, 0x29, 0x94, 0x61, 0xa0, 0x50, 0x0a, 0x33, 0xb4, 0xa5, 0x2d, 0x97, 0x19, 0x6e, 0xa1, 0x40,
		0xcb, 0xed, 0x89, 0x07, 0x78, 0x00, 0x9e, 0x79, 0xe0, 0x89, 0x07, 0x06, 0x86, 0xe1, 0x1a, 0x20,
		0xcc, 0xf8, 0x2d, 0x2f, 0xfc, 0xe7, 0x9c, 0xbd, 0x49, 0x96, 0xb5, 0x32, 0x93, 0xd6, 0x4f, 0xde,
		0x73, 0xfe, 0xef, 0x3f, 0xff, 0xfd, 0xff, 0xcf, 0x11, 0xbc, 0x70, 0x0a, 0x8e, 0xd6, 0x4d, 0xb3,
		0xae, 0x93, 0xc9, 0xa6, 0x65, 0x3a, 0xe6, 0x46, 0xab, 0x36, 0x59, 0x25, 0xb6, 0x6a, 0x69, 0x4d,
		0xc7, 0xb4, 0x0a, 0x6c, 0x4d, 0x1c, 0xe1, 0x14, 0x05, 0x8f, 0x22, 0x3f, 0x0f, 0xa3, 0x57, 0x34,
		0x9d, 0xcc, 0xf9, 0x84, 0x6b, 0xc4, 0x11, 0xa7, 0x20, 0x59, 0xc3, 0x45, 0x29, 0x76, 0x34, 0x71,
		0x3a, 0x3b, 0x75, 0xbc, 0xd0, 0x01, 0x2a, 0xb4, 0x23, 0x56, 0xe8, 0x72, 0xfe, 0xf7, 0x09, 0x18,
		0xeb, 0xb2, 0x2e, 0xe6, 0x20, 0x69, 0x28, 0x0d, 0xca, 0x2b, 0x76, 0x3a, 0x23, 0x8e, 0xc0, 0x60,
		0x53, 0x51, 0xaf, 0x29, 0x75, 0x22, 0xc5, 0xd9, 0x82, 0x08, 0x50, 0x25, 0x4d, 0x62, 0x54, 0x89,
		0xa1, 0x6e, 0x49, 0x09, 0x3c, 0x30, 0x23, 0x1e, 0x84, 0xd1, 0x66, 0x6b, 0x43, 0xd7, 0x54, 0x39,
		0xb4, 0x05, 0xb8, 0x95, 0x12, 0x0f, 0xc0, 0xc8, 0x0d, 0xa2, 0x5c, 0x0b, 0x6f, 0x64, 0xd9, 0xc6,
		0x45, 0xc8, 0x35, 0x88, 0x6d, 0x23, 0x63, 0xd9, 0xd9, 0x6a, 0x12, 0x29, 0xc9, 0x44, 0x3f, 0xba,
		0x43, 0xf4, 0x4e, 0xf1, 0x1e, 0x81, 0x0c, 0x31, 0x5a, 0x0d, 0x0e, 0x4a, 0xed, 0xa2, 0x6f, 0x09,
		0x29, 0x3a, 0x81, 0x97, 0x60, 0xd0, 0x26, 0xd6, 0x75, 0x4d, 0x25, 0xd2, 0x00, 0x83, 0x9d, 0xda,
		0x01, 0x5b, 0xe3, 0xfb, 0x3b, 0x91, 0x19, 0x72, 0xd3, 0x21, 0x86, 0xad, 0x99, 0x86, 0x34, 0xc8,
		0xb0, 0x27, 0xba, 0x98, 0x98, 0xe8, 0xd5, 0x4e, 0xe4, 0x19, 0x18, 0x34, 0x9b, 0x0e, 0xc2, 0x6c,
		0x29, 0x8d, 0xd6, 0xcb, 0x4e, 0x1d, 0xea, 0xea, 0x9a, 0x32, 0xa7, 0x11, 0x1f, 0x05, 0xc1, 0x36,
		0x5b, 0x96, 0x4a, 0x64, 0xd5, 0xac, 0x12, 0x59, 0x33, 0x6a, 0xa6, 0x94, 0x61, 0xb8, 0x23, 0x3b,
		0x65, 0x65, 0x84, 0xb3, 0x48, 0xb7, 0x80, 0x64, 0xe2, 0x30, 0x0c, 0xd8, 0x5b, 0x86, 0xa3, 0xdc,
		0x94, 0x72, 0xd4, 0x4d, 0xf9, 0xbb, 0x49, 0x18, 0xe9, 0xed, 0xd9, 0xf3, 0x90, 0xaa, 0x51, 0x99,
		0xd1, 0xaf, 0x7b, 0xd0, 0xa8, 0xcd, 0x16, 0x03, 0x7b, 0x41, 0x5e, 0x80, 0xac, 0x41, 0x6c, 0x87,
		0x54, 0xb9, 0xeb, 0x12, 0xff, 0x8f, 0xbf, 0x93, 0x7b, 0xf0, 0xf7, 0xe3, 0x30, 0xe2, 0x4b, 0x2a,
		0x5b, 0x8a, 0x51, 0xf7, 0xc2, 0x65, 0x32, 0xea, 0xcc, 0x42, 0xc9, 0xc3, 0xad, 0x52, 0x18, 0xba,
		0x05, 0x4c, 0x83, 0x98, 0x35, 0x0c, 0x62, 0x55, 0x47, 0x47, 0x76, 0x57, 0xba, 0x4c, 0x49, 0x3a,
		0x85, 0x38, 0x1b, 0x04, 0xc0, 0xe0, 0x2e, 0x8e, 0x5c, 0xe2, 0x59, 0xe0, 0xc5, 0xc0, 0x15, 0x18,
		0xb6, 0x08, 0x0d, 0x54, 0x34, 0x14, 0x97, 0x3a, 0xc3, 0x0e, 0x2c, 0x44, 0x4a, 0xbd, 0xea, 0xc2,
		0xb8, 0xd0, 0xfb, 0x60, 0xc8, 0xe7, 0xc3, 0xbc, 0x4e, 0xf3, 0x31, 0x33, 0xf1, 0x30, 0x0c, 0x77,
		0x68, 0x37, 0x04, 0x29, 0xdb, 0x51, 0x2c, 0x87, 0x85, 0x45, 0x4a, 0xcc, 0x42, 0x02, 0x13, 0x95,
		0x25, 0x7b, 0x6a, 0xe2, 0x21, 0x18, 0x6a, 0xe7, 0xda, 0x83, 0x38, 0xff, 0xf3, 0x14, 0x8c, 0x77,
		0xf5, 0x7c, 0x7b, 0xdc, 0x61, 0xa4, 0xa2, 0xb7, 0x36, 0x88, 0x85, 0x21, 0x40, 0x79, 0x4c, 0x43,
		0x4a, 0x57, 0x36, 0x88, 0x8e, 0xce, 0x8d, 0x9d, 0x1e, 0x9e, 0x7a, 0xa8, 0xaf, 0x68, 0x2a, 0x2c,
		0x52, 0x08, 0x46, 0x63, 0xd2, 0xad, 0x03, 0x14, 0xfa, 0x60, 0x7f, 0xd0, 0x0a, 0x22, 0xc4, 0x51,
		0xc8, 0x50, 0x24, 0x37, 0xcd, 0x00, 0x13, 0x4c, 0x80, 0x34, 0x0b, 0x98, 0x2a, 0xf1, 0x6a, 0x1d,
		0xda, 0xb0, 0x4a, 0x6a, 0x4a, 0x4b, 0x77, 0xe4, 0xeb, 0x8a, 0xde, 0x22, 0xcc, 0x87, 0x19, 0x71,
		0x0c, 0xb2, 0x3c, 0x1e, 0x34, 0xa4, 0xbd, 0xc9, 0x32, 0x34, 0x45, 0x19, 0x5e, 0xb5, 0x31, 0xd2,
		0x5c, 0x5b, 0x53, 0xba, 0x42, 0x67, 0xf6, 0x3f, 0xd0, 0x5d, 0x40, 0xd7, 0xf5, 0xf9, 0x9f, 0xc5,
		0x21, 0xc9, 0x84, 0x1b, 0x81, 0x6c, 0xe5, 0xa9, 0x95, 0x92, 0x3c, 0x57, 0x5e, 0x2f, 0x2e, 0x96,
		0x84, 0x18, 0xda, 0x0c, 0xd8, 0xc2, 0x95, 0xc5, 0xf2, 0x4c, 0x45, 0x88, 0xfb, 0xdf, 0x0b, 0xcb,
		0x95, 0x8b, 0xe7, 0x85, 0x84, 0x0f, 0x58, 0xe7, 0x0b, 0xc9, 0x30, 0xc1, 0xb9, 0x29, 0x21, 0x85,
		0xba, 0xe5, 0x38, 0x83, 0x85, 0x27, 0x4b, 0x73, 0x48, 0x31, 0xd0, 0xbe, 0x82, 0x34, 0x83, 0xe8,
		0xdb, 0x0c, 0x5b, 0x29, 0x96, 0xcb, 0x8b, 0x42, 0xda, 0xe7, 0xb9, 0x56, 0x59, 0x5d, 0x58, 0x9e,
		0x17, 0x32, 0x3e, 0xcf, 0xf9, 0xd5, 0xf2, 0xfa, 0x8a, 0x00, 0x3e, 0x87, 0xa5, 0xd2, 0xda, 0xda,
		0xcc, 0x7c, 0x49, 0xc8, 0xfa, 0x14, 0xc5, 0xa7, 0x2a, 0xa5, 0x35, 0x21, 0xd7, 0x26, 0x16, 0x1e,
		0x31, 0xe4, 0x1f, 0x51, 0x5a, 0x5e, 0x5f, 0x12, 0x86, 0xd1, 0x66, 0x43, 0xfc, 0x08, 0x4f, 0x88,
		0x91, 0x8e, 0x25, 0x94, 0x54, 0x08, 0x04, 0xe1, 0x5c, 0x46, 0xdb, 0x16, 0x90, 0x42, 0xcc, 0xcf,
		0x42, 0x8a, 0xc7, 0x83, 0x08, 0xc3, 0x8b, 0x33, 0xc5, 0xd2, 0xa2, 0x5c, 0x5e, 0xa9, 0x2c, 0x94,
		0x97, 0x67, 0x16, 0xd1, 0x76, 0xfe, 0xda, 0x6a, 0xe9, 0x83, 0xeb, 0x0b, 0xab, 0xa5, 0x39, 0xb4,
		0x5f, 0x68, 0x6d, 0xa5, 0x34, 0x53, 0xc1, 0xb5, 0x44, 0xfe, 0x38, 0x8c, 0x77, 0x4d, 0xe1, 0xb6,
		0xe8, 0xcd, 0x7f, 0x36, 0x06, 0x63, 0xdd, 0xaa, 0x4d, 0x7b, 0x8c, 0x5f, 0x82, 0x14, 0x0f, 0x18,
		0x5e, 0x5b, 0xdf, 0xdd, 0xb5, 0x60, 0x7d, 0x88, 0x52, 0xf4, 0xe8, 0x18, 0x89, 0x5d, 0x3a, 0x06,
		0xc5, 0x7a, 0x21, 0xa3, 0x83, 0xb4, 0x2b, 0xab, 0xdd, 0xd2, 0x8e, 0x65, 0x2b, 0x8e, 0x0c, 0x1d,
		0x07, 0x1d, 0xdb, 0x5d, 0x48, 0xef, 0xb4, 0xe7, 0x63, 0xb0, 0x7f, 0x97, 0x1e, 0xd9, 0x7e, 0xd8,
		0x45, 0x18, 0x68, 0x10, 0x67, 0xd3, 0xf4, 0x9a, 0xcb, 0xc9, 0x2e, 0x55, 0x8f, 0x6e, 0xf7, 0x28,
		0x97, 0x89, 0xdd, 0xfa, 0x1e, 0x3f, 0xdf, 0x13, 0xe9, 0x97, 0x31, 0xd8, 0xd7, 0x9d, 0x57, 0xbb,
		0x44, 0x38, 0xb6, 0x68, 0x46, 0xb3, 0xe5, 0xf0, 0x3e, 0x12, 0xf7, 0xf3, 0xb8, 0xe5, 0xf8, 0x8b,
		0x09, 0xb6, 0x38, 0x19, 0x88, 0x90, 0x64, 0x22, 0x1c, 0xde, 0x45, 0x76, 0xaf, 0x60, 0x1f, 0x01,
		0x41, 0xd5, 0x35, 0x62, 0x38, 0xb2, 0xed, 0x58, 0x44, 0x69, 0x68, 0x46, 0x9d, 0xd5, 0xa3, 0xf4,
		0x74, 0xaa, 0xa6, 0xe8, 0x36, 0xa1, 0x04, 0xac, 0x84, 0x5a, 0x21, 0x82, 0x81, 0x10, 0x41, 0xfe,
		0x76, 0x0a, 0xb2, 0xe1, 0x31, 0x60, 0x1c, 0x72, 0x57, 0x95, 0xeb, 0x8a, 0xec, 0x0d, 0x5e, 0x5c,
		0x83, 0x43, 0x30, 0xce, 0x56, 0x51, 0x64, 0x64, 0xa5, 0xea, 0x8a, 0x6d, 0x33, 0xfd, 0xd2, 0x6c,
		0x37, 0x0f, 0x63, 0x6c, 0xb7, 0x81, 0xc5, 0x4a, 0x6b, 0xea, 0x44, 0xa6, 0xf3, 0xa0, 0xcd, 0x0a,
		0x91, 0x2f, 0xc8, 0xc3, 0xf0, 0x00, 0xa3, 0xa9, 0x13, 0x83, 0x58, 0x8a, 0x43, 0x64, 0xf2, 0xe1,
		0x16, 0x6e, 0xc8, 0x8a, 0x51, 0x95, 0x37, 0x15, 0x7b, 0x53, 0x1a, 0x0f, 0x53, 0x9f, 0x80, 0xfd,
		0x8c, 0x1a, 0x85, 0x46, 0x89, 0x65, 0x75, 0x93, 0xa8, 0xd7, 0xe4, 0x96, 0x53, 0xbb, 0x24, 0xbd,
		0x33, 0x4c, 0x76, 0x05, 0x72, 0xd4, 0x5e, 0x0d, 0xed, 0x16, 0x9e, 0x69, 0x5a, 0xac, 0x1a, 0x0e,
		0x77, 0x89, 0xf8, 0x90, 0x82, 0x85, 0xb2, 0x0b, 0x58, 0xc2, 0xe9, 0x65, 0x3a, 0xb5, 0xb6, 0x52,
		0x2a, 0xcd, 0x51, 0x07, 0xd5, 0x4d, 0x5f, 0xe5, 0xac, 0xa7, 0x94, 0xaa, 0x72, 0x71, 0x71, 0xb6,
		0x74, 0xa7, 0x37, 0x5b, 0x12, 0xc2, 0xe7, 0x1f, 0x87, 0x7d, 0x81, 0x52, 0x61, 0xaa, 0xd1, 0x30,
		0x15, 0x72, 0x6a, 0x6e, 0xed, 0xa4, 0x11, 0xc3, 0x34, 0x07, 0xd9, 0x64, 0x6b, 0x11, 0x15, 0x4d,
		0x53, 0x95, 0x0e, 0x74, 0xb8, 0x10, 0x05, 0x21, 0x86, 0xb2, 0x81, 0x96, 0x55, 0x2c, 0xfc, 0xc7,
		0x96, 0x8e, 0xb4, 0x63, 0x47, 0xcd, 0x8d, 0xab, 0x2a, 0x77, 0x8b, 0x8c, 0x4c, 0x6a, 0xda, 0x4d,
		0xe9, 0x38, 0x53, 0x42, 0x42, 0xac, 0xbd, 0xa9, 0x58, 0x4d, 0xd6, 0x1a, 0x6c, 0xd4, 0x90, 0x48,
		0x27, 0xd8, 0xce, 0x29, 0x38, 0x42, 0x45, 0x37, 0x14, 0xc3, 0x94, 0x5b, 0x36, 0x91, 0x83, 0xd3,
		0x7d, 0x3b, 0x9c, 0xa4, 0x87, 0x88, 0xb3, 0x30, 0xde, 0x32, 0x34, 0x03, 0xfd, 0x8e, 0x04, 0x74,
		0x9b, 0x47, 0xa8, 0xf4, 0xd7, 0xc1, 0x5d, 0xe6, 0xa1, 0xf5, 0x30, 0x35, 0xb7, 0x7a, 0x7e, 0x1a,
		0x72, 0x61, 0xbb, 0x8b, 0x19, 0xe0, 0x96, 0xc7, 0x12, 0x89, 0x65, 0x79, 0xb6, 0x3c, 0x47, 0x0b,
		0xea, 0xd3, 0x25, 0xac, 0x8e, 0x58, 0xd8, 0x17, 0x17, 0x2a, 0x25, 0x79, 0x75, 0x7d, 0xb9, 0xb2,
		0xb0, 0x54, 0x12, 0x12, 0x0f, 0x66, 0xd2, 0x7f, 0x1b, 0x14, 0x3e, 0x86, 0x7f, 0xf1, 0xfc, 0x5f,
		0x62, 0x30, 0xdc, 0x31, 0xb2, 0x9c, 0x84, 0x03, 0xde, 0x28, 0x6f, 0x13, 0x47, 0xbe, 0xa1, 0x59,
		0x2c, 0x14, 0x1a, 0x0a, 0x1f, 0x13, 0x7c, 0x23, 0x15, 0xe0, 0x08, 0x6a, 0x8a, 0xf3, 0x83, 0x51,
		0x55, 0xac, 0xaa, 0x1c, 0xdc, 0x75, 0x64, 0x45, 0x45, 0x6f, 0xd8, 0x26, 0xaf, 0x4d, 0xbb, 0x38,
		0x24, 0x11, 0xde, 0xc2, 0x6e, 0xdb, 0x50, 0x9a, 0xe8, 0x11, 0xc7, 0xda, 0x62, 0x5d, 0xf9, 0xfe,
		0x18, 0x29, 0xac, 0xe8, 0x8b, 0x09, 0xc8, 0x85, 0xdb, 0x33, 0x1d, 0x54, 0x54, 0x56, 0x28, 0x62,
		0x2c, 0xc4, 0xdf, 0xd5, 0xb3, 0x99, 0x17, 0x66, 0x69, 0x27, 0x9f, 0x1e, 0xe0, 0xdd, 0x93, 0x56,
		0x5f, 0xea, 0x52, 0xc2, 0x67, 0xa5, 0xb4, 0xf8, 0x18, 0x0c, 0x5c, 0xb5, 0x19, 0xb3, 0x01, 0xc6,
		0xec, 0x78, 0x6f, 0x66, 0x4f, 0xac, 0x31, 0x6e, 0x99, 0x27, 0xd6, 0xe4, 0xe5, 0xf2, 0xea, 0xd2,
		0xcc, 0x22, 0xd6, 0xae, 0xa4, 0xae, 0xdc, 0xda, 0x6a, 0xaf, 0x34, 0x3d, 0x0c, 0x86, 0xf4, 0xf4,
		0x1e, 0xd6, 0x5e, 0x10, 0xee, 0x4b, 0x5c, 0x4d, 0x42, 0x8a, 0xe9, 0x8a, 0x09, 0xec, 0x6a, 0x2b,
		0xbc, 0x43, 0x4c, 0x43, 0x72, 0xb6, 0xbc, 0x4a, 0x63, 0x0b, 0x83, 0x89, 0xaf, 0xca, 0x2b, 0x0b,
		0xa5, 0x59, 0x0c, 0xaf, 0xfc, 0x05, 0x18, 0xe0, 0xfa, 0xd0, 0xb8, 0xf3, 0x35, 0x42, 0x10, 0xff,
		0x74, 0x79, 0xc4, 0xbc, 0xdd, 0xf5, 0xa5, 0x62, 0x69, 0x55, 0x88, 0x87, 0x5d, 0xf3, 0x5c, 0x0c,
		0xb2, 0xa1, 0x2e, 0x48, 0x0b, 0xb9, 0xa2, 0xeb, 0xe6, 0x0d, 0x59, 0xd1, 0x35, 0xcc, 0x4c, 0x6e,
		0xe2, 0x1e, 0xc6, 0xb8, 0xdf, 0xa1, 0xf2, 0x51, 0x10, 0x3a, 0x7b, 0x65, 0xc7, 0xf1, 0xb1, 0xb7,
		0xf2, 0xf8, 0x8f, 0xc0, 0x70, 0x7b, 0x57, 0xec, 0x38, 0xfc, 0xd8, 0x5b, 0x79, 0xf8, 0x2d, 0x18,
		0x6a, 0xef, 0x87, 0x6f, 0xe3, 0xd9, 0xaf, 0xc5, 0x61, 0xac, 0x0b, 0x89, 0x78, 0xd9, 0x6d, 0xfd,
		0x7c, 0xf8, 0x38, 0xd3, 0x0f, 0xdb, 0xc2, 0x32, 0x02, 0x56, 0xf0, 0x66, 0x43, 0xeb, 0xb5, 0x56,
		0xc5, 0xc2, 0xa2, 0xe1, 0xed, 0xd8, 0x72, 0xe7, 0x7e, 0x3e, 0x1a, 0x4c, 0x80, 0xd8, 0x34, 0x6d,
		0xcd, 0xd1, 0xae, 0xd3, 0xbb, 0xb9, 0x77, 0x27, 0xa0, 0x53, 0x42, 0x92, 0xee, 0x19, 0xa4, 0xae,
		0x74, 0xec, 0xd1, 0xec, 0x4c, 0xd0, 0x7e, 0x5e, 0x35, 0x5b, 0xb4, 0x75, 0xf0, 0x55, 0x9a, 0xf2,
		0x31, 0xba, 0xea, 0xb6, 0xd6, 0xe0, 0x6e, 0x91, 0xa3, 0xef, 0x25, 0x4a, 0xbd, 0x6e, 0x51, 0x56,
		0x1e, 0x39, 0x6b, 0xf0, 0x13, 0xe7, 0x20, 0xed, 0x8b, 0x88, 0xd5, 0x8f, 0xea, 0x87, 0x5d, 0x82,
		0xdd, 0xc4, 0xe2, 0x28, 0x1b, 0x72, 0xd3, 0x6c, 0x39, 0xb8, 0x9a, 0xc7, 0x71, 0x35, 0x9d, 0xff,
		0x1d, 0x16, 0xeb, 0x8e, 0x87, 0x82, 0x69, 0x48, 0xeb, 0x26, 0xfa, 0x86, 0x12, 0xf1, 0xe7, 0xa2,
		0xd3, 0x11, 0x6f, 0x0b, 0x85, 0x45, 0x97, 0x7e, 0xe2, 0xd9, 0x18, 0xa4, 0xbd, 0x0f, 0x4c, 0xec,
		0x64, 0x53, 0x71, 0x36, 0x19, 0x93, 0x54, 0x31, 0xce, 0x52, 0x3d, 0x89, 0xed, 0xcd, 0x60, 0x66,
		0xe7, 0x2b, 0x68, 0x4b, 0x9d, 0x28, 0x55, 0x36, 0x3f, 0x98, 0x8d, 0x06, 0x5a, 0xd5, 0x76, 0x6d,
		0x89, 0x0d, 0xd3, 0xb1, 0x14, 0x4d, 0x6f, 0xdb, 0x4a, 0xb2, 0xad, 0x63, 0x70, 0xd0, 0x03, 0x55,
		0x89, 0xa3, 0xe0, 0xe0, 0x51, 0x0d, 0x48, 0xe8, 0x93, 0x43, 0xa6, 0xf8, 0x24, 0x0e, 0x06, 0x66,
		0xa3, 0x53, 0xee, 0xa2, 0xd0, 0x31, 0x03, 0xda, 0x8f, 0xc7, 0x9e, 0x86, 0xa0, 0xcd, 0x7c, 0x23,
		0x9e, 0x98, 0x5f, 0x29, 0xde, 0x8e, 0x4f, 0xcc, 0x73, 0xdc, 0x8a, 0xa7, 0xef, 0x2a, 0xa9, 0xe9,
		0x44, 0xa5, 0x5a, 0xc1, 0xeb, 0x87, 0xe0, 0x4c, 0x5d, 0x73, 0x36, 0x5b, 0x1b, 0x05, 0x3c, 0x61,
		0xb2, 0x6e, 0xd6, 0xcd, 0xe0, 0x75, 0x8e, 0x7e, 0xb1, 0x0f, 0xf6, 0x9f, 0xfb, 0x42, 0x97, 0xf1,
		0x57, 0x27, 0x22, 0x9f, 0xf3, 0xa6, 0x2f, 0xc3, 0x98, 0x4b, 0x2c, 0xb3, 0x57, 0x0d, 0x3e, 0x29,
		0x88, 0x3d, 0x87, 0x7c, 0xe9, 0xcd, 0x3f, 0xf3, 0xea, 0xf5, 0x3e, 0xd8, 0xd7, 0x06, 0xe6, 0xe1,
		0x43, 0xac, 0x08, 0xf8, 0xaf, 0x5c, 0xf8, 0x05, 0x18, 0xda, 0x0b, 0xec, 0xd7, 0x2e, 0xec, 0x11,
		0x18, 0x61, 0x30, 0xb5, 0x65, 0x3b, 0x66, 0x83, 0xc6, 0x5d, 0x04, 0xf0, 0x37, 0x0c, 0x98, 0x99,
		0x9e, 0x81, 0x71, 0x0a, 0x64, 0x41, 0x1c, 0x46, 0x47, 0x5f, 0x34, 0xa4, 0xdf, 0x3e, 0xc3, 0x42,
		0x21, 0x6c, 0xae, 0x3a, 0x71, 0x30, 0x65, 0x71, 0x58, 0xd5, 0x75, 0xb1, 0xe7, 0x2b, 0x9a, 0xf4,
		0xd2, 0x1d, 0x2e, 0xf8, 0x63, 0x70, 0xa0, 0x8b, 0xad, 0xfb, 0x60, 0xf0, 0xb2, 0xcb, 0xe0, 0xbd,
		0x30, 0xee, 0x31, 0xf0, 0x6c, 0xd6, 0x07, 0xfa, 0x2b, 0x2e, 0xfa, 0x51, 0x18, 0xc5, 0x99, 0x7f,
		0xc3, 0xb4, 0xdd, 0x39, 0xbb, 0x0f, 0xe8, 0x2b, 0x2e, 0xf4, 0x2c, 0xa4, 0x6b, 0x38, 0x26, 0xf6,
		0x81, 0x78, 0xd5, 0x45, 0x9c, 0x87, 0x5c, 0xdd, 0x74, 0xcb, 0x49, 0x34, 0xea, 0xb5, 0x00, 0xd5,
		0x34, 0x9b, 0x2d, 0x9d, 0xd6, 0x9a, 0x68, 0xd4, 0x57, 0x03, 0xd4, 0x1e, 0xcc, 0xf1, 0x35, 0x17,
		0x75, 0x8e, 0x3e, 0x9a, 0xe8, 0x5b, 0xa6, 0xd1, 0xcf, 0x51, 0x5f, 0x77, 0x41, 0xef, 0x81, 0x4c,
		0xbf, 0xb6, 0xfb, 0xe6, 0x1d, 0x3f, 0x5c, 0xbd, 0xac, 0xa3, 0x0f, 0x7f, 0xd1, 0xc0, 0x6f, 0x05,
		0x02, 0x3a, 0xc4, 0x76, 0xf0, 0x8e, 0xd0, 0x07, 0xe8, 0xdb, 0x81, 0x2d, 0x36, 0x88, 0xa1, 0x6e,
		0xf6, 0x87, 0xfa, 0xce, 0x1d, 0x3f, 0x13, 0x1b, 0x8a, 0x85, 0x97, 0x02, 0xbd, 0x2f, 0x13, 0x7e,
		0x37, 0x50, 0xad, 0x65, 0xec, 0x05, 0x78, 0x3b, 0x08, 0x64, 0x9c, 0xba, 0x69, 0x03, 0xda, 0x0b,
		0xfa, 0x7b, 0x81, 0x13, 0x6c, 0xbc, 0x34, 0xf4, 0x03, 0x79, 0xdd, 0x85, 0xcc, 0xc0, 0xc1, 0xae,
		0x95, 0xaa, 0x0f, 0x16, 0xdf, 0x0f, 0xd2, 0x67, 0xaf, 0xd0, 0x1f, 0x04, 0xea, 0xb6, 0x0c, 0x5b,
		0xa9, 0xed, 0x4d, 0xdd, 0x1f, 0xba, 0xe8, 0xf7, 0xc3, 0x7e, 0x17, 0xbd, 0x37, 0x63, 0xbf, 0xe1,
		0xe2, 0x8b, 0x30, 0xe1, 0xeb, 0xee, 0xb5, 0x63, 0x5b, 0xa6, 0xb7, 0x95, 0x68, 0x1e, 0x6f, 0xba,
		0x3c, 0x3e, 0x00, 0x92, 0xc7, 0xa3, 0x65, 0xe0, 0x28, 0x65, 0xd6, 0x0d, 0xf4, 0x40, 0xb5, 0x0f,
		0x0e, 0x3f, 0x72, 0x39, 0x5c, 0x02, 0xc1, 0xef, 0x4b, 0xb2, 0xd6, 0x68, 0x9a, 0x38, 0x36, 0xf4,
		0x46, 0xfe, 0xd8, 0x45, 0x5e, 0x84, 0x61, 0xb6, 0xdf, 0xaf, 0xcf, 0x7f, 0x12, 0xe4, 0x0f, 0x76,
		0x4c, 0x1c, 0x49, 0xfa, 0x49, 0xf0, 0x9f, 0xba, 0xa0, 0x69, 0x18, 0xe9, 0x28, 0xf0, 0x62, 0xd4,
		0x0b, 0xb9, 0xf4, 0xf1, 0x6d, 0x8e, 0xbd, 0x4c, 0x55, 0x6c, 0x2f, 0xcf, 0xd1, 0xe0, 0x67, 0xb6,
		0x3d, 0xfb, 0x0c, 0xb5, 0x55, 0xe7, 0x68, 0xe4, 0x27, 0x5c, 0xe4, 0x24, 0x24, 0x69, 0x71, 0x8e,
		0x06, 0x7c, 0x72, 0xdb, 0x33, 0x4c, 0xda, 0xab, 0xcd, 0xd1, 0xa0, 0x67, 0x03, 0x90, 0x57, 0x9a,
		0xa3, 0x41, 0x9f, 0x0a, 0x40, 0xfd, 0x5b, 0xe2, 0x17, 0x9f, 0x49, 0x32, 0x10, 0x7d, 0x08, 0xe4,
		0x85, 0x39, 0x1a, 0xf3, 0xe9, 0x6d, 0xaf, 0x41, 0xa5, 0xfa, 0xb4, 0xda, 0x73, 0xdb, 0x5e, 0x54,
		0x65, 0x43, 0x65, 0x39, 0x1a, 0xf7, 0x39, 0x17, 0x87, 0xd2, 0xb9, 0x55, 0x39, 0x1a, 0xf3, 0xf9,
		0xc0, 0x0c, 0x5e, 0x51, 0x8e, 0x06, 0x3d, 0xbf, 0xed, 0x55, 0xf2, 0x8c, 0x9f, 0xed, 0xd1, 0xa8,
		0x2f, 0x04, 0x6a, 0x85, 0xaa, 0x44, 0x34, 0xee, 0x85, 0x20, 0x76, 0x3b, 0x2b, 0x72, 0x34, 0xf8,
		0x8b, 0x81, 0xf5, 0x59, 0x72, 0x46, 0x23, 0xbe, 0x14, 0x1c, 0xd7, 0x59, 0x11, 0xa3, 0xc1, 0x5f,
		0xde, 0xf6, 0xc6, 0x4e, 0x71, 0x67, 0x41, 0x8c, 0x86, 0xbf, 0xb8, 0xed, 0xf5, 0x82, 0xfd, 0xdd,
		0xeb, 0x61, 0x34, 0x8b, 0x97, 0xb6, 0xbd, 0x49, 0x6e, 0xbc, 0x5b, 0x39, 0x8c, 0x66, 0xf0, 0xf2,
		0xb6, 0xd7, 0x70, 0x21, 0xa8, 0x69, 0xd1, 0xb0, 0x57, 0x82, 0xe0, 0x73, 0x4b, 0x5a, 0x34, 0xe6,
		0xd5, 0x6d, 0xaf, 0x5b, 0xa6, 0x8d, 0x96, 0xae, 0x53, 0xdf, 0x8a, 0xbd, 0x7f, 0xef, 0x91, 0xfe,
		0x7e, 0x8f, 0x43, 0x0a, 0x98, 0x4d, 0x8d, 0x0d, 0xd4, 0x27, 0x82, 0xfe, 0x1f, 0xf7, 0xbc, 0xf8,
		0x06, 0x3e, 0x4e, 0xd3, 0x07, 0xa4, 0x28, 0xd0, 0x3f, 0xef, 0xf1, 0x69, 0xdc, 0x07, 0xb1, 0x19,
		0x3c, 0x02, 0x74, 0xc7, 0x05, 0x9d, 0x85, 0x41, 0xfa, 0xa3, 0x96, 0xa3, 0xd4, 0xa3, 0x10, 0xff,
		0x72, 0x11, 0xa8, 0x7e, 0xc3, 0xc4, 0x7b, 0xb5, 0x52, 0xb7, 0xa3, 0x20, 0xff, 0x0e, 0x20, 0xaa,
		0x62, 0x3b, 0xfd, 0x28, 0xf3, 0x9f, 0x40, 0x2e, 0x0a, 0xb9, 0x46, 0xb6, 0xa2, 0x10, 0x77, 0x5d,
		0xc4, 0x14, 0x64, 0x28, 0x82, 0x5d, 0x46, 0xa2, 0x30, 0xff, 0xe5, 0x98, 0xe2, 0xb1, 0xee, 0xb7,
		0x4c, 0x98, 0x37, 0xe7, 0x4d, 0x7e, 0xbf, 0x84, 0x3f, 0xc4, 0x40, 0x70, 0xcc, 0xa6, 0xbd, 0xe5,
		0xb4, 0xac, 0xeb, 0x5b, 0xee, 0x8d, 0x30, 0x45, 0x2b, 0x96, 0x3d, 0xb1, 0xb7, 0x7b, 0x64, 0x7e,
		0x16, 0xa0, 0x42, 0x39, 0x55, 0x28, 0x27, 0xbc, 0x1f, 0x27, 0xf0, 0x8b, 0xbd, 0x1b, 0x65, 0xa7,
		0x72, 0x05, 0xc6, 0xb1, 0xc0, 0xf6, 0xc5, 0x09, 0x48, 0x22, 0x4d, 0x8d, 0x3d, 0x73, 0x85, 0xf6,
		0x28, 0x2c, 0x9f, 0x87, 0x14, 0x27, 0xca, 0x06, 0xf8, 0x04, 0xfd, 0x29, 0xc4, 0x47, 0x24, 0x18,
		0x0d, 0x3b, 0xc3, 0x5b, 0xe6, 0x44, 0x2e, 0x82, 0xd1, 0x14, 0xd3, 0x77, 0xff, 0x78, 0x38, 0xf6,
		0xc6, 0x9f, 0x0e, 0xc7, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x04, 0xf9, 0x4c, 0xa6, 0x22,
		0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *TopsyTurvy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tests.TopsyTurvy{")
	if this.Top != nil {
		s = append(s, "Top: "+fmt.Sprintf("%#v", this.Top)+",\n")
	}
	if this.Turf != nil {
		s = append(s, "Turf: "+fmt.Sprintf("%#v", this.Turf)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Topsy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tests.Topsy{")
	if this.Top != nil {
		s = append(s, "Top: "+valueToGoStringTopsyturvy(this.Top, "int64")+",\n")
	}
	if this.Turf != nil {
		s = append(s, "Turf: "+valueToGoStringTopsyturvy(this.Turf, "int64")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Turvy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tests.Turvy{")
	if this.Turf != nil {
		s = append(s, "Turf: "+valueToGoStringTopsyturvy(this.Turf, "int64")+",\n")
	}
	if this.Top != nil {
		s = append(s, "Top: "+valueToGoStringTopsyturvy(this.Top, "int64")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTopsyturvy(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringTopsyturvy(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}

var fileDescriptorTopsyturvy = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x28, 0xc9, 0x2f, 0x28,
	0xae, 0x2c, 0x29, 0x2d, 0x2a, 0xab, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0x49,
	0x2d, 0x2e, 0x29, 0x96, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5,
	0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0xcb, 0x26, 0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e, 0x98, 0x05,
	0xd1, 0xa5, 0xe4, 0xcc, 0xc5, 0x15, 0x02, 0x32, 0x29, 0x04, 0x64, 0x92, 0x90, 0x24, 0x17, 0x33,
	0x90, 0x27, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x6d, 0xc4, 0xa3, 0x07, 0x36, 0x51, 0x0f, 0x2c, 0x2f,
	0x24, 0xc5, 0xc5, 0x02, 0x54, 0x93, 0x26, 0xc1, 0x84, 0x2a, 0x07, 0xd2, 0xa6, 0xa4, 0xc4, 0xc5,
	0x0a, 0x51, 0xc4, 0x8d, 0xd0, 0xcf, 0x2c, 0xc4, 0x83, 0xa4, 0x83, 0x19, 0xac, 0x06, 0x6c, 0x07,
	0x4c, 0x18, 0xa2, 0x08, 0xaa, 0x03, 0xac, 0xc6, 0x89, 0xe3, 0xc3, 0x43, 0x39, 0xc6, 0x0d, 0x8f,
	0xe4, 0x18, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1c, 0xcf, 0x88, 0xe3, 0xdf, 0x00, 0x00, 0x00,
}
