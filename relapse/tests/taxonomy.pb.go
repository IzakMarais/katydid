// Code generated by protoc-gen-gogo.
// source: taxonomy.proto
// DO NOT EDIT!

/*
Package tests is a generated protocol buffer package.

It is generated from these files:
	taxonomy.proto

It has these top-level messages:
	TaxonomyDatabase
	Entry
	Records
	Reference
	Link
	GeneticCode
	CommentAndReference
	GenomeInformation
	ExternalInformationResources
*/
package tests

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GenomeInformationType int32

const (
	GenomeInformationType_NONE  GenomeInformationType = 1
	GenomeInformationType_BLAST GenomeInformationType = 2
)

var GenomeInformationType_name = map[int32]string{
	1: "NONE",
	2: "BLAST",
}
var GenomeInformationType_value = map[string]int32{
	"NONE":  1,
	"BLAST": 2,
}

func (x GenomeInformationType) Enum() *GenomeInformationType {
	p := new(GenomeInformationType)
	*p = x
	return p
}
func (x GenomeInformationType) String() string {
	return proto.EnumName(GenomeInformationType_name, int32(x))
}
func (x *GenomeInformationType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GenomeInformationType_value, data, "GenomeInformationType")
	if err != nil {
		return err
	}
	*x = GenomeInformationType(value)
	return nil
}
func (GenomeInformationType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTaxonomy, []int{0} }

type Subject int32

const (
	Subject_Unknown          Subject = 1
	Subject_OrganismSpecific Subject = 2
)

var Subject_name = map[int32]string{
	1: "Unknown",
	2: "OrganismSpecific",
}
var Subject_value = map[string]int32{
	"Unknown":          1,
	"OrganismSpecific": 2,
}

func (x Subject) Enum() *Subject {
	p := new(Subject)
	*p = x
	return p
}
func (x Subject) String() string {
	return proto.EnumName(Subject_name, int32(x))
}
func (x *Subject) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Subject_value, data, "Subject")
	if err != nil {
		return err
	}
	*x = Subject(value)
	return nil
}
func (Subject) EnumDescriptor() ([]byte, []int) { return fileDescriptorTaxonomy, []int{1} }

type TaxonomyDatabase struct {
	Entries          []*Entry `protobuf:"bytes,1,rep,name=Entries" json:"Entries,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *TaxonomyDatabase) Reset()                    { *m = TaxonomyDatabase{} }
func (m *TaxonomyDatabase) String() string            { return proto.CompactTextString(m) }
func (*TaxonomyDatabase) ProtoMessage()               {}
func (*TaxonomyDatabase) Descriptor() ([]byte, []int) { return fileDescriptorTaxonomy, []int{0} }

func (m *TaxonomyDatabase) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type Entry struct {
	TaxonomyId                   *string                         `protobuf:"bytes,1,opt,name=TaxonomyId" json:"TaxonomyId,omitempty"`
	InheritedBlastName           *string                         `protobuf:"bytes,2,opt,name=InheritedBlastName" json:"InheritedBlastName,omitempty"`
	Rank                         *string                         `protobuf:"bytes,3,opt,name=Rank" json:"Rank,omitempty"`
	GeneticCode                  *GeneticCode                    `protobuf:"bytes,4,opt,name=GeneticCode" json:"GeneticCode,omitempty"`
	OtherNames                   []string                        `protobuf:"bytes,5,rep,name=OtherNames" json:"OtherNames,omitempty"`
	Synonym                      *string                         `protobuf:"bytes,6,opt,name=Synonym" json:"Synonym,omitempty"`
	Lineage                      []*Link                         `protobuf:"bytes,7,rep,name=Lineage" json:"Lineage,omitempty"`
	CommentsAndReferences        []*CommentAndReference          `protobuf:"bytes,8,rep,name=CommentsAndReferences" json:"CommentsAndReferences,omitempty"`
	GenomeInformation            *GenomeInformation              `protobuf:"bytes,9,opt,name=GenomeInformation" json:"GenomeInformation,omitempty"`
	ExternalInformationResources []*ExternalInformationResources `protobuf:"bytes,10,rep,name=ExternalInformationResources" json:"ExternalInformationResources,omitempty"`
	Records                      []*Records                      `protobuf:"bytes,11,rep,name=Records" json:"Records,omitempty"`
	XXX_unrecognized             []byte                          `json:"-"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptorTaxonomy, []int{1} }

func (m *Entry) GetTaxonomyId() string {
	if m != nil && m.TaxonomyId != nil {
		return *m.TaxonomyId
	}
	return ""
}

func (m *Entry) GetInheritedBlastName() string {
	if m != nil && m.InheritedBlastName != nil {
		return *m.InheritedBlastName
	}
	return ""
}

func (m *Entry) GetRank() string {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return ""
}

func (m *Entry) GetGeneticCode() *GeneticCode {
	if m != nil {
		return m.GeneticCode
	}
	return nil
}

func (m *Entry) GetOtherNames() []string {
	if m != nil {
		return m.OtherNames
	}
	return nil
}

func (m *Entry) GetSynonym() string {
	if m != nil && m.Synonym != nil {
		return *m.Synonym
	}
	return ""
}

func (m *Entry) GetLineage() []*Link {
	if m != nil {
		return m.Lineage
	}
	return nil
}

func (m *Entry) GetCommentsAndReferences() []*CommentAndReference {
	if m != nil {
		return m.CommentsAndReferences
	}
	return nil
}

func (m *Entry) GetGenomeInformation() *GenomeInformation {
	if m != nil {
		return m.GenomeInformation
	}
	return nil
}

func (m *Entry) GetExternalInformationResources() []*ExternalInformationResources {
	if m != nil {
		return m.ExternalInformationResources
	}
	return nil
}

func (m *Entry) GetRecords() []*Records {
	if m != nil {
		return m.Records
	}
	return nil
}

type Records struct {
	DatabaseName     *string      `protobuf:"bytes,1,opt,name=DatabaseName" json:"DatabaseName,omitempty"`
	References       []*Reference `protobuf:"bytes,2,rep,name=References" json:"References,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Records) Reset()                    { *m = Records{} }
func (m *Records) String() string            { return proto.CompactTextString(m) }
func (*Records) ProtoMessage()               {}
func (*Records) Descriptor() ([]byte, []int) { return fileDescriptorTaxonomy, []int{2} }

func (m *Records) GetDatabaseName() string {
	if m != nil && m.DatabaseName != nil {
		return *m.DatabaseName
	}
	return ""
}

func (m *Records) GetReferences() []*Reference {
	if m != nil {
		return m.References
	}
	return nil
}

type Reference struct {
	Name             *Link   `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Accession        *string `protobuf:"bytes,2,opt,name=Accession" json:"Accession,omitempty"`
	GI               *string `protobuf:"bytes,3,opt,name=GI" json:"GI,omitempty"`
	Links            []*Link `protobuf:"bytes,4,rep,name=Links" json:"Links,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Reference) Reset()                    { *m = Reference{} }
func (m *Reference) String() string            { return proto.CompactTextString(m) }
func (*Reference) ProtoMessage()               {}
func (*Reference) Descriptor() ([]byte, []int) { return fileDescriptorTaxonomy, []int{3} }

func (m *Reference) GetName() *Link {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Reference) GetAccession() string {
	if m != nil && m.Accession != nil {
		return *m.Accession
	}
	return ""
}

func (m *Reference) GetGI() string {
	if m != nil && m.GI != nil {
		return *m.GI
	}
	return ""
}

func (m *Reference) GetLinks() []*Link {
	if m != nil {
		return m.Links
	}
	return nil
}

type Link struct {
	Name             *string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Link             *string `protobuf:"bytes,2,opt,name=Link" json:"Link,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Link) Reset()                    { *m = Link{} }
func (m *Link) String() string            { return proto.CompactTextString(m) }
func (*Link) ProtoMessage()               {}
func (*Link) Descriptor() ([]byte, []int) { return fileDescriptorTaxonomy, []int{4} }

func (m *Link) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Link) GetLink() string {
	if m != nil && m.Link != nil {
		return *m.Link
	}
	return ""
}

type GeneticCode struct {
	TranslationTable *int32  `protobuf:"varint,1,opt,name=TranslationTable" json:"TranslationTable,omitempty"`
	Type             *string `protobuf:"bytes,2,opt,name=Type" json:"Type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GeneticCode) Reset()                    { *m = GeneticCode{} }
func (m *GeneticCode) String() string            { return proto.CompactTextString(m) }
func (*GeneticCode) ProtoMessage()               {}
func (*GeneticCode) Descriptor() ([]byte, []int) { return fileDescriptorTaxonomy, []int{5} }

func (m *GeneticCode) GetTranslationTable() int32 {
	if m != nil && m.TranslationTable != nil {
		return *m.TranslationTable
	}
	return 0
}

func (m *GeneticCode) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

type CommentAndReference struct {
	Heading          *string `protobuf:"bytes,1,opt,name=Heading" json:"Heading,omitempty"`
	Content          *string `protobuf:"bytes,2,opt,name=Content" json:"Content,omitempty"`
	Reference        *Link   `protobuf:"bytes,3,opt,name=Reference" json:"Reference,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CommentAndReference) Reset()                    { *m = CommentAndReference{} }
func (m *CommentAndReference) String() string            { return proto.CompactTextString(m) }
func (*CommentAndReference) ProtoMessage()               {}
func (*CommentAndReference) Descriptor() ([]byte, []int) { return fileDescriptorTaxonomy, []int{6} }

func (m *CommentAndReference) GetHeading() string {
	if m != nil && m.Heading != nil {
		return *m.Heading
	}
	return ""
}

func (m *CommentAndReference) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *CommentAndReference) GetReference() *Link {
	if m != nil {
		return m.Reference
	}
	return nil
}

type GenomeInformation struct {
	Type             *GenomeInformationType `protobuf:"varint,1,opt,name=Type,enum=tests.GenomeInformationType" json:"Type,omitempty"`
	Programs         []*Link                `protobuf:"bytes,2,rep,name=Programs" json:"Programs,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *GenomeInformation) Reset()                    { *m = GenomeInformation{} }
func (m *GenomeInformation) String() string            { return proto.CompactTextString(m) }
func (*GenomeInformation) ProtoMessage()               {}
func (*GenomeInformation) Descriptor() ([]byte, []int) { return fileDescriptorTaxonomy, []int{7} }

func (m *GenomeInformation) GetType() GenomeInformationType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return GenomeInformationType_NONE
}

func (m *GenomeInformation) GetPrograms() []*Link {
	if m != nil {
		return m.Programs
	}
	return nil
}

type ExternalInformationResources struct {
	LinkOut          *Link    `protobuf:"bytes,1,opt,name=LinkOut" json:"LinkOut,omitempty"`
	Subject          *Subject `protobuf:"varint,2,opt,name=Subject,enum=tests.Subject" json:"Subject,omitempty"`
	LinkOutProvider  *Link    `protobuf:"bytes,3,opt,name=LinkOutProvider" json:"LinkOutProvider,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ExternalInformationResources) Reset()         { *m = ExternalInformationResources{} }
func (m *ExternalInformationResources) String() string { return proto.CompactTextString(m) }
func (*ExternalInformationResources) ProtoMessage()    {}
func (*ExternalInformationResources) Descriptor() ([]byte, []int) {
	return fileDescriptorTaxonomy, []int{8}
}

func (m *ExternalInformationResources) GetLinkOut() *Link {
	if m != nil {
		return m.LinkOut
	}
	return nil
}

func (m *ExternalInformationResources) GetSubject() Subject {
	if m != nil && m.Subject != nil {
		return *m.Subject
	}
	return Subject_Unknown
}

func (m *ExternalInformationResources) GetLinkOutProvider() *Link {
	if m != nil {
		return m.LinkOutProvider
	}
	return nil
}

func init() {
	proto.RegisterType((*TaxonomyDatabase)(nil), "tests.TaxonomyDatabase")
	proto.RegisterType((*Entry)(nil), "tests.Entry")
	proto.RegisterType((*Records)(nil), "tests.Records")
	proto.RegisterType((*Reference)(nil), "tests.Reference")
	proto.RegisterType((*Link)(nil), "tests.Link")
	proto.RegisterType((*GeneticCode)(nil), "tests.GeneticCode")
	proto.RegisterType((*CommentAndReference)(nil), "tests.CommentAndReference")
	proto.RegisterType((*GenomeInformation)(nil), "tests.GenomeInformation")
	proto.RegisterType((*ExternalInformationResources)(nil), "tests.ExternalInformationResources")
	proto.RegisterEnum("tests.GenomeInformationType", GenomeInformationType_name, GenomeInformationType_value)
	proto.RegisterEnum("tests.Subject", Subject_name, Subject_value)
}
func (this *TaxonomyDatabase) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return TaxonomyDescription()
}
func TaxonomyDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 3935 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x5a, 0x5b, 0x6c, 0x23, 0xd7,
		0x79, 0x0e, 0x6f, 0x12, 0xf9, 0x93, 0xa2, 0x46, 0x47, 0xf2, 0x9a, 0x2b, 0xaf, 0xf7, 0x42, 0xdb,
		0xb1, 0xbc, 0x76, 0xb4, 0xc6, 0x7a, 0x77, 0xbd, 0xe6, 0x36, 0x71, 0x29, 0x89, 0x2b, 0xd3, 0x90,
		0x44, 0x76, 0x28, 0x25, 0x76, 0xf2, 0x30, 0x38, 0x9a, 0x39, 0xa4, 0x66, 0x77, 0x78, 0x86, 0x9d,
		0x19, 0xee, 0xae, 0x0c, 0x14, 0x70, 0xe0, 0x5e, 0x10, 0x04, 0x4d, 0xaf, 0x40, 0x13, 0xc7, 0x49,
		0xdc, 0x00, 0x8d, 0xdb, 0xf4, 0x92, 0xa6, 0xb7, 0x87, 0x3e, 0xf5, 0x25, 0xed, 0x5b, 0x81, 0xbc,
		0xf7, 0x25, 0x80, 0x81, 0xde, 0xd2, 0xd6, 0x6d, 0x0d, 0xb4, 0x80, 0x5f, 0x8a, 0x73, 0x1b, 0xce,
		0x90, 0x94, 0x86, 0x1b, 0x20, 0x49, 0x9f, 0xc8, 0xf3, 0x9f, 0xff, 0xfb, 0xe6, 0x9c, 0xff, 0xfc,
		0xe7, 0xff, 0xff, 0x39, 0x73, 0xe0, 0xf3, 0xd7, 0xe0, 0x62, 0xcf, 0x75, 0x7b, 0x0e, 0xb9, 0x32,
		0xf0, 0xdc, 0xc0, 0x3d, 0x1c, 0x76, 0xaf, 0x58, 0xc4, 0x37, 0x3d, 0x7b, 0x10, 0xb8, 0xde, 0x3a,
		0x97, 0xa1, 0x45, 0xa1, 0xb1, 0xae, 0x34, 0xaa, 0xbb, 0xb0, 0x74, 0xdb, 0x76, 0xc8, 0x56, 0xa8,
		0xd8, 0x21, 0x01, 0xba, 0x09, 0xd9, 0xae, 0xed, 0x90, 0x4a, 0xea, 0x62, 0x66, 0xad, 0x78, 0xf5,
		0xc9, 0xf5, 0x31, 0xd0, 0x7a, 0x1c, 0xd1, 0x66, 0x62, 0x9d, 0x23, 0xaa, 0xef, 0x67, 0x61, 0x79,
		0x4a, 0x2f, 0x42, 0x90, 0xa5, 0xb8, 0xcf, 0x18, 0x53, 0x6b, 0x05, 0x9d, 0xff, 0x47, 0x15, 0x98,
		0x1f, 0x60, 0xf3, 0x2e, 0xee, 0x91, 0x4a, 0x9a, 0x8b, 0x55, 0x13, 0x9d, 0x07, 0xb0, 0xc8, 0x80,
		0x50, 0x8b, 0x50, 0xf3, 0xb8, 0x92, 0xb9, 0x98, 0x59, 0x2b, 0xe8, 0x11, 0x09, 0x7a, 0x16, 0x96,
		0x06, 0xc3, 0x43, 0xc7, 0x36, 0x8d, 0x88, 0x1a, 0x5c, 0xcc, 0xac, 0xe5, 0x74, 0x4d, 0x74, 0x6c,
		0x8d, 0x94, 0x9f, 0x86, 0xc5, 0xfb, 0x04, 0xdf, 0x8d, 0xaa, 0x16, 0xb9, 0x6a, 0x99, 0x89, 0x23,
		0x8a, 0x9b, 0x50, 0xea, 0x13, 0xdf, 0xc7, 0x3d, 0x62, 0x04, 0xc7, 0x03, 0x52, 0xc9, 0xf2, 0xd9,
		0x5f, 0x9c, 0x98, 0xfd, 0xf8, 0xcc, 0x8b, 0x12, 0xb5, 0x7f, 0x3c, 0x20, 0xa8, 0x0e, 0x05, 0x42,
		0x87, 0x7d, 0xc1, 0x90, 0x3b, 0xc1, 0x7e, 0x0d, 0x3a, 0xec, 0x8f, 0xb3, 0xe4, 0x19, 0x4c, 0x52,
		0xcc, 0xfb, 0xc4, 0xbb, 0x67, 0x9b, 0xa4, 0x32, 0xc7, 0x09, 0x9e, 0x9e, 0x20, 0xe8, 0x88, 0xfe,
		0x71, 0x0e, 0x85, 0x43, 0x9b, 0x50, 0x20, 0x0f, 0x02, 0x42, 0x7d, 0xdb, 0xa5, 0x95, 0x79, 0x4e,
		0xf2, 0xd4, 0x94, 0x55, 0x24, 0x8e, 0x35, 0x4e, 0x31, 0xc2, 0xa1, 0x1b, 0x30, 0xef, 0x0e, 0x02,
		0xdb, 0xa5, 0x7e, 0x25, 0x7f, 0x31, 0xb5, 0x56, 0xbc, 0x7a, 0x6e, 0xaa, 0x23, 0xb4, 0x84, 0x8e,
		0xae, 0x94, 0x51, 0x13, 0x34, 0xdf, 0x1d, 0x7a, 0x26, 0x31, 0x4c, 0xd7, 0x22, 0x86, 0x4d, 0xbb,
		0x6e, 0xa5, 0xc0, 0x09, 0x2e, 0x4c, 0x4e, 0x84, 0x2b, 0x6e, 0xba, 0x16, 0x69, 0xd2, 0xae, 0xab,
		0x97, 0xfd, 0x58, 0x1b, 0x9d, 0x81, 0x39, 0xff, 0x98, 0x06, 0xf8, 0x41, 0xa5, 0xc4, 0x3d, 0x44,
		0xb6, 0xaa, 0xff, 0x93, 0x83, 0xc5, 0x59, 0x5c, 0xec, 0x16, 0xe4, 0xba, 0x6c, 0x96, 0x95, 0xf4,
		0xc3, 0xd8, 0x40, 0x60, 0xe2, 0x46, 0x9c, 0xfb, 0x11, 0x8d, 0x58, 0x87, 0x22, 0x25, 0x7e, 0x40,
		0x2c, 0xe1, 0x11, 0x99, 0x19, 0x7d, 0x0a, 0x04, 0x68, 0xd2, 0xa5, 0xb2, 0x3f, 0x92, 0x4b, 0xbd,
		0x06, 0x8b, 0xe1, 0x90, 0x0c, 0x0f, 0xd3, 0x9e, 0xf2, 0xcd, 0x2b, 0x49, 0x23, 0x59, 0x6f, 0x28,
		0x9c, 0xce, 0x60, 0x7a, 0x99, 0xc4, 0xda, 0x68, 0x0b, 0xc0, 0xa5, 0xc4, 0xed, 0x1a, 0x16, 0x31,
		0x9d, 0x4a, 0xfe, 0x04, 0x2b, 0xb5, 0x98, 0xca, 0x84, 0x95, 0x5c, 0x21, 0x35, 0x1d, 0xf4, 0xd2,
		0xc8, 0xd5, 0xe6, 0x4f, 0xf0, 0x94, 0x5d, 0xb1, 0xc9, 0x26, 0xbc, 0xed, 0x00, 0xca, 0x1e, 0x61,
		0x7e, 0x4f, 0x2c, 0x39, 0xb3, 0x02, 0x1f, 0xc4, 0x7a, 0xe2, 0xcc, 0x74, 0x09, 0x13, 0x13, 0x5b,
		0xf0, 0xa2, 0x4d, 0xf4, 0x04, 0x84, 0x02, 0x83, 0xbb, 0x15, 0xf0, 0x28, 0x54, 0x52, 0xc2, 0x3d,
		0xdc, 0x27, 0xab, 0x37, 0xa1, 0x1c, 0x37, 0x0f, 0x5a, 0x81, 0x9c, 0x1f, 0x60, 0x2f, 0xe0, 0x5e,
		0x98, 0xd3, 0x45, 0x03, 0x69, 0x90, 0x21, 0xd4, 0xe2, 0x51, 0x2e, 0xa7, 0xb3, 0xbf, 0xab, 0x2f,
		0xc2, 0x42, 0xec, 0xf1, 0xb3, 0x02, 0xab, 0x5f, 0x9e, 0x83, 0x95, 0x69, 0x3e, 0x37, 0xd5, 0xfd,
		0xcf, 0xc0, 0x1c, 0x1d, 0xf6, 0x0f, 0x89, 0x57, 0xc9, 0x70, 0x06, 0xd9, 0x42, 0x75, 0xc8, 0x39,
		0xf8, 0x90, 0x38, 0x95, 0xec, 0xc5, 0xd4, 0x5a, 0xf9, 0xea, 0xb3, 0x33, 0x79, 0xf5, 0xfa, 0x0e,
		0x83, 0xe8, 0x02, 0x89, 0x3e, 0x05, 0x59, 0x19, 0xe2, 0x18, 0xc3, 0xe5, 0xd9, 0x18, 0x98, 0x2f,
		0xea, 0x1c, 0x87, 0x1e, 0x83, 0x02, 0xfb, 0x15, 0xb6, 0x9d, 0xe3, 0x63, 0xce, 0x33, 0x01, 0xb3,
		0x2b, 0x5a, 0x85, 0x3c, 0x77, 0x33, 0x8b, 0xa8, 0xd4, 0x10, 0xb6, 0xd9, 0xc2, 0x58, 0xa4, 0x8b,
		0x87, 0x4e, 0x60, 0xdc, 0xc3, 0xce, 0x90, 0x70, 0x87, 0x29, 0xe8, 0x25, 0x29, 0xfc, 0x34, 0x93,
		0xa1, 0x0b, 0x50, 0x14, 0x5e, 0x69, 0x53, 0x8b, 0x3c, 0xe0, 0xd1, 0x27, 0xa7, 0x0b, 0x47, 0x6d,
		0x32, 0x09, 0x7b, 0xfc, 0x1d, 0xdf, 0xa5, 0x6a, 0x69, 0xf9, 0x23, 0x98, 0x80, 0x3f, 0xfe, 0xc5,
		0xf1, 0xc0, 0xf7, 0xf8, 0xf4, 0xe9, 0x8d, 0xfb, 0x62, 0xf5, 0xaf, 0xd2, 0x90, 0xe5, 0xfb, 0x6d,
		0x11, 0x8a, 0xfb, 0xaf, 0xb7, 0x1b, 0xc6, 0x56, 0xeb, 0x60, 0x63, 0xa7, 0xa1, 0xa5, 0x50, 0x19,
		0x80, 0x0b, 0x6e, 0xef, 0xb4, 0xea, 0xfb, 0x5a, 0x3a, 0x6c, 0x37, 0xf7, 0xf6, 0x6f, 0x5c, 0xd3,
		0x32, 0x21, 0xe0, 0x40, 0x08, 0xb2, 0x51, 0x85, 0x17, 0xae, 0x6a, 0x39, 0xa4, 0x41, 0x49, 0x10,
		0x34, 0x5f, 0x6b, 0x6c, 0xdd, 0xb8, 0xa6, 0xcd, 0xc5, 0x25, 0x2f, 0x5c, 0xd5, 0xe6, 0xd1, 0x02,
		0x14, 0xb8, 0x64, 0xa3, 0xd5, 0xda, 0xd1, 0xf2, 0x21, 0x67, 0x67, 0x5f, 0x6f, 0xee, 0x6d, 0x6b,
		0x85, 0x90, 0x73, 0x5b, 0x6f, 0x1d, 0xb4, 0x35, 0x08, 0x19, 0x76, 0x1b, 0x9d, 0x4e, 0x7d, 0xbb,
		0xa1, 0x15, 0x43, 0x8d, 0x8d, 0xd7, 0xf7, 0x1b, 0x1d, 0xad, 0x14, 0x1b, 0xd6, 0x0b, 0x57, 0xb5,
		0x85, 0xf0, 0x11, 0x8d, 0xbd, 0x83, 0x5d, 0xad, 0x8c, 0x96, 0x60, 0x41, 0x3c, 0x42, 0x0d, 0x62,
		0x71, 0x4c, 0x74, 0xe3, 0x9a, 0xa6, 0x8d, 0x06, 0x22, 0x58, 0x96, 0x62, 0x82, 0x1b, 0xd7, 0x34,
		0x54, 0xdd, 0x84, 0x1c, 0xf7, 0x2e, 0x84, 0xa0, 0xbc, 0x53, 0xdf, 0x68, 0xec, 0x18, 0xad, 0xf6,
		0x7e, 0xb3, 0xb5, 0x57, 0xdf, 0xd1, 0x52, 0x23, 0x99, 0xde, 0xf8, 0xb9, 0x83, 0xa6, 0xde, 0xd8,
		0xd2, 0xd2, 0x51, 0x59, 0xbb, 0x51, 0xdf, 0x6f, 0x6c, 0x69, 0x99, 0xaa, 0x09, 0x2b, 0xd3, 0xe2,
		0xcc, 0xd4, 0x9d, 0x11, 0x59, 0xe2, 0xf4, 0x09, 0x4b, 0xcc, 0xb9, 0x26, 0x96, 0xf8, 0x9b, 0x29,
		0x58, 0x9e, 0x12, 0x6b, 0xa7, 0x3e, 0xe4, 0x65, 0xc8, 0x09, 0x17, 0x15, 0xd9, 0xe7, 0x99, 0xa9,
		0x41, 0x9b, 0x3b, 0xec, 0x44, 0x06, 0xe2, 0xb8, 0x68, 0x06, 0xce, 0x9c, 0x90, 0x81, 0x19, 0xc5,
		0xc4, 0x20, 0xdf, 0x4a, 0x41, 0xe5, 0x24, 0xee, 0x84, 0x40, 0x91, 0x8e, 0x05, 0x8a, 0x5b, 0xe3,
		0x03, 0xb8, 0x74, 0xf2, 0x1c, 0x26, 0x46, 0xf1, 0x5e, 0x0a, 0xce, 0x4c, 0x2f, 0x54, 0xa6, 0x8e,
		0xe1, 0x53, 0x30, 0xd7, 0x27, 0xc1, 0x91, 0xab, 0x92, 0xf5, 0xc7, 0xa7, 0xa4, 0x00, 0xd6, 0x3d,
		0x6e, 0x2b, 0x89, 0x8a, 0xe6, 0x90, 0xcc, 0x49, 0xd5, 0x86, 0x18, 0xcd, 0xc4, 0x48, 0xbf, 0x90,
		0x86, 0x47, 0xa6, 0x92, 0x4f, 0x1d, 0xe8, 0xe3, 0x00, 0x36, 0x1d, 0x0c, 0x03, 0x91, 0x90, 0x45,
		0x7c, 0x2a, 0x70, 0x09, 0xdf, 0xfb, 0x2c, 0xf6, 0x0c, 0x83, 0xb0, 0x3f, 0xc3, 0xfb, 0x41, 0x88,
		0xb8, 0xc2, 0xcd, 0xd1, 0x40, 0xb3, 0x7c, 0xa0, 0xe7, 0x4f, 0x98, 0xe9, 0x44, 0xae, 0x7b, 0x1e,
		0x34, 0xd3, 0xb1, 0x09, 0x0d, 0x0c, 0x3f, 0xf0, 0x08, 0xee, 0xdb, 0xb4, 0xc7, 0x03, 0x70, 0xbe,
		0x96, 0xeb, 0x62, 0xc7, 0x27, 0xfa, 0xa2, 0xe8, 0xee, 0xa8, 0x5e, 0x86, 0xe0, 0x59, 0xc6, 0x8b,
		0x20, 0xe6, 0x62, 0x08, 0xd1, 0x1d, 0x22, 0xaa, 0x5f, 0x9c, 0x87, 0x62, 0xa4, 0xac, 0x43, 0x97,
		0xa0, 0x74, 0x07, 0xdf, 0xc3, 0x86, 0x2a, 0xd5, 0x85, 0x25, 0x8a, 0x4c, 0xd6, 0x96, 0xe5, 0xfa,
		0xf3, 0xb0, 0xc2, 0x55, 0xdc, 0x61, 0x40, 0x3c, 0xc3, 0x74, 0xb0, 0xef, 0x73, 0xa3, 0xe5, 0xb9,
		0x2a, 0x62, 0x7d, 0x2d, 0xd6, 0xb5, 0xa9, 0x7a, 0xd0, 0x75, 0x58, 0xe6, 0x88, 0xfe, 0xd0, 0x09,
		0xec, 0x81, 0x43, 0x0c, 0xf6, 0xf2, 0xe0, 0xf3, 0x40, 0x1c, 0x8e, 0x6c, 0x89, 0x69, 0xec, 0x4a,
		0x05, 0x36, 0x22, 0x1f, 0x6d, 0xc3, 0xe3, 0x1c, 0xd6, 0x23, 0x94, 0x78, 0x38, 0x20, 0x06, 0xf9,
		0xf9, 0x21, 0x76, 0x7c, 0x03, 0x53, 0xcb, 0x38, 0xc2, 0xfe, 0x51, 0x65, 0x25, 0x4a, 0x70, 0x96,
		0xe9, 0x6e, 0x4b, 0xd5, 0x06, 0xd7, 0xac, 0x53, 0xeb, 0x15, 0xec, 0x1f, 0xa1, 0x1a, 0x9c, 0xe1,
		0x44, 0x7e, 0xe0, 0xd9, 0xb4, 0x67, 0x98, 0x47, 0xc4, 0xbc, 0x6b, 0x0c, 0x83, 0xee, 0xcd, 0xca,
		0x63, 0x51, 0x06, 0x3e, 0xc8, 0x0e, 0xd7, 0xd9, 0x64, 0x2a, 0x07, 0x41, 0xf7, 0x26, 0xea, 0x40,
		0x89, 0xad, 0x47, 0xdf, 0x7e, 0x83, 0x18, 0x5d, 0xd7, 0xe3, 0xc9, 0xa5, 0x3c, 0x65, 0x73, 0x47,
		0x8c, 0xb8, 0xde, 0x92, 0x80, 0x5d, 0xd7, 0x22, 0xb5, 0x5c, 0xa7, 0xdd, 0x68, 0x6c, 0xe9, 0x45,
		0xc5, 0x72, 0xdb, 0xf5, 0x98, 0x4f, 0xf5, 0xdc, 0xd0, 0xc6, 0x45, 0xe1, 0x53, 0x3d, 0x57, 0x59,
		0xf8, 0x3a, 0x2c, 0x9b, 0xa6, 0x98, 0xb6, 0x6d, 0x1a, 0xb2, 0xca, 0xf7, 0x2b, 0x5a, 0xcc, 0x5e,
		0xa6, 0xb9, 0x2d, 0x14, 0xa4, 0x9b, 0xfb, 0xe8, 0x25, 0x78, 0x64, 0x64, 0xaf, 0x28, 0x70, 0x69,
		0x62, 0x96, 0xe3, 0xd0, 0xeb, 0xb0, 0x3c, 0x38, 0x9e, 0x04, 0xa2, 0xd8, 0x13, 0x07, 0xc7, 0xe3,
		0xb0, 0xa7, 0xf8, 0x9b, 0x9b, 0x47, 0x4c, 0x1c, 0x10, 0xab, 0xf2, 0x68, 0x54, 0x3b, 0xd2, 0x81,
		0xae, 0x80, 0x66, 0x9a, 0x06, 0xa1, 0xf8, 0xd0, 0x21, 0x06, 0xf6, 0x08, 0xc5, 0x7e, 0xe5, 0x42,
		0x54, 0xb9, 0x6c, 0x9a, 0x0d, 0xde, 0x5b, 0xe7, 0x9d, 0xe8, 0x32, 0x2c, 0xb9, 0x87, 0x77, 0x4c,
		0xe1, 0x5c, 0xc6, 0xc0, 0x23, 0x5d, 0xfb, 0x41, 0xe5, 0x49, 0x6e, 0xa6, 0x45, 0xd6, 0xc1, 0x5d,
		0xab, 0xcd, 0xc5, 0xe8, 0x19, 0xd0, 0x4c, 0xff, 0x08, 0x7b, 0x03, 0x9e, 0xdd, 0xfd, 0x01, 0x36,
		0x49, 0xe5, 0x29, 0xa1, 0x2a, 0xe4, 0x7b, 0x4a, 0x8c, 0x5e, 0x83, 0x95, 0x21, 0xb5, 0x69, 0x40,
		0xbc, 0x81, 0x47, 0x58, 0x91, 0x2e, 0x76, 0x5a, 0xe5, 0x1f, 0xe7, 0x4f, 0x28, 0xb3, 0x0f, 0xa2,
		0xda, 0x62, 0x75, 0xf5, 0xe5, 0xe1, 0xa4, 0xb0, 0x5a, 0x83, 0x52, 0x74, 0xd1, 0x51, 0x01, 0xc4,
		0xb2, 0x6b, 0x29, 0x96, 0x43, 0x37, 0x5b, 0x5b, 0x2c, 0xfb, 0x7d, 0xb6, 0xa1, 0xa5, 0x59, 0x16,
		0xde, 0x69, 0xee, 0x37, 0x0c, 0xfd, 0x60, 0x6f, 0xbf, 0xb9, 0xdb, 0xd0, 0x32, 0x97, 0x0b, 0xf9,
		0x7f, 0x9a, 0xd7, 0xde, 0x7c, 0xf3, 0xcd, 0x37, 0xd3, 0xd5, 0xef, 0xa5, 0xa1, 0x1c, 0xaf, 0x7c,
		0xd1, 0xcf, 0xc0, 0xa3, 0xea, 0x35, 0xd5, 0x27, 0x81, 0x71, 0xdf, 0xf6, 0xb8, 0x1f, 0xf6, 0xb1,
		0xa8, 0x1d, 0x43, 0x13, 0xae, 0x48, 0xad, 0x0e, 0x09, 0x3e, 0x63, 0x7b, 0xcc, 0xcb, 0xfa, 0x38,
		0x40, 0x3b, 0x70, 0x81, 0xba, 0x86, 0x1f, 0x60, 0x6a, 0x61, 0xcf, 0x32, 0x46, 0x07, 0x04, 0x06,
		0x36, 0x4d, 0xe2, 0xfb, 0xae, 0x48, 0x01, 0x21, 0xcb, 0x39, 0xea, 0x76, 0xa4, 0xf2, 0x28, 0x36,
		0xd6, 0xa5, 0xea, 0xd8, 0x72, 0x67, 0x4e, 0x5a, 0xee, 0xc7, 0xa0, 0xd0, 0xc7, 0x03, 0x83, 0xd0,
		0xc0, 0x3b, 0xe6, 0xf5, 0x5a, 0x5e, 0xcf, 0xf7, 0xf1, 0xa0, 0xc1, 0xda, 0x3f, 0xbe, 0x35, 0x88,
		0xda, 0xf1, 0x1f, 0x32, 0x50, 0x8a, 0xd6, 0x6c, 0xac, 0x04, 0x36, 0x79, 0x7c, 0x4e, 0xf1, 0xed,
		0xfb, 0xc4, 0xa9, 0x15, 0xde, 0xfa, 0x26, 0x0b, 0xdc, 0xb5, 0x39, 0x51, 0x49, 0xe9, 0x02, 0xc9,
		0x92, 0x26, 0xdb, 0xb0, 0x44, 0xd4, 0xe7, 0x79, 0x5d, 0xb6, 0xd0, 0x36, 0xcc, 0xdd, 0xf1, 0x39,
		0xf7, 0x1c, 0xe7, 0x7e, 0xf2, 0x74, 0xee, 0x57, 0x3b, 0x9c, 0xbc, 0xf0, 0x6a, 0xc7, 0xd8, 0x6b,
		0xe9, 0xbb, 0xf5, 0x1d, 0x5d, 0xc2, 0xd1, 0x59, 0xc8, 0x3a, 0xf8, 0x8d, 0xe3, 0x78, 0x88, 0xe7,
		0xa2, 0x59, 0x0d, 0x7f, 0x16, 0xb2, 0xf7, 0x09, 0xbe, 0x1b, 0x0f, 0xac, 0x5c, 0xf4, 0x63, 0x74,
		0xfd, 0x2b, 0x90, 0xe3, 0xf6, 0x42, 0x00, 0xd2, 0x62, 0xda, 0xc7, 0x50, 0x1e, 0xb2, 0x9b, 0x2d,
		0x9d, 0xb9, 0xbf, 0x06, 0x25, 0x21, 0x35, 0xda, 0xcd, 0xc6, 0x66, 0x43, 0x4b, 0x57, 0xaf, 0xc3,
		0x9c, 0x30, 0x02, 0xdb, 0x1a, 0xa1, 0x19, 0xb4, 0x8f, 0xc9, 0xa6, 0xe4, 0x48, 0xa9, 0xde, 0x83,
		0xdd, 0x8d, 0x86, 0xae, 0xa5, 0xa3, 0xcb, 0xeb, 0x43, 0x29, 0x5a, 0xae, 0xfd, 0x64, 0x7c, 0xea,
		0xaf, 0x53, 0x50, 0x8c, 0x94, 0x5f, 0x2c, 0xf1, 0x63, 0xc7, 0x71, 0xef, 0x1b, 0xd8, 0xb1, 0xb1,
		0x2f, 0x9d, 0x02, 0xb8, 0xa8, 0xce, 0x24, 0xb3, 0x2e, 0xda, 0x4f, 0x64, 0xf0, 0x5f, 0x4f, 0x81,
		0x36, 0x5e, 0xba, 0x8d, 0x0d, 0x30, 0xf5, 0x53, 0x1d, 0xe0, 0x3b, 0x29, 0x28, 0xc7, 0xeb, 0xb5,
		0xb1, 0xe1, 0x5d, 0xfa, 0xa9, 0x0e, 0xef, 0xab, 0x29, 0x58, 0x88, 0x55, 0x69, 0xff, 0xaf, 0x46,
		0xf7, 0x76, 0x06, 0x96, 0xa7, 0xe0, 0x50, 0x5d, 0x96, 0xb3, 0xa2, 0xc2, 0xfe, 0xc4, 0x2c, 0xcf,
		0x5a, 0x67, 0xd9, 0xb2, 0x8d, 0xbd, 0x40, 0x56, 0xbf, 0xcf, 0x80, 0x66, 0x5b, 0x84, 0x06, 0x76,
		0xd7, 0x26, 0x9e, 0x7c, 0x05, 0x17, 0x35, 0xee, 0xe2, 0x48, 0x2e, 0xde, 0xc2, 0x9f, 0x03, 0x34,
		0x70, 0x7d, 0x3b, 0xb0, 0xef, 0x11, 0xc3, 0xa6, 0xea, 0x7d, 0x9d, 0xd5, 0xbc, 0x59, 0x5d, 0x53,
		0x3d, 0x4d, 0x1a, 0x84, 0xda, 0x94, 0xf4, 0xf0, 0x98, 0x36, 0x8b, 0x7d, 0x19, 0x5d, 0x53, 0x3d,
		0xa1, 0xf6, 0x25, 0x28, 0x59, 0xee, 0x90, 0x95, 0x0f, 0x42, 0x8f, 0x85, 0xda, 0x94, 0x5e, 0x14,
		0xb2, 0x50, 0x45, 0xd6, 0x77, 0xa3, 0x83, 0x82, 0x92, 0x5e, 0x14, 0x32, 0xa1, 0xf2, 0x34, 0x2c,
		0xe2, 0x5e, 0xcf, 0x63, 0xe4, 0x8a, 0x48, 0x14, 0xad, 0xe5, 0x50, 0xcc, 0x15, 0x57, 0x5f, 0x85,
		0xbc, 0xb2, 0x03, 0xcb, 0x66, 0xcc, 0x12, 0xc6, 0x40, 0x1c, 0xd7, 0xa4, 0xd7, 0x0a, 0x7a, 0x9e,
		0xaa, 0xce, 0x4b, 0x50, 0xb2, 0x7d, 0x63, 0x74, 0x6e, 0x98, 0xbe, 0x98, 0x5e, 0xcb, 0xeb, 0x45,
		0xdb, 0x0f, 0x0f, 0x8a, 0xaa, 0xef, 0xa5, 0xa1, 0x1c, 0x3f, 0xf7, 0x44, 0x5b, 0x90, 0x77, 0x5c,
		0x13, 0x73, 0x47, 0x10, 0x87, 0xee, 0x6b, 0x09, 0x47, 0xa5, 0xeb, 0x3b, 0x52, 0x5f, 0x0f, 0x91,
		0xab, 0x7f, 0x9f, 0x82, 0xbc, 0x12, 0xa3, 0x33, 0x90, 0x1d, 0xe0, 0xe0, 0x88, 0xd3, 0xe5, 0x36,
		0xd2, 0x5a, 0x4a, 0xe7, 0x6d, 0x26, 0xf7, 0x07, 0x98, 0x72, 0x17, 0x90, 0x72, 0xd6, 0x66, 0xeb,
		0xea, 0x10, 0x6c, 0xf1, 0x72, 0xd8, 0xed, 0xf7, 0x09, 0x0d, 0x7c, 0xb5, 0xae, 0x52, 0xbe, 0x29,
		0xc5, 0xe8, 0x59, 0x58, 0x0a, 0x3c, 0x6c, 0x3b, 0x31, 0xdd, 0x2c, 0xd7, 0xd5, 0x54, 0x47, 0xa8,
		0x5c, 0x83, 0xb3, 0x8a, 0xd7, 0x22, 0x01, 0x36, 0x8f, 0x88, 0x35, 0x02, 0xcd, 0xf1, 0x43, 0xb5,
		0x47, 0xa5, 0xc2, 0x96, 0xec, 0x57, 0xd8, 0xea, 0xf7, 0x53, 0xb0, 0xa4, 0x0a, 0x78, 0x2b, 0x34,
		0xd6, 0x2e, 0x00, 0xa6, 0xd4, 0x0d, 0xa2, 0xe6, 0x9a, 0x74, 0xe5, 0x09, 0xdc, 0x7a, 0x3d, 0x04,
		0xe9, 0x11, 0x82, 0xd5, 0x3e, 0xc0, 0xa8, 0xe7, 0x44, 0xb3, 0x5d, 0x80, 0xa2, 0x3c, 0xd4, 0xe6,
		0x5f, 0x46, 0xc4, 0x5b, 0x1f, 0x08, 0x11, 0xab, 0xf4, 0xd1, 0x0a, 0xe4, 0x0e, 0x49, 0xcf, 0xa6,
		0xf2, 0xa8, 0x4d, 0x34, 0xd4, 0x01, 0x5e, 0x36, 0x3c, 0xc0, 0xdb, 0xf8, 0x1c, 0x2c, 0x9b, 0x6e,
		0x7f, 0x7c, 0xb8, 0x1b, 0xda, 0xd8, 0x9b, 0xa7, 0xff, 0x4a, 0xea, 0xb3, 0x30, 0xaa, 0xce, 0xde,
		0x4d, 0xa5, 0xbe, 0x99, 0xce, 0x6c, 0xb7, 0x37, 0xbe, 0x9d, 0x5e, 0xdd, 0x16, 0xd0, 0xb6, 0x9a,
		0xa9, 0x4e, 0xba, 0x0e, 0x31, 0xd9, 0xe8, 0xe1, 0x1b, 0x4f, 0xc2, 0x27, 0x7a, 0x76, 0x70, 0x34,
		0x3c, 0x5c, 0x37, 0xdd, 0xfe, 0x95, 0x9e, 0xdb, 0x73, 0x47, 0x1f, 0x83, 0x58, 0x8b, 0x37, 0xf8,
		0x3f, 0xf9, 0x41, 0xa8, 0x10, 0x4a, 0x57, 0x13, 0xbf, 0x1e, 0xd5, 0xf6, 0x60, 0x59, 0x2a, 0x1b,
		0xfc, 0x44, 0x5a, 0xd4, 0xe1, 0xe8, 0xd4, 0x53, 0x89, 0xca, 0x77, 0xdf, 0xe7, 0x99, 0x4e, 0x5f,
		0x92, 0x50, 0xd6, 0x27, 0x2a, 0xf5, 0x9a, 0x0e, 0x8f, 0xc4, 0xf8, 0xc4, 0xd6, 0x24, 0x5e, 0x02,
		0xe3, 0xf7, 0x24, 0xe3, 0x72, 0x84, 0xb1, 0x23, 0xa1, 0xb5, 0x4d, 0x58, 0x78, 0x18, 0xae, 0xbf,
		0x95, 0x5c, 0x25, 0x12, 0x25, 0xd9, 0x86, 0x45, 0x4e, 0x62, 0x0e, 0xfd, 0xc0, 0xed, 0xf3, 0xb8,
		0x77, 0x3a, 0xcd, 0xdf, 0xbd, 0x2f, 0xf6, 0x4a, 0x99, 0xc1, 0x36, 0x43, 0x54, 0xed, 0xd3, 0xb0,
		0xc2, 0x24, 0x3c, 0xb4, 0x44, 0xd9, 0x92, 0xcf, 0x51, 0x2a, 0xdf, 0x7f, 0x4b, 0x6c, 0xa9, 0xe5,
		0x90, 0x20, 0xc2, 0x1b, 0x59, 0x89, 0x1e, 0x09, 0x02, 0xe2, 0xf9, 0x06, 0x76, 0x1c, 0x74, 0xea,
		0x17, 0x9a, 0xca, 0x57, 0x7e, 0x18, 0x5f, 0x89, 0x6d, 0x81, 0xac, 0x3b, 0x4e, 0xed, 0x00, 0x1e,
		0x9d, 0xb2, 0xb2, 0x33, 0x70, 0xbe, 0x2d, 0x39, 0x57, 0x26, 0x56, 0x97, 0xd1, 0xb6, 0x41, 0xc9,
		0xc3, 0xf5, 0x98, 0x81, 0xf3, 0xab, 0x92, 0x13, 0x49, 0xac, 0x5a, 0x16, 0xc6, 0xf8, 0x2a, 0x2c,
		0xdd, 0x23, 0xde, 0xa1, 0xeb, 0xcb, 0x97, 0xff, 0x19, 0xe8, 0xde, 0x91, 0x74, 0x8b, 0x12, 0xc8,
		0x8f, 0x02, 0x18, 0xd7, 0x4b, 0x90, 0xef, 0x62, 0x93, 0xcc, 0x40, 0xf1, 0x35, 0x49, 0x31, 0xcf,
		0xf4, 0x19, 0xb4, 0x0e, 0xa5, 0x9e, 0x2b, 0xb3, 0x4b, 0x32, 0xfc, 0xeb, 0x12, 0x5e, 0x54, 0x18,
		0x49, 0x31, 0x70, 0x07, 0x43, 0x87, 0xa5, 0x9e, 0x64, 0x8a, 0x6f, 0x28, 0x0a, 0x85, 0x91, 0x14,
		0x0f, 0x61, 0xd6, 0x77, 0x15, 0x85, 0x1f, 0xb1, 0xe7, 0xcb, 0x50, 0x74, 0xa9, 0x73, 0xec, 0xd2,
		0x59, 0x06, 0xf1, 0xbb, 0x92, 0x01, 0x24, 0x84, 0x11, 0xdc, 0x82, 0xc2, 0xac, 0x0b, 0xf1, 0x7b,
		0x12, 0x9e, 0x27, 0x6a, 0x05, 0xb6, 0x61, 0x51, 0x05, 0x19, 0xdb, 0xa5, 0x33, 0x50, 0x7c, 0x4b,
		0x52, 0x94, 0x23, 0x30, 0x39, 0x8d, 0x80, 0xf8, 0x41, 0x8f, 0xcc, 0x42, 0xf2, 0x9e, 0x9a, 0x86,
		0x84, 0x48, 0x53, 0x1e, 0x12, 0x6a, 0x1e, 0xcd, 0xc6, 0xf0, 0xfb, 0xca, 0x94, 0x0a, 0xc3, 0x28,
		0x36, 0x61, 0xa1, 0x8f, 0x3d, 0xff, 0x08, 0x3b, 0x33, 0x2d, 0xc7, 0x1f, 0x48, 0x8e, 0x52, 0x08,
		0x92, 0x16, 0x19, 0xd2, 0x87, 0xa1, 0xf9, 0xb6, 0xb2, 0x48, 0x04, 0x26, 0xb7, 0x9e, 0x1f, 0xf0,
		0xf3, 0x95, 0x87, 0x61, 0xfb, 0x43, 0xb5, 0xf5, 0x04, 0x76, 0x37, 0xca, 0x78, 0x0b, 0x0a, 0xbe,
		0xfd, 0xc6, 0x4c, 0x34, 0x7f, 0xa4, 0x56, 0x9a, 0x03, 0x18, 0xf8, 0x75, 0x38, 0x3b, 0x35, 0xd4,
		0xcf, 0x40, 0xf6, 0xc7, 0x92, 0xec, 0xcc, 0x94, 0x70, 0x2f, 0x43, 0xc2, 0xc3, 0x52, 0xfe, 0x89,
		0x0a, 0x09, 0x64, 0x8c, 0xab, 0xcd, 0xaa, 0x73, 0x1f, 0x77, 0x1f, 0xce, 0x6a, 0xdf, 0x51, 0x56,
		0x13, 0xd8, 0x98, 0xd5, 0xf6, 0xe1, 0x8c, 0x64, 0x7c, 0xb8, 0x75, 0xfd, 0x53, 0x15, 0x58, 0x05,
		0xfa, 0x20, 0xbe, 0xba, 0x9f, 0x83, 0xd5, 0xd0, 0x9c, 0xaa, 0xb0, 0xf4, 0x8d, 0x3e, 0x1e, 0xcc,
		0xc0, 0xfc, 0x5d, 0xc9, 0xac, 0x22, 0x7e, 0x58, 0x99, 0xfa, 0xbb, 0x78, 0xc0, 0xc8, 0x5f, 0x83,
		0x8a, 0x22, 0x1f, 0x52, 0x8f, 0x98, 0x6e, 0x8f, 0xda, 0x6f, 0x10, 0x6b, 0x06, 0xea, 0x3f, 0x1b,
		0x5b, 0xaa, 0x83, 0x08, 0x9c, 0x31, 0x37, 0x41, 0x0b, 0xeb, 0x0d, 0xc3, 0xee, 0x0f, 0x5c, 0x2f,
		0x48, 0x60, 0xfc, 0x73, 0xb5, 0x52, 0x21, 0xae, 0xc9, 0x61, 0xb5, 0x06, 0x94, 0x79, 0x73, 0x56,
		0x97, 0xfc, 0x0b, 0x49, 0xb4, 0x30, 0x42, 0xc9, 0xc0, 0x61, 0xba, 0xfd, 0x01, 0xf6, 0x66, 0x89,
		0x7f, 0x7f, 0xa9, 0x02, 0x87, 0x84, 0x08, 0xef, 0x5b, 0x1c, 0xcb, 0xc4, 0x28, 0xe9, 0xe3, 0x75,
		0xe5, 0xf3, 0x1f, 0xca, 0x3d, 0x1b, 0x4f, 0xc4, 0xb5, 0x1d, 0x66, 0x9e, 0x78, 0xba, 0x4c, 0x26,
		0x7b, 0xeb, 0xc3, 0xd0, 0x42, 0xb1, 0x6c, 0x59, 0xbb, 0x0d, 0x0b, 0xb1, 0x54, 0x99, 0x4c, 0xf5,
		0x8b, 0x92, 0xaa, 0x14, 0xcd, 0x94, 0xb5, 0xeb, 0x90, 0x65, 0x69, 0x2f, 0x19, 0xfe, 0x4b, 0x12,
		0xce, 0xd5, 0x6b, 0x9f, 0x84, 0xbc, 0x4a, 0x77, 0xc9, 0xd0, 0x5f, 0x96, 0xd0, 0x10, 0xc2, 0xe0,
		0x2a, 0xd5, 0x25, 0xc3, 0x7f, 0x45, 0xc1, 0x15, 0x84, 0xc1, 0x67, 0x37, 0xe1, 0xdf, 0x7c, 0x31,
		0x2b, 0xc3, 0x95, 0xb2, 0xdd, 0x2d, 0x98, 0x97, 0x39, 0x2e, 0x19, 0xfd, 0x05, 0xf9, 0x70, 0x85,
		0xa8, 0xbd, 0x08, 0xb9, 0x19, 0x0d, 0xfe, 0xab, 0x12, 0x2a, 0xf4, 0x6b, 0x9b, 0x50, 0x8c, 0xe4,
		0xb5, 0x64, 0xf8, 0x97, 0x24, 0x3c, 0x8a, 0x62, 0x43, 0x97, 0x79, 0x2d, 0x99, 0xe0, 0xd7, 0xd4,
		0xd0, 0x25, 0x82, 0x99, 0x4d, 0xa5, 0xb4, 0x64, 0xf4, 0xaf, 0x2b, 0xab, 0x2b, 0x48, 0xed, 0x65,
		0x28, 0x84, 0x61, 0x2a, 0x19, 0xff, 0x1b, 0x12, 0x3f, 0xc2, 0x30, 0x0b, 0x44, 0xc2, 0x64, 0x32,
		0xc5, 0x6f, 0x2a, 0x0b, 0x44, 0x50, 0x6c, 0x1b, 0x8d, 0xa7, 0xbe, 0x64, 0xa6, 0xdf, 0x52, 0xdb,
		0x68, 0x2c, 0xf3, 0xb1, 0xd5, 0xe4, 0xd1, 0x22, 0x99, 0xe2, 0xb7, 0xd5, 0x6a, 0x72, 0x7d, 0x36,
		0x8c, 0xf1, 0x5c, 0x92, 0xcc, 0xf1, 0x3b, 0x6a, 0x18, 0x63, 0xa9, 0xa4, 0xd6, 0x06, 0x34, 0x99,
		0x47, 0x92, 0xf9, 0xbe, 0x2c, 0xf9, 0x96, 0x26, 0xd2, 0x48, 0xed, 0x33, 0x70, 0x66, 0x7a, 0x0e,
		0x49, 0x66, 0xfd, 0xca, 0x87, 0x63, 0x55, 0x7f, 0x34, 0x85, 0xd4, 0xf6, 0x47, 0x55, 0x7f, 0x34,
		0x7f, 0x24, 0xd3, 0xbe, 0xfd, 0x61, 0xfc, 0xc5, 0x2e, 0x9a, 0x3e, 0x6a, 0x75, 0x80, 0x51, 0xe8,
		0x4e, 0xe6, 0x7a, 0x47, 0x72, 0x45, 0x40, 0x6c, 0x6b, 0xc8, 0xc8, 0x9d, 0x8c, 0xff, 0x9a, 0xda,
		0x1a, 0x12, 0x51, 0xbb, 0x05, 0x79, 0x3a, 0x74, 0x1c, 0xe6, 0x1c, 0xe8, 0xf4, 0x0b, 0x21, 0x95,
		0x7f, 0xfe, 0x48, 0x6e, 0x0c, 0x05, 0xa8, 0x5d, 0x87, 0x1c, 0xe9, 0x1f, 0x12, 0x2b, 0x09, 0xf9,
		0x2f, 0x1f, 0xa9, 0x80, 0xc0, 0xb4, 0x6b, 0x2f, 0x03, 0x88, 0x97, 0x46, 0xfe, 0x3d, 0x20, 0x01,
		0xfb, 0xaf, 0x1f, 0xc9, 0x6f, 0xcd, 0x23, 0xc8, 0x88, 0x40, 0x7c, 0xb9, 0x3e, 0x9d, 0xe0, 0x87,
		0x71, 0x02, 0xfe, 0xa2, 0xf9, 0x12, 0xcc, 0xdf, 0xf1, 0x5d, 0x1a, 0xe0, 0x5e, 0x12, 0xfa, 0xdf,
		0x24, 0x5a, 0xe9, 0x33, 0x83, 0xf5, 0x5d, 0x8f, 0x04, 0xb8, 0xe7, 0x27, 0x61, 0xff, 0x5d, 0x62,
		0x43, 0x00, 0x03, 0x9b, 0xd8, 0x0f, 0x66, 0x99, 0xf7, 0x7f, 0x28, 0xb0, 0x02, 0xb0, 0x41, 0xb3,
		0xff, 0x77, 0xc9, 0x71, 0x12, 0xf6, 0x03, 0x35, 0x68, 0xa9, 0x5f, 0xfb, 0x24, 0x14, 0xd8, 0x5f,
		0x71, 0xff, 0x22, 0x01, 0xfc, 0x9f, 0x12, 0x3c, 0x42, 0xb0, 0x27, 0xfb, 0x81, 0x15, 0xd8, 0xc9,
		0xc6, 0xfe, 0x2f, 0xb9, 0xd2, 0x4a, 0xbf, 0x56, 0x87, 0xa2, 0x1f, 0x58, 0xd6, 0xd0, 0x13, 0x07,
		0x51, 0x09, 0xf0, 0xff, 0xfe, 0x28, 0x7c, 0x99, 0x0b, 0x31, 0x1b, 0x97, 0xa6, 0x9f, 0x2d, 0xc1,
		0xb6, 0xbb, 0xed, 0x8a, 0x53, 0x25, 0xf8, 0x52, 0x09, 0xca, 0x01, 0x7e, 0xe0, 0x52, 0xb7, 0x7f,
		0x2c, 0x8f, 0x80, 0x72, 0x2c, 0xf8, 0xfb, 0xab, 0x0f, 0x77, 0x70, 0x54, 0xfd, 0x59, 0xd0, 0xf6,
		0x25, 0xcf, 0x16, 0x0e, 0xf0, 0x21, 0xf6, 0x09, 0xfa, 0x38, 0xcc, 0x37, 0x68, 0xe0, 0xd9, 0xc4,
		0x97, 0xc7, 0x72, 0xa5, 0x75, 0xce, 0xbd, 0xce, 0xbf, 0xf4, 0xe9, 0xaa, 0xb3, 0x96, 0xfd, 0xe0,
		0xdd, 0x0b, 0xa9, 0xea, 0x77, 0xb2, 0x90, 0x13, 0x9f, 0x00, 0xcf, 0x03, 0x28, 0xae, 0xa6, 0x25,
		0x6f, 0x18, 0x44, 0x24, 0x68, 0x1d, 0x50, 0x93, 0x1e, 0x11, 0xcf, 0x0e, 0x88, 0xb5, 0xe1, 0x60,
		0x3f, 0xd8, 0x13, 0x87, 0xd8, 0xfc, 0x7a, 0xc1, 0x64, 0x0f, 0x42, 0x90, 0xd5, 0x31, 0xbd, 0x2b,
		0xcf, 0x2f, 0xf9, 0x7f, 0x74, 0x0d, 0x8a, 0xdb, 0x84, 0x92, 0xc0, 0x36, 0x37, 0x5d, 0x8b, 0xc8,
		0x9b, 0x17, 0x48, 0x8e, 0x2f, 0xd2, 0xa3, 0x47, 0xd5, 0xd8, 0xc8, 0x5a, 0xc1, 0x11, 0xf1, 0xf8,
		0x27, 0x63, 0x7e, 0x67, 0xb2, 0xa0, 0x47, 0x24, 0xa8, 0x02, 0xf3, 0x9d, 0x63, 0xea, 0xd2, 0xe3,
		0xbe, 0xbc, 0xc4, 0xa6, 0x9a, 0xe8, 0x29, 0x98, 0xdf, 0xb1, 0x29, 0xc1, 0x3d, 0x22, 0x2f, 0xe0,
		0x16, 0xe5, 0xb3, 0x76, 0x6c, 0x7a, 0x57, 0x57, 0x7d, 0xa8, 0x0d, 0x8f, 0xa8, 0xe3, 0xce, 0x3a,
		0xb5, 0x74, 0xd2, 0x25, 0x1e, 0xa1, 0x26, 0xf1, 0xe5, 0x55, 0xca, 0x55, 0x09, 0x92, 0x3a, 0x51,
		0x15, 0x7d, 0x3a, 0x10, 0xdd, 0xe6, 0x67, 0xa6, 0x6e, 0x9f, 0x1f, 0x7a, 0x7a, 0x7d, 0x71, 0x4a,
		0x2a, 0xee, 0xdf, 0x56, 0x46, 0xd3, 0x8d, 0xf7, 0xeb, 0x93, 0x10, 0xd4, 0x83, 0x73, 0x2c, 0xac,
		0x7b, 0x14, 0x3b, 0x51, 0x4d, 0x22, 0xce, 0x3c, 0x7d, 0x7e, 0x21, 0xb2, 0x78, 0xf5, 0x09, 0xb5,
		0xc2, 0xa7, 0xa8, 0xea, 0xa7, 0x12, 0xa1, 0x35, 0x98, 0xd7, 0x89, 0xe9, 0x7a, 0x96, 0xcf, 0x2f,
		0x66, 0x17, 0xaf, 0x96, 0x25, 0xa7, 0x94, 0xea, 0xaa, 0xbb, 0x6a, 0x84, 0x9a, 0xa8, 0x0a, 0x25,
		0xe5, 0x76, 0x7b, 0xa3, 0x0b, 0x3a, 0x31, 0x19, 0x7a, 0x1e, 0x20, 0x62, 0x50, 0xf1, 0xcd, 0x43,
		0x0b, 0xb9, 0x95, 0x19, 0x23, 0x3a, 0xd5, 0x5f, 0x80, 0x42, 0xd8, 0x42, 0x17, 0x20, 0x1b, 0x52,
		0x8f, 0x2d, 0x1f, 0xef, 0x40, 0xe7, 0xa0, 0x20, 0xbe, 0x84, 0x8b, 0x83, 0x7e, 0x1e, 0x0a, 0x42,
		0x01, 0x2a, 0x43, 0x7a, 0xbb, 0x29, 0x5d, 0x30, 0xbd, 0xdd, 0x44, 0x97, 0x20, 0xc7, 0xb0, 0xbe,
		0xbc, 0xc2, 0x1b, 0xe3, 0x13, 0x3d, 0xd5, 0x75, 0xc8, 0xb2, 0x3f, 0xcc, 0x7f, 0x23, 0x93, 0xca,
		0x2a, 0x9f, 0x66, 0x7d, 0xf2, 0x39, 0xfc, 0x7f, 0x75, 0x37, 0xe6, 0xd3, 0xe8, 0x32, 0x68, 0xfb,
		0x1e, 0xa6, 0xbe, 0xc3, 0x0d, 0xbc, 0xcf, 0x12, 0x8f, 0xbc, 0x4e, 0x3a, 0x21, 0x67, 0x74, 0xfb,
		0xa3, 0xeb, 0x4b, 0xfc, 0x7f, 0x35, 0x80, 0xe5, 0x29, 0x7e, 0xc6, 0x7c, 0xfc, 0x15, 0x71, 0x40,
		0x2f, 0x07, 0xa4, 0x9a, 0xac, 0x67, 0xd3, 0xa5, 0x01, 0xa1, 0x81, 0xba, 0xc1, 0x2f, 0x9b, 0xe8,
		0x99, 0x88, 0x21, 0xe5, 0x75, 0xac, 0xd8, 0x84, 0x47, 0xbd, 0x55, 0x3a, 0xc5, 0x5f, 0xd1, 0xf3,
		0x72, 0x78, 0xe2, 0xeb, 0xfc, 0xb9, 0x93, 0xfc, 0x56, 0x5c, 0x28, 0xe5, 0x9f, 0x8e, 0x9f, 0x86,
		0x7c, 0xdb, 0x73, 0x7b, 0x1e, 0xee, 0xab, 0xa5, 0x8e, 0x3d, 0x30, 0xec, 0xac, 0x7e, 0x2b, 0x75,
		0xba, 0x63, 0xcb, 0x9d, 0x7b, 0xb7, 0x35, 0x0c, 0xa6, 0x2d, 0xbd, 0xea, 0x63, 0x6e, 0xdb, 0x19,
		0x1e, 0xde, 0x21, 0xa6, 0x98, 0x7c, 0x39, 0x74, 0x5b, 0x29, 0xd5, 0x55, 0x37, 0xba, 0x0e, 0x8b,
		0x12, 0xd4, 0xf6, 0xdc, 0x7b, 0xb6, 0x25, 0xef, 0xe3, 0x8e, 0x11, 0x8f, 0xeb, 0x5c, 0x7e, 0x0e,
		0x1e, 0x99, 0x3a, 0x61, 0x94, 0x87, 0xec, 0x5e, 0x6b, 0xaf, 0xa1, 0xa5, 0x50, 0x01, 0x72, 0x1b,
		0x3b, 0xf5, 0xce, 0xbe, 0x96, 0xbe, 0xfc, 0x5c, 0x38, 0x1c, 0x54, 0x84, 0xf9, 0x03, 0x7a, 0x97,
		0xba, 0xf7, 0xa9, 0x96, 0x42, 0x2b, 0xa0, 0xb5, 0xbc, 0x1e, 0xa6, 0xb6, 0xdf, 0xef, 0x0c, 0x88,
		0x69, 0x77, 0x6d, 0x53, 0x4b, 0x6f, 0xe4, 0x3f, 0xf8, 0xc1, 0xf9, 0xd4, 0xff, 0xfe, 0xe0, 0x7c,
		0xea, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x5d, 0x18, 0xde, 0x37, 0x32, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *TaxonomyDatabase) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tests.TaxonomyDatabase{")
	if this.Entries != nil {
		s = append(s, "Entries: "+fmt.Sprintf("%#v", this.Entries)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Entry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&tests.Entry{")
	if this.TaxonomyId != nil {
		s = append(s, "TaxonomyId: "+valueToGoStringTaxonomy(this.TaxonomyId, "string")+",\n")
	}
	if this.InheritedBlastName != nil {
		s = append(s, "InheritedBlastName: "+valueToGoStringTaxonomy(this.InheritedBlastName, "string")+",\n")
	}
	if this.Rank != nil {
		s = append(s, "Rank: "+valueToGoStringTaxonomy(this.Rank, "string")+",\n")
	}
	if this.GeneticCode != nil {
		s = append(s, "GeneticCode: "+fmt.Sprintf("%#v", this.GeneticCode)+",\n")
	}
	if this.OtherNames != nil {
		s = append(s, "OtherNames: "+fmt.Sprintf("%#v", this.OtherNames)+",\n")
	}
	if this.Synonym != nil {
		s = append(s, "Synonym: "+valueToGoStringTaxonomy(this.Synonym, "string")+",\n")
	}
	if this.Lineage != nil {
		s = append(s, "Lineage: "+fmt.Sprintf("%#v", this.Lineage)+",\n")
	}
	if this.CommentsAndReferences != nil {
		s = append(s, "CommentsAndReferences: "+fmt.Sprintf("%#v", this.CommentsAndReferences)+",\n")
	}
	if this.GenomeInformation != nil {
		s = append(s, "GenomeInformation: "+fmt.Sprintf("%#v", this.GenomeInformation)+",\n")
	}
	if this.ExternalInformationResources != nil {
		s = append(s, "ExternalInformationResources: "+fmt.Sprintf("%#v", this.ExternalInformationResources)+",\n")
	}
	if this.Records != nil {
		s = append(s, "Records: "+fmt.Sprintf("%#v", this.Records)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Records) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tests.Records{")
	if this.DatabaseName != nil {
		s = append(s, "DatabaseName: "+valueToGoStringTaxonomy(this.DatabaseName, "string")+",\n")
	}
	if this.References != nil {
		s = append(s, "References: "+fmt.Sprintf("%#v", this.References)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Reference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tests.Reference{")
	if this.Name != nil {
		s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	}
	if this.Accession != nil {
		s = append(s, "Accession: "+valueToGoStringTaxonomy(this.Accession, "string")+",\n")
	}
	if this.GI != nil {
		s = append(s, "GI: "+valueToGoStringTaxonomy(this.GI, "string")+",\n")
	}
	if this.Links != nil {
		s = append(s, "Links: "+fmt.Sprintf("%#v", this.Links)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Link) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tests.Link{")
	if this.Name != nil {
		s = append(s, "Name: "+valueToGoStringTaxonomy(this.Name, "string")+",\n")
	}
	if this.Link != nil {
		s = append(s, "Link: "+valueToGoStringTaxonomy(this.Link, "string")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GeneticCode) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tests.GeneticCode{")
	if this.TranslationTable != nil {
		s = append(s, "TranslationTable: "+valueToGoStringTaxonomy(this.TranslationTable, "int32")+",\n")
	}
	if this.Type != nil {
		s = append(s, "Type: "+valueToGoStringTaxonomy(this.Type, "string")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CommentAndReference) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tests.CommentAndReference{")
	if this.Heading != nil {
		s = append(s, "Heading: "+valueToGoStringTaxonomy(this.Heading, "string")+",\n")
	}
	if this.Content != nil {
		s = append(s, "Content: "+valueToGoStringTaxonomy(this.Content, "string")+",\n")
	}
	if this.Reference != nil {
		s = append(s, "Reference: "+fmt.Sprintf("%#v", this.Reference)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenomeInformation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tests.GenomeInformation{")
	if this.Type != nil {
		s = append(s, "Type: "+valueToGoStringTaxonomy(this.Type, "tests.GenomeInformationType")+",\n")
	}
	if this.Programs != nil {
		s = append(s, "Programs: "+fmt.Sprintf("%#v", this.Programs)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ExternalInformationResources) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tests.ExternalInformationResources{")
	if this.LinkOut != nil {
		s = append(s, "LinkOut: "+fmt.Sprintf("%#v", this.LinkOut)+",\n")
	}
	if this.Subject != nil {
		s = append(s, "Subject: "+valueToGoStringTaxonomy(this.Subject, "tests.Subject")+",\n")
	}
	if this.LinkOutProvider != nil {
		s = append(s, "LinkOutProvider: "+fmt.Sprintf("%#v", this.LinkOutProvider)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTaxonomy(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringTaxonomy(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func NewPopulatedTaxonomyDatabase(r randyTaxonomy, easy bool) *TaxonomyDatabase {
	this := &TaxonomyDatabase{}
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Entries = make([]*Entry, v1)
		for i := 0; i < v1; i++ {
			this.Entries[i] = NewPopulatedEntry(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTaxonomy(r, 2)
	}
	return this
}

func NewPopulatedEntry(r randyTaxonomy, easy bool) *Entry {
	this := &Entry{}
	if r.Intn(10) != 0 {
		v2 := randStringTaxonomy(r)
		this.TaxonomyId = &v2
	}
	if r.Intn(10) != 0 {
		v3 := randStringTaxonomy(r)
		this.InheritedBlastName = &v3
	}
	if r.Intn(10) != 0 {
		v4 := randStringTaxonomy(r)
		this.Rank = &v4
	}
	if r.Intn(10) != 0 {
		this.GeneticCode = NewPopulatedGeneticCode(r, easy)
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(10)
		this.OtherNames = make([]string, v5)
		for i := 0; i < v5; i++ {
			this.OtherNames[i] = randStringTaxonomy(r)
		}
	}
	if r.Intn(10) != 0 {
		v6 := randStringTaxonomy(r)
		this.Synonym = &v6
	}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.Lineage = make([]*Link, v7)
		for i := 0; i < v7; i++ {
			this.Lineage[i] = NewPopulatedLink(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(5)
		this.CommentsAndReferences = make([]*CommentAndReference, v8)
		for i := 0; i < v8; i++ {
			this.CommentsAndReferences[i] = NewPopulatedCommentAndReference(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		this.GenomeInformation = NewPopulatedGenomeInformation(r, easy)
	}
	if r.Intn(10) != 0 {
		v9 := r.Intn(5)
		this.ExternalInformationResources = make([]*ExternalInformationResources, v9)
		for i := 0; i < v9; i++ {
			this.ExternalInformationResources[i] = NewPopulatedExternalInformationResources(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.Records = make([]*Records, v10)
		for i := 0; i < v10; i++ {
			this.Records[i] = NewPopulatedRecords(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTaxonomy(r, 12)
	}
	return this
}

func NewPopulatedRecords(r randyTaxonomy, easy bool) *Records {
	this := &Records{}
	if r.Intn(10) != 0 {
		v11 := randStringTaxonomy(r)
		this.DatabaseName = &v11
	}
	if r.Intn(10) != 0 {
		v12 := r.Intn(5)
		this.References = make([]*Reference, v12)
		for i := 0; i < v12; i++ {
			this.References[i] = NewPopulatedReference(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTaxonomy(r, 3)
	}
	return this
}

func NewPopulatedReference(r randyTaxonomy, easy bool) *Reference {
	this := &Reference{}
	if r.Intn(10) != 0 {
		this.Name = NewPopulatedLink(r, easy)
	}
	if r.Intn(10) != 0 {
		v13 := randStringTaxonomy(r)
		this.Accession = &v13
	}
	if r.Intn(10) != 0 {
		v14 := randStringTaxonomy(r)
		this.GI = &v14
	}
	if r.Intn(10) != 0 {
		v15 := r.Intn(5)
		this.Links = make([]*Link, v15)
		for i := 0; i < v15; i++ {
			this.Links[i] = NewPopulatedLink(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTaxonomy(r, 5)
	}
	return this
}

func NewPopulatedLink(r randyTaxonomy, easy bool) *Link {
	this := &Link{}
	if r.Intn(10) != 0 {
		v16 := randStringTaxonomy(r)
		this.Name = &v16
	}
	if r.Intn(10) != 0 {
		v17 := randStringTaxonomy(r)
		this.Link = &v17
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTaxonomy(r, 3)
	}
	return this
}

func NewPopulatedGeneticCode(r randyTaxonomy, easy bool) *GeneticCode {
	this := &GeneticCode{}
	if r.Intn(10) != 0 {
		v18 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v18 *= -1
		}
		this.TranslationTable = &v18
	}
	if r.Intn(10) != 0 {
		v19 := randStringTaxonomy(r)
		this.Type = &v19
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTaxonomy(r, 3)
	}
	return this
}

func NewPopulatedCommentAndReference(r randyTaxonomy, easy bool) *CommentAndReference {
	this := &CommentAndReference{}
	if r.Intn(10) != 0 {
		v20 := randStringTaxonomy(r)
		this.Heading = &v20
	}
	if r.Intn(10) != 0 {
		v21 := randStringTaxonomy(r)
		this.Content = &v21
	}
	if r.Intn(10) != 0 {
		this.Reference = NewPopulatedLink(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTaxonomy(r, 4)
	}
	return this
}

func NewPopulatedGenomeInformation(r randyTaxonomy, easy bool) *GenomeInformation {
	this := &GenomeInformation{}
	if r.Intn(10) != 0 {
		v22 := GenomeInformationType([]int32{1, 2}[r.Intn(2)])
		this.Type = &v22
	}
	if r.Intn(10) != 0 {
		v23 := r.Intn(5)
		this.Programs = make([]*Link, v23)
		for i := 0; i < v23; i++ {
			this.Programs[i] = NewPopulatedLink(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTaxonomy(r, 3)
	}
	return this
}

func NewPopulatedExternalInformationResources(r randyTaxonomy, easy bool) *ExternalInformationResources {
	this := &ExternalInformationResources{}
	if r.Intn(10) != 0 {
		this.LinkOut = NewPopulatedLink(r, easy)
	}
	if r.Intn(10) != 0 {
		v24 := Subject([]int32{1, 2}[r.Intn(2)])
		this.Subject = &v24
	}
	if r.Intn(10) != 0 {
		this.LinkOutProvider = NewPopulatedLink(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedTaxonomy(r, 4)
	}
	return this
}

type randyTaxonomy interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTaxonomy(r randyTaxonomy) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTaxonomy(r randyTaxonomy) string {
	v25 := r.Intn(100)
	tmps := make([]rune, v25)
	for i := 0; i < v25; i++ {
		tmps[i] = randUTF8RuneTaxonomy(r)
	}
	return string(tmps)
}
func randUnrecognizedTaxonomy(r randyTaxonomy, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldTaxonomy(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldTaxonomy(data []byte, r randyTaxonomy, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateTaxonomy(data, uint64(key))
		v26 := r.Int63()
		if r.Intn(2) == 0 {
			v26 *= -1
		}
		data = encodeVarintPopulateTaxonomy(data, uint64(v26))
	case 1:
		data = encodeVarintPopulateTaxonomy(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateTaxonomy(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateTaxonomy(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateTaxonomy(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateTaxonomy(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}

func init() { proto.RegisterFile("taxonomy.proto", fileDescriptorTaxonomy) }

var fileDescriptorTaxonomy = []byte{
	// 699 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x53, 0x41, 0x6f, 0x13, 0x3b,
	0x10, 0xd6, 0xa6, 0x9b, 0x97, 0x64, 0x52, 0xe5, 0xed, 0x9b, 0x47, 0xa5, 0x55, 0x55, 0xb5, 0x61,
	0x11, 0x10, 0xaa, 0x92, 0x56, 0x15, 0x5c, 0x38, 0xd1, 0x96, 0x12, 0x22, 0x95, 0xa6, 0xda, 0x84,
	0x33, 0xda, 0x6c, 0x9c, 0xed, 0x92, 0xac, 0x5d, 0xd9, 0x0e, 0x34, 0x07, 0xfe, 0x0b, 0x27, 0xae,
	0xfc, 0xa6, 0xfe, 0x83, 0x1e, 0x39, 0x22, 0x3b, 0x76, 0xb2, 0x69, 0x43, 0x6f, 0x9e, 0xf9, 0xbe,
	0xf9, 0x3c, 0x33, 0xfe, 0x0c, 0x35, 0x19, 0x5d, 0x33, 0xca, 0xb2, 0x69, 0xf3, 0x8a, 0x33, 0xc9,
	0xb0, 0x28, 0x89, 0x90, 0x62, 0xf3, 0x65, 0x92, 0xca, 0xcb, 0x49, 0xbf, 0x19, 0xb3, 0x6c, 0x3f,
	0x61, 0x09, 0xdb, 0xd7, 0x68, 0x7f, 0x32, 0xd4, 0x91, 0x0e, 0xf4, 0x69, 0x56, 0x15, 0xbc, 0x05,
	0xaf, 0x67, 0x74, 0xde, 0x45, 0x32, 0xea, 0x47, 0x82, 0xe0, 0x33, 0x28, 0x9d, 0x52, 0xc9, 0x53,
	0x22, 0x7c, 0xa7, 0xbe, 0xd6, 0xa8, 0x1e, 0xae, 0x37, 0xb5, 0x76, 0x53, 0x65, 0xa7, 0xa1, 0x05,
	0xdf, 0xb8, 0xb7, 0x3f, 0x76, 0x9c, 0xe0, 0x97, 0x0b, 0x45, 0x0d, 0xe0, 0x36, 0x80, 0xd5, 0x6a,
	0x0f, 0x7c, 0xa7, 0xee, 0x34, 0x2a, 0x61, 0x2e, 0x83, 0x4d, 0xc0, 0x36, 0xbd, 0x24, 0x3c, 0x95,
	0x64, 0x70, 0x3c, 0x8e, 0x84, 0x3c, 0x8f, 0x32, 0xe2, 0x17, 0x34, 0x6f, 0x05, 0x82, 0x08, 0x6e,
	0x18, 0xd1, 0x91, 0xbf, 0xa6, 0x19, 0xfa, 0x8c, 0xaf, 0xa0, 0xda, 0x22, 0x94, 0xc8, 0x34, 0x3e,
	0x61, 0x03, 0xe2, 0xbb, 0x75, 0xa7, 0x51, 0x3d, 0x44, 0xd3, 0x5f, 0x0e, 0x09, 0xf3, 0x34, 0xd5,
	0x59, 0x47, 0x5e, 0x12, 0xae, 0x64, 0x85, 0x5f, 0xac, 0xaf, 0xa9, 0xce, 0x16, 0x19, 0xf4, 0xa1,
	0xd4, 0x9d, 0x52, 0x46, 0xa7, 0x99, 0xff, 0x8f, 0xbe, 0xcc, 0x86, 0xf8, 0x14, 0x4a, 0x67, 0x29,
	0x25, 0x51, 0x42, 0xfc, 0x92, 0xde, 0x45, 0xd5, 0xdc, 0x75, 0x96, 0xd2, 0x51, 0x68, 0x31, 0xbc,
	0x80, 0x8d, 0x13, 0x96, 0x65, 0x84, 0x4a, 0x71, 0x44, 0x07, 0x21, 0x19, 0x12, 0x4e, 0x68, 0x4c,
	0x84, 0x5f, 0xd6, 0x45, 0x9b, 0xa6, 0xc8, 0x70, 0xf2, 0x94, 0x70, 0x75, 0x21, 0xbe, 0x87, 0xff,
	0x5a, 0x84, 0xb2, 0x8c, 0xb4, 0xe9, 0x90, 0xf1, 0x2c, 0x92, 0x29, 0xa3, 0x7e, 0x45, 0x8f, 0xeb,
	0x2f, 0xc6, 0x5d, 0xc6, 0xc3, 0xfb, 0x25, 0x98, 0xc0, 0xd6, 0xe9, 0xb5, 0x24, 0x9c, 0x46, 0xe3,
	0x3c, 0x93, 0x08, 0x36, 0xe1, 0xaa, 0x41, 0xd0, 0x0d, 0x3e, 0xb1, 0x2f, 0xfc, 0x00, 0x35, 0x7c,
	0x50, 0x08, 0x1b, 0x50, 0x0a, 0x49, 0xcc, 0xf8, 0x40, 0xf8, 0x55, 0xad, 0x59, 0x33, 0x9a, 0x26,
	0x1b, 0x5a, 0x38, 0xf8, 0x3c, 0x67, 0x62, 0x00, 0xeb, 0xd6, 0x76, 0xda, 0x0c, 0x33, 0xd3, 0x2c,
	0xe5, 0xf0, 0x00, 0x20, 0xb7, 0xd0, 0x82, 0xd6, 0xf6, 0xe6, 0xda, 0x76, 0x8d, 0x39, 0x4e, 0xf0,
	0x1d, 0x2a, 0xf3, 0x08, 0x77, 0xc0, 0x9d, 0x4b, 0xdf, 0x79, 0x3e, 0x0d, 0xe0, 0x16, 0x54, 0x8e,
	0xe2, 0x98, 0x08, 0xa1, 0x36, 0x3c, 0x73, 0xe3, 0x22, 0x81, 0x35, 0x28, 0xb4, 0xda, 0xc6, 0x82,
	0x85, 0x56, 0x1b, 0x1f, 0x43, 0x51, 0xd5, 0x0a, 0xdf, 0xbd, 0x6f, 0x87, 0x19, 0x12, 0x34, 0xc1,
	0x55, 0x07, 0xe5, 0xdf, 0xdc, 0x50, 0xae, 0xf5, 0xb4, 0xc2, 0xcc, 0x3d, 0xfa, 0x1c, 0x7c, 0x5c,
	0xf2, 0x34, 0xee, 0x82, 0xd7, 0xe3, 0x11, 0x15, 0x63, 0xbd, 0xe0, 0x5e, 0xd4, 0x1f, 0xcf, 0x24,
	0x8a, 0xe1, 0xbd, 0xbc, 0x92, 0xeb, 0x4d, 0xaf, 0xec, 0x27, 0xd2, 0xe7, 0x40, 0xc2, 0xff, 0x2b,
	0x7c, 0xa6, 0x3c, 0xfe, 0x81, 0x44, 0x83, 0x94, 0x26, 0xa6, 0x21, 0x1b, 0x2a, 0xe4, 0x84, 0x51,
	0x49, 0xa8, 0x34, 0x3a, 0x36, 0xc4, 0x17, 0xb9, 0x45, 0xea, 0x1d, 0xdc, 0x19, 0x78, 0x81, 0x06,
	0x74, 0x85, 0x5f, 0xf1, 0xc0, 0xb4, 0xa7, 0x2e, 0xac, 0x1d, 0x6e, 0xfd, 0xcd, 0xb7, 0x8a, 0x33,
	0x6b, 0x1e, 0x9f, 0x43, 0xf9, 0x82, 0xb3, 0x84, 0x47, 0x99, 0x7d, 0xea, 0xa5, 0x0b, 0xe7, 0x60,
	0xf0, 0xd3, 0x79, 0xd8, 0xd8, 0xe6, 0xe7, 0x8e, 0x3a, 0x13, 0xb9, 0xea, 0xe9, 0x2d, 0xa6, 0x6c,
	0xdb, 0x9d, 0xf4, 0xbf, 0x90, 0x78, 0x36, 0x7c, 0x6d, 0x6e, 0x5b, 0x93, 0x0d, 0x2d, 0x8c, 0xaf,
	0xe1, 0x5f, 0x53, 0x74, 0xc1, 0xd9, 0xd7, 0x74, 0x40, 0xf8, 0xaa, 0x95, 0xdc, 0xe5, 0xec, 0xee,
	0xc1, 0xc6, 0xca, 0x81, 0xb1, 0x0c, 0xee, 0x79, 0xe7, 0xfc, 0xd4, 0x73, 0xb0, 0x02, 0xc5, 0xe3,
	0xb3, 0xa3, 0x6e, 0xcf, 0x2b, 0xec, 0xee, 0xcd, 0xdb, 0xc1, 0x2a, 0x94, 0x3e, 0xd1, 0x11, 0x65,
	0xdf, 0xa8, 0xe7, 0xe0, 0x23, 0xf0, 0x3a, 0x3c, 0x89, 0x68, 0x2a, 0xb2, 0xee, 0x15, 0x89, 0xd3,
	0x61, 0x1a, 0x7b, 0x85, 0xe3, 0xf2, 0xed, 0xcd, 0xb6, 0xf3, 0xfb, 0x66, 0xdb, 0xf9, 0x13, 0x00,
	0x00, 0xff, 0xff, 0x0f, 0xa1, 0x3c, 0xeb, 0x0e, 0x06, 0x00, 0x00,
}
