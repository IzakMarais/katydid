// Code generated by funcs-gen. DO NOT EDIT.
package funcs

type rangeDoubles struct {
	List  Doubles
	First Int
	Last  Int
}

func (this *rangeDoubles) Eval() ([]float64, error) {
	list, err := this.List.Eval()
	if err != nil {
		return nil, err
	}
	first64, err := this.First.Eval()
	if err != nil {
		return nil, err
	}
	first := int(first64)
	if len(list) == 0 {
		return nil, NewRangeCheckErr(first, len(list))
	}
	if first < 0 {
		first = first % len(list)
	}
	if first > len(list) {
		return nil, NewRangeCheckErr(first, len(list))
	}
	last64, err := this.Last.Eval()
	if err != nil {
		return nil, err
	}
	last := int(last64)
	if last < 0 {
		last = last % len(list)
	}
	if last > len(list) {
		return nil, NewRangeCheckErr(last, len(list))
	}
	if first > last {
		return nil, NewRangeErr(first, last)
	}
	return list[first:last], nil
}

func init() {
	Register("range", new(rangeDoubles))
}

//RangeDoubles returns a function that returns a range of elements from a list.
func RangeDoubles(list Doubles, from, to Int) Doubles {
	return &rangeDoubles{
		List:  list,
		First: from,
		Last:  to,
	}
}

type rangeInts struct {
	List  Ints
	First Int
	Last  Int
}

func (this *rangeInts) Eval() ([]int64, error) {
	list, err := this.List.Eval()
	if err != nil {
		return nil, err
	}
	first64, err := this.First.Eval()
	if err != nil {
		return nil, err
	}
	first := int(first64)
	if len(list) == 0 {
		return nil, NewRangeCheckErr(first, len(list))
	}
	if first < 0 {
		first = first % len(list)
	}
	if first > len(list) {
		return nil, NewRangeCheckErr(first, len(list))
	}
	last64, err := this.Last.Eval()
	if err != nil {
		return nil, err
	}
	last := int(last64)
	if last < 0 {
		last = last % len(list)
	}
	if last > len(list) {
		return nil, NewRangeCheckErr(last, len(list))
	}
	if first > last {
		return nil, NewRangeErr(first, last)
	}
	return list[first:last], nil
}

func init() {
	Register("range", new(rangeInts))
}

//RangeInts returns a function that returns a range of elements from a list.
func RangeInts(list Ints, from, to Int) Ints {
	return &rangeInts{
		List:  list,
		First: from,
		Last:  to,
	}
}

type rangeUints struct {
	List  Uints
	First Int
	Last  Int
}

func (this *rangeUints) Eval() ([]uint64, error) {
	list, err := this.List.Eval()
	if err != nil {
		return nil, err
	}
	first64, err := this.First.Eval()
	if err != nil {
		return nil, err
	}
	first := int(first64)
	if len(list) == 0 {
		return nil, NewRangeCheckErr(first, len(list))
	}
	if first < 0 {
		first = first % len(list)
	}
	if first > len(list) {
		return nil, NewRangeCheckErr(first, len(list))
	}
	last64, err := this.Last.Eval()
	if err != nil {
		return nil, err
	}
	last := int(last64)
	if last < 0 {
		last = last % len(list)
	}
	if last > len(list) {
		return nil, NewRangeCheckErr(last, len(list))
	}
	if first > last {
		return nil, NewRangeErr(first, last)
	}
	return list[first:last], nil
}

func init() {
	Register("range", new(rangeUints))
}

//RangeUints returns a function that returns a range of elements from a list.
func RangeUints(list Uints, from, to Int) Uints {
	return &rangeUints{
		List:  list,
		First: from,
		Last:  to,
	}
}

type rangeBools struct {
	List  Bools
	First Int
	Last  Int
}

func (this *rangeBools) Eval() ([]bool, error) {
	list, err := this.List.Eval()
	if err != nil {
		return nil, err
	}
	first64, err := this.First.Eval()
	if err != nil {
		return nil, err
	}
	first := int(first64)
	if len(list) == 0 {
		return nil, NewRangeCheckErr(first, len(list))
	}
	if first < 0 {
		first = first % len(list)
	}
	if first > len(list) {
		return nil, NewRangeCheckErr(first, len(list))
	}
	last64, err := this.Last.Eval()
	if err != nil {
		return nil, err
	}
	last := int(last64)
	if last < 0 {
		last = last % len(list)
	}
	if last > len(list) {
		return nil, NewRangeCheckErr(last, len(list))
	}
	if first > last {
		return nil, NewRangeErr(first, last)
	}
	return list[first:last], nil
}

func init() {
	Register("range", new(rangeBools))
}

//RangeBools returns a function that returns a range of elements from a list.
func RangeBools(list Bools, from, to Int) Bools {
	return &rangeBools{
		List:  list,
		First: from,
		Last:  to,
	}
}

type rangeStrings struct {
	List  Strings
	First Int
	Last  Int
}

func (this *rangeStrings) Eval() ([]string, error) {
	list, err := this.List.Eval()
	if err != nil {
		return nil, err
	}
	first64, err := this.First.Eval()
	if err != nil {
		return nil, err
	}
	first := int(first64)
	if len(list) == 0 {
		return nil, NewRangeCheckErr(first, len(list))
	}
	if first < 0 {
		first = first % len(list)
	}
	if first > len(list) {
		return nil, NewRangeCheckErr(first, len(list))
	}
	last64, err := this.Last.Eval()
	if err != nil {
		return nil, err
	}
	last := int(last64)
	if last < 0 {
		last = last % len(list)
	}
	if last > len(list) {
		return nil, NewRangeCheckErr(last, len(list))
	}
	if first > last {
		return nil, NewRangeErr(first, last)
	}
	return list[first:last], nil
}

func init() {
	Register("range", new(rangeStrings))
}

//RangeStrings returns a function that returns a range of elements from a list.
func RangeStrings(list Strings, from, to Int) Strings {
	return &rangeStrings{
		List:  list,
		First: from,
		Last:  to,
	}
}

type rangeListOfBytes struct {
	List  ListOfBytes
	First Int
	Last  Int
}

func (this *rangeListOfBytes) Eval() ([][]byte, error) {
	list, err := this.List.Eval()
	if err != nil {
		return nil, err
	}
	first64, err := this.First.Eval()
	if err != nil {
		return nil, err
	}
	first := int(first64)
	if len(list) == 0 {
		return nil, NewRangeCheckErr(first, len(list))
	}
	if first < 0 {
		first = first % len(list)
	}
	if first > len(list) {
		return nil, NewRangeCheckErr(first, len(list))
	}
	last64, err := this.Last.Eval()
	if err != nil {
		return nil, err
	}
	last := int(last64)
	if last < 0 {
		last = last % len(list)
	}
	if last > len(list) {
		return nil, NewRangeCheckErr(last, len(list))
	}
	if first > last {
		return nil, NewRangeErr(first, last)
	}
	return list[first:last], nil
}

func init() {
	Register("range", new(rangeListOfBytes))
}

//RangeListOfBytes returns a function that returns a range of elements from a list.
func RangeListOfBytes(list ListOfBytes, from, to Int) ListOfBytes {
	return &rangeListOfBytes{
		List:  list,
		First: from,
		Last:  to,
	}
}
