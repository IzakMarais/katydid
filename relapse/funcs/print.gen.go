// Code generated by funcs-gen. DO NOT EDIT.
package funcs

import (
	"fmt"
)

type printDouble struct {
	E Double
}

func (this *printDouble) Eval() (float64, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printDouble) IsVariable() {}

func init() {
	Register("print", new(printDouble))
}

//PrintDouble returns a function that prints out the value of the argument function and returns its value.
func PrintDouble(e Double) Double {
	return &printDouble{E: e}
}

type printInt struct {
	E Int
}

func (this *printInt) Eval() (int64, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printInt) IsVariable() {}

func init() {
	Register("print", new(printInt))
}

//PrintInt returns a function that prints out the value of the argument function and returns its value.
func PrintInt(e Int) Int {
	return &printInt{E: e}
}

type printUint struct {
	E Uint
}

func (this *printUint) Eval() (uint64, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printUint) IsVariable() {}

func init() {
	Register("print", new(printUint))
}

//PrintUint returns a function that prints out the value of the argument function and returns its value.
func PrintUint(e Uint) Uint {
	return &printUint{E: e}
}

type printBool struct {
	E Bool
}

func (this *printBool) Eval() (bool, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printBool) IsVariable() {}

func init() {
	Register("print", new(printBool))
}

//PrintBool returns a function that prints out the value of the argument function and returns its value.
func PrintBool(e Bool) Bool {
	return &printBool{E: e}
}

type printString struct {
	E String
}

func (this *printString) Eval() (string, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printString) IsVariable() {}

func init() {
	Register("print", new(printString))
}

//PrintString returns a function that prints out the value of the argument function and returns its value.
func PrintString(e String) String {
	return &printString{E: e}
}

type printBytes struct {
	E Bytes
}

func (this *printBytes) Eval() ([]byte, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printBytes) IsVariable() {}

func init() {
	Register("print", new(printBytes))
}

//PrintBytes returns a function that prints out the value of the argument function and returns its value.
func PrintBytes(e Bytes) Bytes {
	return &printBytes{E: e}
}

type printDoubles struct {
	E Doubles
}

func (this *printDoubles) Eval() ([]float64, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printDoubles) IsVariable() {}

func init() {
	Register("print", new(printDoubles))
}

//PrintDoubles returns a function that prints out the value of the argument function and returns its value.
func PrintDoubles(e Doubles) Doubles {
	return &printDoubles{E: e}
}

type printInts struct {
	E Ints
}

func (this *printInts) Eval() ([]int64, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printInts) IsVariable() {}

func init() {
	Register("print", new(printInts))
}

//PrintInts returns a function that prints out the value of the argument function and returns its value.
func PrintInts(e Ints) Ints {
	return &printInts{E: e}
}

type printUints struct {
	E Uints
}

func (this *printUints) Eval() ([]uint64, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printUints) IsVariable() {}

func init() {
	Register("print", new(printUints))
}

//PrintUints returns a function that prints out the value of the argument function and returns its value.
func PrintUints(e Uints) Uints {
	return &printUints{E: e}
}

type printBools struct {
	E Bools
}

func (this *printBools) Eval() ([]bool, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printBools) IsVariable() {}

func init() {
	Register("print", new(printBools))
}

//PrintBools returns a function that prints out the value of the argument function and returns its value.
func PrintBools(e Bools) Bools {
	return &printBools{E: e}
}

type printStrings struct {
	E Strings
}

func (this *printStrings) Eval() ([]string, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printStrings) IsVariable() {}

func init() {
	Register("print", new(printStrings))
}

//PrintStrings returns a function that prints out the value of the argument function and returns its value.
func PrintStrings(e Strings) Strings {
	return &printStrings{E: e}
}

type printListOfBytes struct {
	E ListOfBytes
}

func (this *printListOfBytes) Eval() ([][]byte, error) {
	v, err := this.E.Eval()
	if err != nil {
		fmt.Printf("error: %#v\n", v)
	} else {
		fmt.Printf("value: %#v\n", v)
	}
	return v, err
}

func (this *printListOfBytes) IsVariable() {}

func init() {
	Register("print", new(printListOfBytes))
}

//PrintListOfBytes returns a function that prints out the value of the argument function and returns its value.
func PrintListOfBytes(e ListOfBytes) ListOfBytes {
	return &printListOfBytes{E: e}
}
