// Code generated by protoc-gen-gogo.
// source: protonum.proto
// DO NOT EDIT!

/*
Package protonum is a generated protocol buffer package.

It is generated from these files:
	protonum.proto

It has these top-level messages:
	ProtoNum
	KeyValue
	TopsyTurvy
	Topsy
	Turvy
	Knot
	BightKnot
*/
package protonum

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ProtoNum is used for testing of the protonum package.
type ProtoNum struct {
	KeyValue         []*KeyValue `protobuf:"bytes,2,rep,name=KeyValue,json=keyValue" json:"KeyValue,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ProtoNum) Reset()                    { *m = ProtoNum{} }
func (m *ProtoNum) String() string            { return proto.CompactTextString(m) }
func (*ProtoNum) ProtoMessage()               {}
func (*ProtoNum) Descriptor() ([]byte, []int) { return fileDescriptorProtonum, []int{0} }

func (m *ProtoNum) GetKeyValue() []*KeyValue {
	if m != nil {
		return m.KeyValue
	}
	return nil
}

// KeyValue is used for testing of the protonum package.
type KeyValue struct {
	Key              *string `protobuf:"bytes,1,opt,name=Key,json=key" json:"Key,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=Value,json=value" json:"Value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptorProtonum, []int{1} }

func (m *KeyValue) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *KeyValue) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// TopsyTurvy is used for testing of the protonum package.
type TopsyTurvy struct {
	Topsy            *Topsy `protobuf:"bytes,1,opt,name=Topsy,json=topsy" json:"Topsy,omitempty"`
	Turvy            *Turvy `protobuf:"bytes,2,opt,name=Turvy,json=turvy" json:"Turvy,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TopsyTurvy) Reset()                    { *m = TopsyTurvy{} }
func (m *TopsyTurvy) String() string            { return proto.CompactTextString(m) }
func (*TopsyTurvy) ProtoMessage()               {}
func (*TopsyTurvy) Descriptor() ([]byte, []int) { return fileDescriptorProtonum, []int{2} }

func (m *TopsyTurvy) GetTopsy() *Topsy {
	if m != nil {
		return m.Topsy
	}
	return nil
}

func (m *TopsyTurvy) GetTurvy() *Turvy {
	if m != nil {
		return m.Turvy
	}
	return nil
}

// Topsy is used for testing of the protonum package.
type Topsy struct {
	A                *int64 `protobuf:"varint,1,opt,name=A,json=a" json:"A,omitempty"`
	B                *int64 `protobuf:"varint,2,opt,name=B,json=b" json:"B,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Topsy) Reset()                    { *m = Topsy{} }
func (m *Topsy) String() string            { return proto.CompactTextString(m) }
func (*Topsy) ProtoMessage()               {}
func (*Topsy) Descriptor() ([]byte, []int) { return fileDescriptorProtonum, []int{3} }

func (m *Topsy) GetA() int64 {
	if m != nil && m.A != nil {
		return *m.A
	}
	return 0
}

func (m *Topsy) GetB() int64 {
	if m != nil && m.B != nil {
		return *m.B
	}
	return 0
}

// Turvy is used for testing of the protonum package.
type Turvy struct {
	B                *int64 `protobuf:"varint,1,opt,name=B,json=b" json:"B,omitempty"`
	A                *int64 `protobuf:"varint,2,opt,name=A,json=a" json:"A,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Turvy) Reset()                    { *m = Turvy{} }
func (m *Turvy) String() string            { return proto.CompactTextString(m) }
func (*Turvy) ProtoMessage()               {}
func (*Turvy) Descriptor() ([]byte, []int) { return fileDescriptorProtonum, []int{4} }

func (m *Turvy) GetB() int64 {
	if m != nil && m.B != nil {
		return *m.B
	}
	return 0
}

func (m *Turvy) GetA() int64 {
	if m != nil && m.A != nil {
		return *m.A
	}
	return 0
}

// Knot is used for testing of the protonum package.
type Knot struct {
	Bight            []*BightKnot `protobuf:"bytes,1,rep,name=Bight,json=bight" json:"Bight,omitempty"`
	Elbow            *bool        `protobuf:"varint,2,opt,name=Elbow,json=elbow" json:"Elbow,omitempty"`
	BitterEnd        *Knot        `protobuf:"bytes,3,opt,name=BitterEnd,json=bitterEnd" json:"BitterEnd,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Knot) Reset()                    { *m = Knot{} }
func (m *Knot) String() string            { return proto.CompactTextString(m) }
func (*Knot) ProtoMessage()               {}
func (*Knot) Descriptor() ([]byte, []int) { return fileDescriptorProtonum, []int{5} }

func (m *Knot) GetBight() []*BightKnot {
	if m != nil {
		return m.Bight
	}
	return nil
}

func (m *Knot) GetElbow() bool {
	if m != nil && m.Elbow != nil {
		return *m.Elbow
	}
	return false
}

func (m *Knot) GetBitterEnd() *Knot {
	if m != nil {
		return m.BitterEnd
	}
	return nil
}

// BightKnot is used for testing of the protonum package.
type BightKnot struct {
	Loop             *Knot  `protobuf:"bytes,1,opt,name=Loop,json=loop" json:"Loop,omitempty"`
	Turn             *bool  `protobuf:"varint,2,opt,name=Turn,json=turn" json:"Turn,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BightKnot) Reset()                    { *m = BightKnot{} }
func (m *BightKnot) String() string            { return proto.CompactTextString(m) }
func (*BightKnot) ProtoMessage()               {}
func (*BightKnot) Descriptor() ([]byte, []int) { return fileDescriptorProtonum, []int{6} }

func (m *BightKnot) GetLoop() *Knot {
	if m != nil {
		return m.Loop
	}
	return nil
}

func (m *BightKnot) GetTurn() bool {
	if m != nil && m.Turn != nil {
		return *m.Turn
	}
	return false
}

func init() {
	proto.RegisterType((*ProtoNum)(nil), "protonum.ProtoNum")
	proto.RegisterType((*KeyValue)(nil), "protonum.KeyValue")
	proto.RegisterType((*TopsyTurvy)(nil), "protonum.TopsyTurvy")
	proto.RegisterType((*Topsy)(nil), "protonum.Topsy")
	proto.RegisterType((*Turvy)(nil), "protonum.Turvy")
	proto.RegisterType((*Knot)(nil), "protonum.Knot")
	proto.RegisterType((*BightKnot)(nil), "protonum.BightKnot")
}
func (this *ProtoNum) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return ProtonumDescription()
}
func (this *KeyValue) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return ProtonumDescription()
}
func (this *TopsyTurvy) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return ProtonumDescription()
}
func (this *Topsy) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return ProtonumDescription()
}
func (this *Turvy) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return ProtonumDescription()
}
func (this *Knot) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return ProtonumDescription()
}
func (this *BightKnot) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return ProtonumDescription()
}
func ProtonumDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 3491 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x5a, 0x5b, 0x6c, 0x1b, 0xd7,
		0x99, 0x0e, 0x6f, 0x12, 0xf9, 0x93, 0xa2, 0x46, 0x47, 0x8a, 0x4c, 0x2b, 0x89, 0x2d, 0xd3, 0x71,
		0x22, 0x3b, 0x89, 0x9c, 0x55, 0x6c, 0xc7, 0xa6, 0x37, 0x31, 0x28, 0x8a, 0x56, 0xe4, 0xe8, 0xb6,
		0x23, 0x29, 0x71, 0xb2, 0x0f, 0x83, 0xa3, 0xe1, 0x21, 0x35, 0xf6, 0x70, 0x86, 0x3b, 0x33, 0xb4,
		0x2d, 0x3f, 0x79, 0x91, 0xbd, 0x20, 0x58, 0xec, 0x7d, 0x81, 0xcd, 0x7d, 0x37, 0x01, 0xd2, 0xb4,
		0xe9, 0x2d, 0xe9, 0xed, 0xa1, 0x4f, 0x05, 0x8a, 0xb4, 0x6f, 0x05, 0xda, 0xe7, 0xbe, 0xb4, 0x08,
		0xd0, 0x5b, 0xda, 0xa6, 0x80, 0x81, 0x3e, 0xe4, 0xa5, 0x38, 0xb7, 0xe1, 0x0c, 0x49, 0x79, 0xa8,
		0x00, 0x69, 0xfa, 0x24, 0x9e, 0xff, 0xfc, 0xdf, 0x37, 0xff, 0xf9, 0xcf, 0x7f, 0xfe, 0xff, 0x9f,
		0x33, 0x82, 0xef, 0xff, 0x15, 0x4c, 0x37, 0x6c, 0xbb, 0x61, 0x92, 0x93, 0x2d, 0xc7, 0xf6, 0xec,
		0xed, 0x76, 0xfd, 0x64, 0x8d, 0xb8, 0xba, 0x63, 0xb4, 0x3c, 0xdb, 0x99, 0x65, 0x32, 0x34, 0xca,
		0x35, 0x66, 0xa5, 0x46, 0x71, 0x05, 0xc6, 0x2e, 0x1a, 0x26, 0x59, 0xf0, 0x15, 0x37, 0x88, 0x87,
		0xce, 0x42, 0xb2, 0x6e, 0x98, 0xa4, 0x10, 0x9b, 0x4e, 0xcc, 0x64, 0xe7, 0xee, 0x9f, 0xed, 0x02,
		0xcd, 0x86, 0x11, 0xeb, 0x54, 0xac, 0x32, 0x44, 0xf1, 0xc3, 0x24, 0x8c, 0xf7, 0x99, 0x45, 0x08,
		0x92, 0x16, 0x6e, 0x52, 0xc6, 0xd8, 0x4c, 0x46, 0x65, 0xbf, 0x51, 0x01, 0x86, 0x5b, 0x58, 0xbf,
		0x8a, 0x1b, 0xa4, 0x10, 0x67, 0x62, 0x39, 0x44, 0x87, 0x00, 0x6a, 0xa4, 0x45, 0xac, 0x1a, 0xb1,
		0xf4, 0xdd, 0x42, 0x62, 0x3a, 0x31, 0x93, 0x51, 0x03, 0x12, 0xf4, 0x10, 0x8c, 0xb5, 0xda, 0xdb,
		0xa6, 0xa1, 0x6b, 0x01, 0x35, 0x98, 0x4e, 0xcc, 0xa4, 0x54, 0x85, 0x4f, 0x2c, 0x74, 0x94, 0x1f,
		0x84, 0xd1, 0xeb, 0x04, 0x5f, 0x0d, 0xaa, 0x66, 0x99, 0x6a, 0x9e, 0x8a, 0x03, 0x8a, 0x15, 0xc8,
		0x35, 0x89, 0xeb, 0xe2, 0x06, 0xd1, 0xbc, 0xdd, 0x16, 0x29, 0x24, 0xd9, 0xea, 0xa7, 0x7b, 0x56,
		0xdf, 0xbd, 0xf2, 0xac, 0x40, 0x6d, 0xee, 0xb6, 0x08, 0x2a, 0x43, 0x86, 0x58, 0xed, 0x26, 0x67,
		0x48, 0xed, 0xe1, 0xbf, 0xaa, 0xd5, 0x6e, 0x76, 0xb3, 0xa4, 0x29, 0x4c, 0x50, 0x0c, 0xbb, 0xc4,
		0xb9, 0x66, 0xe8, 0xa4, 0x30, 0xc4, 0x08, 0x1e, 0xec, 0x21, 0xd8, 0xe0, 0xf3, 0xdd, 0x1c, 0x12,
		0x87, 0x2a, 0x90, 0x21, 0x37, 0x3c, 0x62, 0xb9, 0x86, 0x6d, 0x15, 0x86, 0x19, 0xc9, 0xb1, 0x3e,
		0xbb, 0x48, 0xcc, 0x5a, 0x37, 0x45, 0x07, 0x87, 0xce, 0xc0, 0xb0, 0xdd, 0xf2, 0x0c, 0xdb, 0x72,
		0x0b, 0xe9, 0xe9, 0xd8, 0x4c, 0x76, 0xee, 0xde, 0xbe, 0x81, 0xb0, 0xc6, 0x75, 0x54, 0xa9, 0x8c,
		0x96, 0x40, 0x71, 0xed, 0xb6, 0xa3, 0x13, 0x4d, 0xb7, 0x6b, 0x44, 0x33, 0xac, 0xba, 0x5d, 0xc8,
		0x30, 0x82, 0xc3, 0xbd, 0x0b, 0x61, 0x8a, 0x15, 0xbb, 0x46, 0x96, 0xac, 0xba, 0xad, 0xe6, 0xdd,
		0xd0, 0x18, 0x4d, 0xc2, 0x90, 0xbb, 0x6b, 0x79, 0xf8, 0x46, 0x21, 0xc7, 0x22, 0x44, 0x8c, 0x8a,
		0x7f, 0x4c, 0xc1, 0xe8, 0x20, 0x21, 0x76, 0x1e, 0x52, 0x75, 0xba, 0xca, 0x42, 0x7c, 0x3f, 0x3e,
		0xe0, 0x98, 0xb0, 0x13, 0x87, 0x3e, 0xa5, 0x13, 0xcb, 0x90, 0xb5, 0x88, 0xeb, 0x91, 0x1a, 0x8f,
		0x88, 0xc4, 0x80, 0x31, 0x05, 0x1c, 0xd4, 0x1b, 0x52, 0xc9, 0x4f, 0x15, 0x52, 0x97, 0x61, 0xd4,
		0x37, 0x49, 0x73, 0xb0, 0xd5, 0x90, 0xb1, 0x79, 0x32, 0xca, 0x92, 0xd9, 0xaa, 0xc4, 0xa9, 0x14,
		0xa6, 0xe6, 0x49, 0x68, 0x8c, 0x16, 0x00, 0x6c, 0x8b, 0xd8, 0x75, 0xad, 0x46, 0x74, 0xb3, 0x90,
		0xde, 0xc3, 0x4b, 0x6b, 0x54, 0xa5, 0xc7, 0x4b, 0x36, 0x97, 0xea, 0x26, 0x3a, 0xd7, 0x09, 0xb5,
		0xe1, 0x3d, 0x22, 0x65, 0x85, 0x1f, 0xb2, 0x9e, 0x68, 0xdb, 0x82, 0xbc, 0x43, 0x68, 0xdc, 0x93,
		0x9a, 0x58, 0x59, 0x86, 0x19, 0x31, 0x1b, 0xb9, 0x32, 0x55, 0xc0, 0xf8, 0xc2, 0x46, 0x9c, 0xe0,
		0x10, 0x1d, 0x05, 0x5f, 0xa0, 0xb1, 0xb0, 0x02, 0x96, 0x85, 0x72, 0x52, 0xb8, 0x8a, 0x9b, 0x64,
		0xea, 0x2c, 0xe4, 0xc3, 0xee, 0x41, 0x13, 0x90, 0x72, 0x3d, 0xec, 0x78, 0x2c, 0x0a, 0x53, 0x2a,
		0x1f, 0x20, 0x05, 0x12, 0xc4, 0xaa, 0xb1, 0x2c, 0x97, 0x52, 0xe9, 0xcf, 0xa9, 0xc7, 0x61, 0x24,
		0xf4, 0xf8, 0x41, 0x81, 0xc5, 0x97, 0x86, 0x60, 0xa2, 0x5f, 0xcc, 0xf5, 0x0d, 0xff, 0x49, 0x18,
		0xb2, 0xda, 0xcd, 0x6d, 0xe2, 0x14, 0x12, 0x8c, 0x41, 0x8c, 0x50, 0x19, 0x52, 0x26, 0xde, 0x26,
		0x66, 0x21, 0x39, 0x1d, 0x9b, 0xc9, 0xcf, 0x3d, 0x34, 0x50, 0x54, 0xcf, 0x2e, 0x53, 0x88, 0xca,
		0x91, 0xe8, 0x49, 0x48, 0x8a, 0x14, 0x47, 0x19, 0x4e, 0x0c, 0xc6, 0x40, 0x63, 0x51, 0x65, 0x38,
		0x74, 0x0f, 0x64, 0xe8, 0x5f, 0xee, 0xdb, 0x21, 0x66, 0x73, 0x9a, 0x0a, 0xa8, 0x5f, 0xd1, 0x14,
		0xa4, 0x59, 0x98, 0xd5, 0x88, 0x2c, 0x0d, 0xfe, 0x98, 0x6e, 0x4c, 0x8d, 0xd4, 0x71, 0xdb, 0xf4,
		0xb4, 0x6b, 0xd8, 0x6c, 0x13, 0x16, 0x30, 0x19, 0x35, 0x27, 0x84, 0xcf, 0x50, 0x19, 0x3a, 0x0c,
		0x59, 0x1e, 0x95, 0x86, 0x55, 0x23, 0x37, 0x58, 0xf6, 0x49, 0xa9, 0x3c, 0x50, 0x97, 0xa8, 0x84,
		0x3e, 0xfe, 0x8a, 0x6b, 0x5b, 0x72, 0x6b, 0xd9, 0x23, 0xa8, 0x80, 0x3d, 0xfe, 0xf1, 0xee, 0xc4,
		0x77, 0x5f, 0xff, 0xe5, 0x75, 0xc7, 0x62, 0xf1, 0x3b, 0x71, 0x48, 0xb2, 0xf3, 0x36, 0x0a, 0xd9,
		0xcd, 0xe7, 0xd6, 0xab, 0xda, 0xc2, 0xda, 0xd6, 0xfc, 0x72, 0x55, 0x89, 0xa1, 0x3c, 0x00, 0x13,
		0x5c, 0x5c, 0x5e, 0x2b, 0x6f, 0x2a, 0x71, 0x7f, 0xbc, 0xb4, 0xba, 0x79, 0xe6, 0x94, 0x92, 0xf0,
		0x01, 0x5b, 0x5c, 0x90, 0x0c, 0x2a, 0x3c, 0x36, 0xa7, 0xa4, 0x90, 0x02, 0x39, 0x4e, 0xb0, 0x74,
		0xb9, 0xba, 0x70, 0xe6, 0x94, 0x32, 0x14, 0x96, 0x3c, 0x36, 0xa7, 0x0c, 0xa3, 0x11, 0xc8, 0x30,
		0xc9, 0xfc, 0xda, 0xda, 0xb2, 0x92, 0xf6, 0x39, 0x37, 0x36, 0xd5, 0xa5, 0xd5, 0x45, 0x25, 0xe3,
		0x73, 0x2e, 0xaa, 0x6b, 0x5b, 0xeb, 0x0a, 0xf8, 0x0c, 0x2b, 0xd5, 0x8d, 0x8d, 0xf2, 0x62, 0x55,
		0xc9, 0xfa, 0x1a, 0xf3, 0xcf, 0x6d, 0x56, 0x37, 0x94, 0x5c, 0xc8, 0xac, 0xc7, 0xe6, 0x94, 0x11,
		0xff, 0x11, 0xd5, 0xd5, 0xad, 0x15, 0x25, 0x8f, 0xc6, 0x60, 0x84, 0x3f, 0x42, 0x1a, 0x31, 0xda,
		0x25, 0x3a, 0x73, 0x4a, 0x51, 0x3a, 0x86, 0x70, 0x96, 0xb1, 0x90, 0xe0, 0xcc, 0x29, 0x05, 0x15,
		0x2b, 0x90, 0x62, 0xd1, 0x85, 0x10, 0xe4, 0x97, 0xcb, 0xf3, 0xd5, 0x65, 0x6d, 0x6d, 0x7d, 0x73,
		0x69, 0x6d, 0xb5, 0xbc, 0xac, 0xc4, 0x3a, 0x32, 0xb5, 0xfa, 0x37, 0x5b, 0x4b, 0x6a, 0x75, 0x41,
		0x89, 0x07, 0x65, 0xeb, 0xd5, 0xf2, 0x66, 0x75, 0x41, 0x49, 0x14, 0x4f, 0xc0, 0x44, 0xbf, 0x3c,
		0xd3, 0xef, 0x64, 0x14, 0xdf, 0x8a, 0xc1, 0x78, 0x9f, 0x94, 0xd9, 0xf7, 0x14, 0x5d, 0x80, 0x14,
		0x8f, 0x34, 0x5e, 0x44, 0x8e, 0xf7, 0xcd, 0xbd, 0x2c, 0xee, 0x7a, 0x0a, 0x09, 0xc3, 0x05, 0x0b,
		0x69, 0x62, 0x8f, 0x42, 0x4a, 0x29, 0x7a, 0xc2, 0xe9, 0x85, 0x18, 0x14, 0xf6, 0xe2, 0x8e, 0x38,
		0xef, 0xf1, 0xd0, 0x79, 0x3f, 0xdf, 0x6d, 0xc0, 0x91, 0xbd, 0xd7, 0xd0, 0x63, 0xc5, 0x3b, 0x31,
		0x98, 0xec, 0xdf, 0x6f, 0xf4, 0xb5, 0xe1, 0x49, 0x18, 0x6a, 0x12, 0x6f, 0xc7, 0x96, 0x35, 0xf7,
		0x81, 0x3e, 0x99, 0x9c, 0x4e, 0x77, 0xfb, 0x4a, 0xa0, 0x82, 0xa5, 0x20, 0xb1, 0x57, 0xd3, 0xc0,
		0xad, 0xe9, 0xb1, 0xf4, 0xc5, 0x38, 0xdc, 0xdd, 0x97, 0xbc, 0xaf, 0xa1, 0xf7, 0x01, 0x18, 0x56,
		0xab, 0xed, 0xf1, 0xba, 0xca, 0xd3, 0x4c, 0x86, 0x49, 0xd8, 0x11, 0xa6, 0x29, 0xa4, 0xed, 0xf9,
		0xf3, 0x09, 0x36, 0x0f, 0x5c, 0xc4, 0x14, 0xce, 0x76, 0x0c, 0x4d, 0x32, 0x43, 0x0f, 0xed, 0xb1,
		0xd2, 0x9e, 0x92, 0xf5, 0x28, 0x28, 0xba, 0x69, 0x10, 0xcb, 0xd3, 0x5c, 0xcf, 0x21, 0xb8, 0x69,
		0x58, 0x0d, 0x96, 0x47, 0xd3, 0xa5, 0x54, 0x1d, 0x9b, 0x2e, 0x51, 0x47, 0xf9, 0xf4, 0x86, 0x9c,
		0xa5, 0x08, 0x56, 0x2c, 0x9c, 0x00, 0x62, 0x28, 0x84, 0xe0, 0xd3, 0x3e, 0xa2, 0xf8, 0x93, 0x61,
		0xc8, 0x06, 0xba, 0x33, 0x74, 0x04, 0x72, 0x57, 0xf0, 0x35, 0xac, 0xc9, 0x8e, 0x9b, 0x7b, 0x22,
		0x4b, 0x65, 0xeb, 0xa2, 0xeb, 0x7e, 0x14, 0x26, 0x98, 0x8a, 0xdd, 0xf6, 0x88, 0xa3, 0xe9, 0x26,
		0x76, 0x5d, 0xe6, 0xb4, 0x34, 0x53, 0x45, 0x74, 0x6e, 0x8d, 0x4e, 0x55, 0xe4, 0x0c, 0x3a, 0x0d,
		0xe3, 0x0c, 0xd1, 0x6c, 0x9b, 0x9e, 0xd1, 0x32, 0x89, 0x46, 0xdf, 0x01, 0x5c, 0x96, 0x4f, 0x7d,
		0xcb, 0xc6, 0xa8, 0xc6, 0x8a, 0x50, 0xa0, 0x16, 0xb9, 0x68, 0x11, 0xee, 0x63, 0xb0, 0x06, 0xb1,
		0x88, 0x83, 0x3d, 0xa2, 0x91, 0xbf, 0x6b, 0x63, 0xd3, 0xd5, 0xb0, 0x55, 0xd3, 0x76, 0xb0, 0xbb,
		0x53, 0x98, 0x08, 0x12, 0x1c, 0xa4, 0xba, 0x8b, 0x42, 0xb5, 0xca, 0x34, 0xcb, 0x56, 0xed, 0x29,
		0xec, 0xee, 0xa0, 0x12, 0x4c, 0x32, 0x22, 0xd7, 0x73, 0x0c, 0xab, 0xa1, 0xe9, 0x3b, 0x44, 0xbf,
		0xaa, 0xb5, 0xbd, 0xfa, 0xd9, 0xc2, 0x3d, 0x41, 0x06, 0x66, 0xe4, 0x06, 0xd3, 0xa9, 0x50, 0x95,
		0x2d, 0xaf, 0x7e, 0x16, 0x6d, 0x40, 0x8e, 0xee, 0x47, 0xd3, 0xb8, 0x49, 0xb4, 0xba, 0xed, 0xb0,
		0x1a, 0x91, 0xef, 0x73, 0xb8, 0x03, 0x4e, 0x9c, 0x5d, 0x13, 0x80, 0x15, 0xbb, 0x46, 0x4a, 0xa9,
		0x8d, 0xf5, 0x6a, 0x75, 0x41, 0xcd, 0x4a, 0x96, 0x8b, 0xb6, 0x43, 0x63, 0xaa, 0x61, 0xfb, 0x3e,
		0xce, 0xf2, 0x98, 0x6a, 0xd8, 0xd2, 0xc3, 0xa7, 0x61, 0x5c, 0xd7, 0xf9, 0xb2, 0x0d, 0x5d, 0x13,
		0xcd, 0xba, 0x5b, 0x50, 0x42, 0xfe, 0xd2, 0xf5, 0x45, 0xae, 0x20, 0xc2, 0xdc, 0x45, 0xe7, 0xe0,
		0xee, 0x8e, 0xbf, 0x82, 0xc0, 0xb1, 0x9e, 0x55, 0x76, 0x43, 0x4f, 0xc3, 0x78, 0x6b, 0xb7, 0x17,
		0x88, 0x42, 0x4f, 0x6c, 0xed, 0x76, 0xc3, 0x8e, 0xb1, 0x17, 0x30, 0x87, 0xe8, 0xd8, 0x23, 0xb5,
		0xc2, 0x81, 0xa0, 0x76, 0x60, 0x02, 0x9d, 0x04, 0x45, 0xd7, 0x35, 0x62, 0xe1, 0x6d, 0x93, 0x68,
		0xd8, 0x21, 0x16, 0x76, 0x0b, 0x87, 0x83, 0xca, 0x79, 0x5d, 0xaf, 0xb2, 0xd9, 0x32, 0x9b, 0x44,
		0x27, 0x60, 0xcc, 0xde, 0xbe, 0xa2, 0xf3, 0xe0, 0xd2, 0x5a, 0x0e, 0xa9, 0x1b, 0x37, 0x0a, 0xf7,
		0x33, 0x37, 0x8d, 0xd2, 0x09, 0x16, 0x5a, 0xeb, 0x4c, 0x8c, 0x8e, 0x83, 0xa2, 0xbb, 0x3b, 0xd8,
		0x69, 0xb1, 0x22, 0xed, 0xb6, 0xb0, 0x4e, 0x0a, 0xc7, 0xb8, 0x2a, 0x97, 0xaf, 0x4a, 0x31, 0xaa,
		0xc2, 0x61, 0xba, 0x78, 0x0b, 0x5b, 0xb6, 0xd6, 0x76, 0x89, 0xd6, 0x31, 0xd1, 0xdf, 0x8b, 0x07,
		0xa8, 0x59, 0xea, 0xbd, 0x52, 0x6d, 0xcb, 0x25, 0x0b, 0xbe, 0x92, 0xdc, 0x9e, 0xcb, 0x30, 0xd1,
		0xb6, 0x0c, 0xcb, 0x23, 0x4e, 0xcb, 0x21, 0x14, 0xcc, 0x0f, 0x6c, 0xe1, 0x17, 0xc3, 0x7b, 0x34,
		0xdd, 0x5b, 0x41, 0x6d, 0x1e, 0x24, 0xea, 0x78, 0xbb, 0x57, 0x58, 0x2c, 0x41, 0x2e, 0x18, 0x3b,
		0x28, 0x03, 0x3c, 0x7a, 0x94, 0x18, 0xad, 0xa8, 0x95, 0xb5, 0x05, 0x5a, 0x0b, 0x9f, 0xaf, 0x2a,
		0x71, 0x5a, 0x93, 0x97, 0x97, 0x36, 0xab, 0x9a, 0xba, 0xb5, 0xba, 0xb9, 0xb4, 0x52, 0x55, 0x12,
		0x27, 0x32, 0xe9, 0x5f, 0x0e, 0x2b, 0xb7, 0x6e, 0xdd, 0xba, 0x15, 0x2f, 0x7e, 0x10, 0x87, 0x7c,
		0xb8, 0x0f, 0x46, 0x7f, 0x0d, 0x07, 0xe4, 0x4b, 0xab, 0x4b, 0x3c, 0xed, 0xba, 0xe1, 0xb0, 0x70,
		0x6e, 0x62, 0xde, 0x49, 0xfa, 0x3b, 0x31, 0x21, 0xb4, 0x36, 0x88, 0xf7, 0xac, 0xe1, 0xd0, 0x60,
		0x6d, 0x62, 0x0f, 0x2d, 0xc3, 0x61, 0xcb, 0xd6, 0x5c, 0x0f, 0x5b, 0x35, 0xec, 0xd4, 0xb4, 0xce,
		0x75, 0x81, 0x86, 0x75, 0x9d, 0xb8, 0xae, 0xcd, 0x2b, 0x89, 0xcf, 0x72, 0xaf, 0x65, 0x6f, 0x08,
		0xe5, 0x4e, 0x8a, 0x2d, 0x0b, 0xd5, 0xae, 0xa8, 0x49, 0xec, 0x15, 0x35, 0xf7, 0x40, 0xa6, 0x89,
		0x5b, 0x1a, 0xb1, 0x3c, 0x67, 0x97, 0x75, 0x6f, 0x69, 0x35, 0xdd, 0xc4, 0xad, 0x2a, 0x1d, 0x7f,
		0x76, 0x7b, 0x10, 0xf4, 0xe3, 0x4f, 0x13, 0x90, 0x0b, 0x76, 0x70, 0xb4, 0x21, 0xd6, 0x59, 0x9a,
		0x8f, 0xb1, 0x2c, 0x70, 0xf4, 0x8e, 0xfd, 0xde, 0x6c, 0x85, 0xe6, 0xff, 0xd2, 0x10, 0xef, 0xab,
		0x54, 0x8e, 0xa4, 0xb5, 0x97, 0xc6, 0x1a, 0xe1, 0xdd, 0x7a, 0x5a, 0x15, 0x23, 0xb4, 0x08, 0x43,
		0x57, 0x5c, 0xc6, 0x3d, 0xc4, 0xb8, 0xef, 0xbf, 0x33, 0xf7, 0xa5, 0x0d, 0x46, 0x9e, 0xb9, 0xb4,
		0xa1, 0xad, 0xae, 0xa9, 0x2b, 0xe5, 0x65, 0x55, 0xc0, 0xd1, 0x41, 0x48, 0x9a, 0xf8, 0xe6, 0x6e,
		0xb8, 0x52, 0x30, 0xd1, 0xa0, 0x8e, 0x3f, 0x08, 0xc9, 0xeb, 0x04, 0x5f, 0x0d, 0xe7, 0x67, 0x26,
		0xfa, 0x0c, 0x43, 0xff, 0x24, 0xa4, 0x98, 0xbf, 0x10, 0x80, 0xf0, 0x98, 0x72, 0x17, 0x4a, 0x43,
		0xb2, 0xb2, 0xa6, 0xd2, 0xf0, 0x57, 0x20, 0xc7, 0xa5, 0xda, 0xfa, 0x52, 0xb5, 0x52, 0x55, 0xe2,
		0xc5, 0xd3, 0x30, 0xc4, 0x9d, 0x40, 0x8f, 0x86, 0xef, 0x06, 0xe5, 0x2e, 0x31, 0x14, 0x1c, 0x31,
		0x39, 0xbb, 0xb5, 0x32, 0x5f, 0x55, 0x95, 0x78, 0x70, 0x7b, 0xbf, 0x1b, 0x83, 0x6c, 0xa0, 0xa1,
		0xa2, 0xa5, 0x1c, 0x9b, 0xa6, 0x7d, 0x5d, 0xc3, 0xa6, 0x81, 0x5d, 0xb1, 0x3f, 0xc0, 0x44, 0x65,
		0x2a, 0x19, 0xd4, 0x7f, 0x7f, 0x96, 0xd8, 0x7c, 0x23, 0x06, 0x4a, 0x77, 0x33, 0xd6, 0x65, 0x60,
		0xec, 0x73, 0x35, 0xf0, 0xb5, 0x18, 0xe4, 0xc3, 0x1d, 0x58, 0x97, 0x79, 0x47, 0x3e, 0x57, 0xf3,
		0x5e, 0x8d, 0xc1, 0x48, 0xa8, 0xef, 0xfa, 0x8b, 0xb2, 0xee, 0x95, 0x04, 0x8c, 0xf7, 0xc1, 0xa1,
		0xb2, 0x68, 0x50, 0x79, 0xcf, 0xfc, 0xc8, 0x20, 0xcf, 0x9a, 0xa5, 0xf5, 0x6f, 0x1d, 0x3b, 0x9e,
		0xe8, 0x67, 0x8f, 0x83, 0x62, 0xd4, 0x88, 0xe5, 0x19, 0x75, 0x83, 0x38, 0xe2, 0xdd, 0x98, 0x77,
		0xad, 0xa3, 0x1d, 0x39, 0x7f, 0x3d, 0x7e, 0x18, 0x50, 0xcb, 0x76, 0x0d, 0xcf, 0xb8, 0x46, 0x34,
		0xc3, 0x92, 0x2f, 0xd2, 0xb4, 0x8b, 0x4d, 0xaa, 0x8a, 0x9c, 0x59, 0xb2, 0x3c, 0x5f, 0xdb, 0x22,
		0x0d, 0xdc, 0xa5, 0x4d, 0xd3, 0x50, 0x42, 0x55, 0xe4, 0x8c, 0xaf, 0x7d, 0x04, 0x72, 0x35, 0xbb,
		0x4d, 0x1b, 0x02, 0xae, 0x47, 0xb3, 0x5e, 0x4c, 0xcd, 0x72, 0x99, 0xaf, 0x22, 0x3a, 0xb6, 0xce,
		0x1b, 0x7c, 0x4e, 0xcd, 0x72, 0x19, 0x57, 0x79, 0x10, 0x46, 0x71, 0xa3, 0xe1, 0x50, 0x72, 0x49,
		0xc4, 0xdb, 0xd0, 0xbc, 0x2f, 0x66, 0x8a, 0x53, 0x97, 0x20, 0x2d, 0xfd, 0x40, 0x0b, 0x0b, 0xf5,
		0x84, 0xd6, 0xe2, 0xf7, 0x28, 0x71, 0xfa, 0x52, 0x6f, 0xc9, 0xc9, 0x23, 0x90, 0x33, 0x5c, 0xad,
		0x73, 0xa1, 0x17, 0x9f, 0x8e, 0xcf, 0xa4, 0xd5, 0xac, 0xe1, 0xfa, 0x37, 0x38, 0xc5, 0x77, 0xe2,
		0x90, 0x0f, 0x5f, 0x48, 0xa2, 0x05, 0x48, 0x9b, 0xb6, 0x8e, 0x59, 0x20, 0xf0, 0xdb, 0xf0, 0x99,
		0x88, 0x3b, 0xcc, 0xd9, 0x65, 0xa1, 0xaf, 0xfa, 0xc8, 0xa9, 0x1f, 0xc5, 0x20, 0x2d, 0xc5, 0x68,
		0x12, 0x92, 0x2d, 0xec, 0xed, 0x30, 0xba, 0xd4, 0x7c, 0x5c, 0x89, 0xa9, 0x6c, 0x4c, 0xe5, 0x6e,
		0x0b, 0x5b, 0x2c, 0x04, 0x84, 0x9c, 0x8e, 0xe9, 0xbe, 0x9a, 0x04, 0xd7, 0x58, 0x83, 0x6b, 0x37,
		0x9b, 0xc4, 0xf2, 0x5c, 0xb9, 0xaf, 0x42, 0x5e, 0x11, 0x62, 0xf4, 0x10, 0x8c, 0x79, 0x0e, 0x36,
		0xcc, 0x90, 0x6e, 0x92, 0xe9, 0x2a, 0x72, 0xc2, 0x57, 0x2e, 0xc1, 0x41, 0xc9, 0x5b, 0x23, 0x1e,
		0xd6, 0x77, 0x48, 0xad, 0x03, 0x1a, 0x62, 0xb7, 0x5d, 0x07, 0x84, 0xc2, 0x82, 0x98, 0x97, 0xd8,
		0xf9, 0xcb, 0x30, 0xae, 0xdb, 0xcd, 0x6e, 0x4f, 0xcc, 0x2b, 0x5d, 0xef, 0x5d, 0xee, 0x53, 0xb1,
		0xe7, 0xa1, 0xd3, 0x54, 0xbc, 0x15, 0x4f, 0x2c, 0xae, 0xcf, 0xbf, 0x1b, 0x9f, 0x5a, 0xe4, 0xb8,
		0x75, 0xe9, 0x41, 0x95, 0xd4, 0x4d, 0xa2, 0x53, 0xef, 0xc0, 0x9b, 0x47, 0xe1, 0x91, 0x86, 0xe1,
		0xed, 0xb4, 0xb7, 0x67, 0x75, 0xbb, 0x79, 0xb2, 0x61, 0x37, 0xec, 0xce, 0xe7, 0x0c, 0x3a, 0x62,
		0x03, 0xf6, 0x4b, 0x7c, 0xd2, 0xc8, 0xf8, 0xd2, 0xa9, 0xc8, 0xef, 0x1f, 0xa5, 0x55, 0x18, 0x17,
		0xca, 0x1a, 0xbb, 0x53, 0xe5, 0x2d, 0x28, 0xba, 0xe3, 0x0b, 0x79, 0xe1, 0xfd, 0x0f, 0x59, 0x49,
		0x50, 0xc7, 0x04, 0x94, 0xce, 0xf1, 0x26, 0xb5, 0xa4, 0xc2, 0xdd, 0x21, 0x3e, 0x1e, 0xc3, 0xc4,
		0x89, 0x60, 0xfc, 0x40, 0x30, 0x8e, 0x07, 0x18, 0x37, 0x04, 0xb4, 0x54, 0x81, 0x91, 0xfd, 0x70,
		0xfd, 0x40, 0x70, 0xe5, 0x48, 0x90, 0x64, 0x11, 0x46, 0x19, 0x89, 0xde, 0x76, 0x3d, 0xbb, 0xc9,
		0x12, 0xc4, 0x9d, 0x69, 0x7e, 0xf8, 0x21, 0x0f, 0xaa, 0x3c, 0x85, 0x55, 0x7c, 0x54, 0xe9, 0x19,
		0x98, 0xa0, 0x12, 0x76, 0x06, 0x83, 0x6c, 0xd1, 0x57, 0x08, 0x85, 0x1f, 0xbf, 0xc0, 0x63, 0x6f,
		0xdc, 0x27, 0x08, 0xf0, 0x06, 0x76, 0xa2, 0x41, 0x3c, 0x8f, 0x38, 0xae, 0x86, 0x4d, 0x13, 0xdd,
		0xf1, 0x1b, 0x43, 0xe1, 0xe5, 0x8f, 0xc2, 0x3b, 0xb1, 0xc8, 0x91, 0x65, 0xd3, 0x2c, 0x6d, 0xc1,
		0x81, 0x3e, 0x3b, 0x3b, 0x00, 0xe7, 0x2b, 0x82, 0x73, 0xa2, 0x67, 0x77, 0x29, 0xed, 0x3a, 0x48,
		0xb9, 0xbf, 0x1f, 0x03, 0x70, 0xbe, 0x2a, 0x38, 0x91, 0xc0, 0xca, 0x6d, 0xa1, 0x8c, 0x97, 0x60,
		0xec, 0x1a, 0x71, 0xb6, 0x6d, 0x57, 0xbc, 0xf7, 0x0e, 0x40, 0xf7, 0x9a, 0xa0, 0x1b, 0x15, 0x40,
		0xf6, 0x16, 0x4c, 0xb9, 0xce, 0x41, 0xba, 0x8e, 0x75, 0x32, 0x00, 0xc5, 0xeb, 0x82, 0x62, 0x98,
		0xea, 0x53, 0x68, 0x19, 0x72, 0x0d, 0x5b, 0xa4, 0xe1, 0x68, 0xf8, 0x1b, 0x02, 0x9e, 0x95, 0x18,
		0x41, 0xd1, 0xb2, 0x5b, 0x6d, 0x93, 0xe6, 0xe8, 0x68, 0x8a, 0xff, 0x93, 0x14, 0x12, 0x23, 0x28,
		0xf6, 0xe1, 0xd6, 0xff, 0x97, 0x14, 0x6e, 0xc0, 0x9f, 0x17, 0x20, 0x6b, 0x5b, 0xe6, 0xae, 0x6d,
		0x0d, 0x62, 0xc4, 0x9b, 0x82, 0x01, 0x04, 0x84, 0x12, 0x9c, 0x87, 0xcc, 0xa0, 0x1b, 0xf1, 0xb6,
		0x80, 0xa7, 0x89, 0xdc, 0x81, 0x45, 0x18, 0x95, 0x49, 0xc6, 0xb0, 0xad, 0x01, 0x28, 0xbe, 0x20,
		0x28, 0xf2, 0x01, 0x98, 0x58, 0x86, 0x47, 0x5c, 0xaf, 0x41, 0x06, 0x21, 0x79, 0x47, 0x2e, 0x43,
		0x40, 0x84, 0x2b, 0xb7, 0x89, 0xa5, 0xef, 0x0c, 0xc6, 0xf0, 0x45, 0xe9, 0x4a, 0x89, 0xa1, 0x14,
		0x15, 0x18, 0x69, 0x62, 0xc7, 0xdd, 0xc1, 0xe6, 0x40, 0xdb, 0xf1, 0x25, 0xc1, 0x91, 0xf3, 0x41,
		0xc2, 0x23, 0x6d, 0x6b, 0x3f, 0x34, 0xef, 0x4a, 0x8f, 0x04, 0x60, 0xe2, 0xe8, 0xb9, 0x1e, 0xbb,
		0x5a, 0xd8, 0x0f, 0xdb, 0x97, 0xe5, 0xd1, 0xe3, 0xd8, 0x95, 0x20, 0xe3, 0x79, 0xc8, 0xb8, 0xc6,
		0xcd, 0x81, 0x68, 0xbe, 0x22, 0x77, 0x9a, 0x01, 0x28, 0xf8, 0x39, 0x38, 0xd8, 0x37, 0xd5, 0x0f,
		0x40, 0xf6, 0x55, 0x41, 0x36, 0xd9, 0x27, 0xdd, 0x8b, 0x94, 0xb0, 0x5f, 0xca, 0xaf, 0xc9, 0x94,
		0x40, 0xba, 0xb8, 0xd6, 0x69, 0x1b, 0xeb, 0xe2, 0xfa, 0xfe, 0xbc, 0xf6, 0x75, 0xe9, 0x35, 0x8e,
		0x0d, 0x79, 0x6d, 0x13, 0x26, 0x05, 0xe3, 0xfe, 0xf6, 0xf5, 0x3d, 0x99, 0x58, 0x39, 0x7a, 0x2b,
		0xbc, 0xbb, 0x7f, 0x0b, 0x53, 0xbe, 0x3b, 0x65, 0x07, 0xe6, 0x6a, 0x4d, 0xdc, 0x1a, 0x80, 0xf9,
		0x7d, 0xc1, 0x2c, 0x33, 0xbe, 0xdf, 0xc2, 0xb9, 0x2b, 0xb8, 0x45, 0xc9, 0x2f, 0x43, 0x41, 0x92,
		0xb7, 0x2d, 0x87, 0xe8, 0x76, 0xc3, 0x32, 0x6e, 0x92, 0xda, 0x00, 0xd4, 0xdf, 0xe8, 0xda, 0xaa,
		0xad, 0x00, 0x9c, 0x32, 0x2f, 0x81, 0xe2, 0xf7, 0x1b, 0x9a, 0xd1, 0x6c, 0xd9, 0x8e, 0x17, 0xc1,
		0xf8, 0x4d, 0xb9, 0x53, 0x3e, 0x6e, 0x89, 0xc1, 0x4a, 0x55, 0xc8, 0xb3, 0xe1, 0xa0, 0x21, 0xf9,
		0x2d, 0x41, 0x34, 0xd2, 0x41, 0x89, 0xc4, 0xa1, 0xdb, 0xcd, 0x16, 0x76, 0x06, 0xc9, 0x7f, 0xdf,
		0x96, 0x89, 0x43, 0x40, 0x78, 0xf4, 0x8d, 0x76, 0x55, 0x62, 0x14, 0xf5, 0xf9, 0xb5, 0xf0, 0xf7,
		0xb7, 0xc5, 0x99, 0x0d, 0x17, 0xe2, 0xd2, 0x32, 0x75, 0x4f, 0xb8, 0x5c, 0x46, 0x93, 0xbd, 0x70,
		0xdb, 0xf7, 0x50, 0xa8, 0x5a, 0x96, 0x2e, 0xc2, 0x48, 0xa8, 0x54, 0x46, 0x53, 0xfd, 0x83, 0xa0,
		0xca, 0x05, 0x2b, 0x65, 0xe9, 0x34, 0x24, 0x69, 0xd9, 0x8b, 0x86, 0xff, 0xa3, 0x80, 0x33, 0xf5,
		0xd2, 0x13, 0x90, 0x96, 0xe5, 0x2e, 0x1a, 0xfa, 0x4f, 0x02, 0xea, 0x43, 0x28, 0x5c, 0x96, 0xba,
		0x68, 0xf8, 0x3f, 0x4b, 0xb8, 0x84, 0x50, 0xf8, 0xe0, 0x2e, 0xfc, 0xde, 0xbf, 0x24, 0x45, 0xba,
		0x92, 0xbe, 0x3b, 0x0f, 0xc3, 0xa2, 0xc6, 0x45, 0xa3, 0x5f, 0x14, 0x0f, 0x97, 0x88, 0xd2, 0xe3,
		0x90, 0x1a, 0xd0, 0xe1, 0xff, 0x2a, 0xa0, 0x5c, 0xbf, 0x54, 0x81, 0x6c, 0xa0, 0xae, 0x45, 0xc3,
		0xff, 0x4d, 0xc0, 0x83, 0x28, 0x6a, 0xba, 0xa8, 0x6b, 0xd1, 0x04, 0xff, 0x2e, 0x4d, 0x17, 0x08,
		0xea, 0x36, 0x59, 0xd2, 0xa2, 0xd1, 0xff, 0x21, 0xbd, 0x2e, 0x21, 0xa5, 0x0b, 0x90, 0xf1, 0xd3,
		0x54, 0x34, 0xfe, 0x3f, 0x05, 0xbe, 0x83, 0xa1, 0x1e, 0x08, 0xa4, 0xc9, 0x68, 0x8a, 0xff, 0x92,
		0x1e, 0x08, 0xa0, 0xe8, 0x31, 0xea, 0x2e, 0x7d, 0xd1, 0x4c, 0xff, 0x2d, 0x8f, 0x51, 0x57, 0xe5,
		0xa3, 0xbb, 0xc9, 0xb2, 0x45, 0x34, 0xc5, 0xff, 0xc8, 0xdd, 0x64, 0xfa, 0xd4, 0x8c, 0xee, 0x5a,
		0x12, 0xcd, 0xf1, 0xbf, 0xd2, 0x8c, 0xae, 0x52, 0x52, 0x5a, 0x07, 0xd4, 0x5b, 0x47, 0xa2, 0xf9,
		0x5e, 0x12, 0x7c, 0x63, 0x3d, 0x65, 0xa4, 0xf4, 0x2c, 0x4c, 0xf6, 0xaf, 0x21, 0xd1, 0xac, 0x2f,
		0xdf, 0xee, 0xea, 0xfa, 0x83, 0x25, 0xa4, 0xb4, 0xd9, 0xe9, 0xfa, 0x83, 0xf5, 0x23, 0x9a, 0xf6,
		0x95, 0xdb, 0xe1, 0x17, 0xbb, 0x60, 0xf9, 0x28, 0x95, 0x01, 0x3a, 0xa9, 0x3b, 0x9a, 0xeb, 0x35,
		0xc1, 0x15, 0x00, 0xd1, 0xa3, 0x21, 0x32, 0x77, 0x34, 0xfe, 0x75, 0x79, 0x34, 0x04, 0xa2, 0x74,
		0x1e, 0xd2, 0x56, 0xdb, 0x34, 0x69, 0x70, 0xa0, 0x3b, 0xff, 0x4b, 0x43, 0xe1, 0x57, 0x9f, 0x88,
		0x83, 0x21, 0x01, 0xa5, 0xd3, 0x90, 0x22, 0xcd, 0x6d, 0x52, 0x8b, 0x42, 0xfe, 0xfa, 0x13, 0x99,
		0x10, 0xa8, 0x76, 0xe9, 0x02, 0x00, 0x7f, 0x69, 0x64, 0x77, 0xd8, 0x11, 0xd8, 0xdf, 0x7c, 0x22,
		0x3e, 0xb3, 0x76, 0x20, 0x1d, 0x02, 0xfe, 0xd1, 0xf6, 0xce, 0x04, 0x1f, 0x85, 0x09, 0xd8, 0x8b,
		0xe6, 0x39, 0x18, 0xbe, 0xe2, 0xda, 0x96, 0x87, 0x1b, 0x51, 0xe8, 0xdf, 0x0a, 0xb4, 0xd4, 0xa7,
		0x0e, 0x6b, 0xda, 0x0e, 0xf1, 0x70, 0xc3, 0x8d, 0xc2, 0xfe, 0x4e, 0x60, 0x7d, 0x00, 0x05, 0xeb,
		0xd8, 0xf5, 0x06, 0x59, 0xf7, 0xef, 0x25, 0x58, 0x02, 0xa8, 0xd1, 0xf4, 0xf7, 0x55, 0xb2, 0x1b,
		0x85, 0xfd, 0x58, 0x1a, 0x2d, 0xf4, 0x4b, 0x4f, 0x40, 0x86, 0xfe, 0xe4, 0xff, 0x7a, 0x10, 0x01,
		0xfe, 0x83, 0x00, 0x77, 0x10, 0xf3, 0x47, 0xfa, 0x5f, 0xed, 0xc0, 0xa2, 0xbd, 0x68, 0xf3, 0x4b,
		0x1d, 0x78, 0x3b, 0x29, 0x3a, 0x17, 0xab, 0xdd, 0x14, 0x97, 0x30, 0x69, 0x39, 0x9e, 0xda, 0xdf,
		0xed, 0x4d, 0xb1, 0x04, 0x69, 0xc6, 0xba, 0xda, 0x6e, 0xa2, 0x59, 0x48, 0x3f, 0x4d, 0x76, 0x9f,
		0x09, 0xfc, 0xaf, 0x05, 0x9a, 0xf5, 0x9f, 0x23, 0x67, 0xd4, 0xf4, 0x55, 0xf1, 0xab, 0x38, 0xd7,
		0xd1, 0x47, 0x0a, 0x24, 0x9e, 0x26, 0xbb, 0xe2, 0xb3, 0x76, 0x82, 0xfa, 0x6d, 0x02, 0x52, 0x92,
		0x8a, 0xca, 0xf8, 0xff, 0x62, 0x14, 0x9f, 0x07, 0xd8, 0xb4, 0x5b, 0xee, 0xee, 0x66, 0xdb, 0xb9,
		0xb6, 0x8b, 0x8e, 0x41, 0x8a, 0x8d, 0x18, 0x2e, 0x3b, 0x37, 0xda, 0x79, 0x1c, 0x13, 0xab, 0x29,
		0x8f, 0xfe, 0x61, 0x6a, 0x54, 0x9f, 0x51, 0x85, 0xd5, 0xa8, 0x58, 0x4d, 0x79, 0xf4, 0x4f, 0xf1,
		0xa8, 0x60, 0x43, 0x39, 0x88, 0x95, 0x19, 0x65, 0x42, 0x8d, 0x61, 0x3a, 0x9a, 0x67, 0xc8, 0x84,
		0x1a, 0xdb, 0x66, 0x4a, 0xec, 0xd9, 0x4c, 0x2c, 0x94, 0xb6, 0x39, 0x44, 0x28, 0xe1, 0x62, 0x1b,
		0x92, 0x4f, 0x5b, 0xb6, 0x87, 0x8e, 0x43, 0x6a, 0xde, 0x68, 0xec, 0x78, 0xe2, 0xee, 0x71, 0xbc,
		0xf3, 0x60, 0x26, 0xa6, 0x3a, 0x6a, 0x6a, 0x9b, 0xfe, 0xa4, 0xcb, 0xad, 0x9a, 0xdb, 0xf6, 0x75,
		0xf1, 0x79, 0x23, 0x45, 0xe8, 0x00, 0x3d, 0x0c, 0x99, 0x79, 0x83, 0xb6, 0x66, 0x55, 0xab, 0x26,
		0xfe, 0x9f, 0x22, 0x1f, 0xf0, 0x29, 0xc5, 0x67, 0xb6, 0xa5, 0x42, 0xb1, 0x42, 0xb5, 0x05, 0x2f,
		0x2a, 0x42, 0x72, 0xd9, 0xb6, 0x5b, 0xc2, 0x35, 0xdd, 0xa8, 0xa4, 0x69, 0xdb, 0x2d, 0x84, 0x20,
		0xb9, 0xd9, 0x76, 0x2c, 0xf1, 0xcc, 0xa4, 0xd7, 0x76, 0xac, 0xf9, 0xf4, 0xc7, 0x3f, 0x3b, 0x14,
		0x7b, 0xef, 0xe7, 0x87, 0x62, 0x7f, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x3c, 0xbf, 0xf0, 0x92,
		0x2c, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *ProtoNum) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protonum.ProtoNum{")
	if this.KeyValue != nil {
		s = append(s, "KeyValue: "+fmt.Sprintf("%#v", this.KeyValue)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KeyValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protonum.KeyValue{")
	if this.Key != nil {
		s = append(s, "Key: "+valueToGoStringProtonum(this.Key, "string")+",\n")
	}
	if this.Value != nil {
		s = append(s, "Value: "+valueToGoStringProtonum(this.Value, "string")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TopsyTurvy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protonum.TopsyTurvy{")
	if this.Topsy != nil {
		s = append(s, "Topsy: "+fmt.Sprintf("%#v", this.Topsy)+",\n")
	}
	if this.Turvy != nil {
		s = append(s, "Turvy: "+fmt.Sprintf("%#v", this.Turvy)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Topsy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protonum.Topsy{")
	if this.A != nil {
		s = append(s, "A: "+valueToGoStringProtonum(this.A, "int64")+",\n")
	}
	if this.B != nil {
		s = append(s, "B: "+valueToGoStringProtonum(this.B, "int64")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Turvy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protonum.Turvy{")
	if this.B != nil {
		s = append(s, "B: "+valueToGoStringProtonum(this.B, "int64")+",\n")
	}
	if this.A != nil {
		s = append(s, "A: "+valueToGoStringProtonum(this.A, "int64")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Knot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&protonum.Knot{")
	if this.Bight != nil {
		s = append(s, "Bight: "+fmt.Sprintf("%#v", this.Bight)+",\n")
	}
	if this.Elbow != nil {
		s = append(s, "Elbow: "+valueToGoStringProtonum(this.Elbow, "bool")+",\n")
	}
	if this.BitterEnd != nil {
		s = append(s, "BitterEnd: "+fmt.Sprintf("%#v", this.BitterEnd)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BightKnot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protonum.BightKnot{")
	if this.Loop != nil {
		s = append(s, "Loop: "+fmt.Sprintf("%#v", this.Loop)+",\n")
	}
	if this.Turn != nil {
		s = append(s, "Turn: "+valueToGoStringProtonum(this.Turn, "bool")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProtonum(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringProtonum(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}

func init() { proto.RegisterFile("protonum.proto", fileDescriptorProtonum) }

var fileDescriptorProtonum = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x90, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0x89, 0x6d, 0xa0, 0x3b, 0x93, 0x29, 0xd1, 0x8b, 0xe2, 0xc5, 0x18, 0x15, 0x61, 0x82,
	0x76, 0xb0, 0x4b, 0xef, 0xac, 0xec, 0x6a, 0x22, 0x12, 0x86, 0x17, 0xde, 0x2d, 0x1a, 0xbb, 0xb1,
	0xad, 0x29, 0x35, 0x99, 0xf4, 0xad, 0x7c, 0x25, 0x7d, 0x02, 0x1f, 0x41, 0xce, 0x59, 0x6a, 0xd5,
	0xab, 0x9c, 0xff, 0xe4, 0xfb, 0xff, 0xbf, 0x0d, 0xf4, 0xca, 0xca, 0x58, 0x53, 0xb8, 0x4d, 0x4a,
	0x83, 0x88, 0x1a, 0x7d, 0x72, 0x99, 0x2f, 0xed, 0xc2, 0xa9, 0xf4, 0xc9, 0x6c, 0x46, 0xb9, 0xc9,
	0xcd, 0x88, 0x6e, 0x94, 0x7b, 0x21, 0x45, 0x82, 0xa6, 0x9d, 0x31, 0xb9, 0x82, 0xe8, 0x1e, 0x87,
	0x3b, 0xb7, 0x11, 0x29, 0x44, 0x53, 0x5d, 0x3f, 0xcc, 0xd7, 0x4e, 0xc7, 0x7b, 0x83, 0x60, 0xd8,
	0x1d, 0x8b, 0xf4, 0xa7, 0xa7, 0xb9, 0x91, 0xd1, 0xca, 0x4f, 0xc9, 0xb8, 0xe5, 0xc5, 0x21, 0x04,
	0x53, 0x5d, 0xc7, 0x6c, 0xc0, 0x86, 0x1d, 0x19, 0xac, 0x74, 0x2d, 0x8e, 0x81, 0x37, 0x51, 0xb8,
	0xe3, 0x5b, 0xf2, 0x3c, 0x02, 0xcc, 0x4c, 0xf9, 0x5a, 0xcf, 0x5c, 0xb5, 0xad, 0xc5, 0x19, 0x70,
	0x52, 0xe4, 0xeb, 0x8e, 0x0f, 0xda, 0x3a, 0x5a, 0x4b, 0x6e, 0xf1, 0x20, 0x0c, 0x79, 0x8a, 0xfa,
	0x8b, 0xe1, 0x5a, 0x72, 0x8b, 0x47, 0x72, 0xea, 0xd3, 0xc4, 0x3e, 0xb0, 0x6b, 0x8a, 0x0c, 0x24,
	0x9b, 0xa3, 0xca, 0xc8, 0x19, 0x48, 0xa6, 0x08, 0xa2, 0x6e, 0x5a, 0x7b, 0x48, 0xed, 0x2c, 0x1e,
	0x9a, 0x27, 0x0e, 0xc2, 0x69, 0x61, 0xac, 0x38, 0x07, 0x9e, 0x2d, 0xf3, 0x85, 0x8d, 0x19, 0x3d,
	0xc7, 0x51, 0x5b, 0x4c, 0x6b, 0x64, 0x24, 0x57, 0x38, 0xe2, 0xef, 0x4e, 0xd6, 0xca, 0xbc, 0x51,
	0x48, 0x24, 0xb9, 0x46, 0x21, 0x2e, 0xa0, 0x93, 0x2d, 0xad, 0xd5, 0xd5, 0xa4, 0x78, 0x8e, 0x03,
	0xfa, 0xfa, 0xde, 0xaf, 0x37, 0x45, 0x7f, 0x47, 0x35, 0x40, 0x72, 0x83, 0xb4, 0xcf, 0x15, 0x09,
	0x84, 0xb7, 0xc6, 0x94, 0xfe, 0x69, 0xfe, 0xbb, 0xc2, 0xb5, 0x31, 0xa5, 0x10, 0x10, 0xce, 0x5c,
	0x55, 0xf8, 0xce, 0xd0, 0xba, 0xaa, 0xc8, 0xa2, 0xaf, 0x8f, 0x3e, 0x7b, 0xff, 0xec, 0xb3, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x42, 0x9c, 0x32, 0x72, 0x25, 0x02, 0x00, 0x00,
}
