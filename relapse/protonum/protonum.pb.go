// Code generated by protoc-gen-gogo.
// source: protonum.proto
// DO NOT EDIT!

/*
Package protonum is a generated protocol buffer package.

It is generated from these files:
	protonum.proto

It has these top-level messages:
	ProtoNum
	KeyValue
	TopsyTurvy
	Topsy
	Turvy
	Knot
	BightKnot
*/
package protonum

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// ProtoNum is used for testing of the protonum package.
type ProtoNum struct {
	KeyValue         []*KeyValue `protobuf:"bytes,2,rep,name=KeyValue" json:"KeyValue,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ProtoNum) Reset()                    { *m = ProtoNum{} }
func (m *ProtoNum) String() string            { return proto.CompactTextString(m) }
func (*ProtoNum) ProtoMessage()               {}
func (*ProtoNum) Descriptor() ([]byte, []int) { return fileDescriptorProtonum, []int{0} }

func (m *ProtoNum) GetKeyValue() []*KeyValue {
	if m != nil {
		return m.KeyValue
	}
	return nil
}

// KeyValue is used for testing of the protonum package.
type KeyValue struct {
	Key              *string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
	Value            *string `protobuf:"bytes,2,opt,name=Value" json:"Value,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptorProtonum, []int{1} }

func (m *KeyValue) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *KeyValue) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

// TopsyTurvy is used for testing of the protonum package.
type TopsyTurvy struct {
	Topsy            *Topsy `protobuf:"bytes,1,opt,name=Topsy" json:"Topsy,omitempty"`
	Turvy            *Turvy `protobuf:"bytes,2,opt,name=Turvy" json:"Turvy,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TopsyTurvy) Reset()                    { *m = TopsyTurvy{} }
func (m *TopsyTurvy) String() string            { return proto.CompactTextString(m) }
func (*TopsyTurvy) ProtoMessage()               {}
func (*TopsyTurvy) Descriptor() ([]byte, []int) { return fileDescriptorProtonum, []int{2} }

func (m *TopsyTurvy) GetTopsy() *Topsy {
	if m != nil {
		return m.Topsy
	}
	return nil
}

func (m *TopsyTurvy) GetTurvy() *Turvy {
	if m != nil {
		return m.Turvy
	}
	return nil
}

// Topsy is used for testing of the protonum package.
type Topsy struct {
	A                *int64 `protobuf:"varint,1,opt,name=A" json:"A,omitempty"`
	B                *int64 `protobuf:"varint,2,opt,name=B" json:"B,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Topsy) Reset()                    { *m = Topsy{} }
func (m *Topsy) String() string            { return proto.CompactTextString(m) }
func (*Topsy) ProtoMessage()               {}
func (*Topsy) Descriptor() ([]byte, []int) { return fileDescriptorProtonum, []int{3} }

func (m *Topsy) GetA() int64 {
	if m != nil && m.A != nil {
		return *m.A
	}
	return 0
}

func (m *Topsy) GetB() int64 {
	if m != nil && m.B != nil {
		return *m.B
	}
	return 0
}

// Turvy is used for testing of the protonum package.
type Turvy struct {
	B                *int64 `protobuf:"varint,1,opt,name=B" json:"B,omitempty"`
	A                *int64 `protobuf:"varint,2,opt,name=A" json:"A,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Turvy) Reset()                    { *m = Turvy{} }
func (m *Turvy) String() string            { return proto.CompactTextString(m) }
func (*Turvy) ProtoMessage()               {}
func (*Turvy) Descriptor() ([]byte, []int) { return fileDescriptorProtonum, []int{4} }

func (m *Turvy) GetB() int64 {
	if m != nil && m.B != nil {
		return *m.B
	}
	return 0
}

func (m *Turvy) GetA() int64 {
	if m != nil && m.A != nil {
		return *m.A
	}
	return 0
}

// Knot is used for testing of the protonum package.
type Knot struct {
	Bight            []*BightKnot `protobuf:"bytes,1,rep,name=Bight" json:"Bight,omitempty"`
	Elbow            *bool        `protobuf:"varint,2,opt,name=Elbow" json:"Elbow,omitempty"`
	BitterEnd        *Knot        `protobuf:"bytes,3,opt,name=BitterEnd" json:"BitterEnd,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *Knot) Reset()                    { *m = Knot{} }
func (m *Knot) String() string            { return proto.CompactTextString(m) }
func (*Knot) ProtoMessage()               {}
func (*Knot) Descriptor() ([]byte, []int) { return fileDescriptorProtonum, []int{5} }

func (m *Knot) GetBight() []*BightKnot {
	if m != nil {
		return m.Bight
	}
	return nil
}

func (m *Knot) GetElbow() bool {
	if m != nil && m.Elbow != nil {
		return *m.Elbow
	}
	return false
}

func (m *Knot) GetBitterEnd() *Knot {
	if m != nil {
		return m.BitterEnd
	}
	return nil
}

// BightKnot is used for testing of the protonum package.
type BightKnot struct {
	Loop             *Knot  `protobuf:"bytes,1,opt,name=Loop" json:"Loop,omitempty"`
	Turn             *bool  `protobuf:"varint,2,opt,name=Turn" json:"Turn,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BightKnot) Reset()                    { *m = BightKnot{} }
func (m *BightKnot) String() string            { return proto.CompactTextString(m) }
func (*BightKnot) ProtoMessage()               {}
func (*BightKnot) Descriptor() ([]byte, []int) { return fileDescriptorProtonum, []int{6} }

func (m *BightKnot) GetLoop() *Knot {
	if m != nil {
		return m.Loop
	}
	return nil
}

func (m *BightKnot) GetTurn() bool {
	if m != nil && m.Turn != nil {
		return *m.Turn
	}
	return false
}

func init() {
	proto.RegisterType((*ProtoNum)(nil), "protonum.ProtoNum")
	proto.RegisterType((*KeyValue)(nil), "protonum.KeyValue")
	proto.RegisterType((*TopsyTurvy)(nil), "protonum.TopsyTurvy")
	proto.RegisterType((*Topsy)(nil), "protonum.Topsy")
	proto.RegisterType((*Turvy)(nil), "protonum.Turvy")
	proto.RegisterType((*Knot)(nil), "protonum.Knot")
	proto.RegisterType((*BightKnot)(nil), "protonum.BightKnot")
}
func (this *ProtoNum) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return ProtonumDescription()
}
func (this *KeyValue) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return ProtonumDescription()
}
func (this *TopsyTurvy) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return ProtonumDescription()
}
func (this *Topsy) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return ProtonumDescription()
}
func (this *Turvy) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return ProtonumDescription()
}
func (this *Knot) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return ProtonumDescription()
}
func (this *BightKnot) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return ProtonumDescription()
}
func ProtonumDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 3645 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x5a, 0x5b, 0x70, 0x1c, 0xd5,
		0x99, 0x66, 0x6e, 0xd2, 0xcc, 0x3f, 0xa3, 0x51, 0xeb, 0x48, 0xc8, 0x63, 0x01, 0xb6, 0x3c, 0x60,
		0x90, 0xb9, 0xc8, 0x94, 0xb0, 0x8d, 0xdd, 0x5e, 0x70, 0xcd, 0x8c, 0xc6, 0x42, 0x46, 0x37, 0x5a,
		0x12, 0x18, 0x78, 0xe8, 0x6a, 0x75, 0x9f, 0x19, 0xb5, 0xdd, 0xd3, 0x3d, 0xdb, 0xdd, 0x63, 0x5b,
		0x7e, 0x32, 0xc5, 0x5e, 0x8a, 0xa2, 0xf6, 0xbe, 0x55, 0xcb, 0x7d, 0x59, 0xaa, 0x58, 0x76, 0xd9,
		0x1b, 0x6c, 0x12, 0x92, 0xca, 0x53, 0x5e, 0x48, 0xf2, 0x94, 0x2a, 0xde, 0xf3, 0x92, 0x14, 0x55,
		0xb9, 0x39, 0x09, 0x09, 0xae, 0xca, 0x83, 0x5f, 0x52, 0xe7, 0xd6, 0xd3, 0x73, 0x91, 0x7b, 0x44,
		0x15, 0x90, 0x27, 0xcd, 0xf9, 0xcf, 0xff, 0x7d, 0xfd, 0x9f, 0xff, 0xfc, 0xe7, 0xff, 0xff, 0x3e,
		0x2d, 0x78, 0xe1, 0x18, 0x4c, 0xd7, 0x1d, 0xa7, 0x6e, 0xe1, 0xa3, 0x4d, 0xd7, 0xf1, 0x9d, 0xad,
		0x56, 0xed, 0xa8, 0x81, 0x3d, 0xdd, 0x35, 0x9b, 0xbe, 0xe3, 0xce, 0x52, 0x19, 0x1a, 0x65, 0x1a,
		0xb3, 0x42, 0xa3, 0xb8, 0x0c, 0x63, 0x67, 0x4d, 0x0b, 0xcf, 0x07, 0x8a, 0xeb, 0xd8, 0x47, 0x27,
		0x21, 0x59, 0x33, 0x2d, 0x5c, 0x88, 0x4d, 0x27, 0x66, 0xb2, 0x73, 0xf7, 0xcc, 0x76, 0x81, 0x66,
		0x3b, 0x11, 0x6b, 0x44, 0xac, 0x50, 0x44, 0xf1, 0xd3, 0x24, 0x8c, 0xf7, 0x99, 0x45, 0x08, 0x92,
		0xb6, 0xd6, 0x20, 0x8c, 0xb1, 0x99, 0x8c, 0x42, 0x7f, 0xa3, 0x02, 0x0c, 0x37, 0x35, 0xfd, 0xa2,
		0x56, 0xc7, 0x85, 0x38, 0x15, 0x8b, 0x21, 0x3a, 0x00, 0x60, 0xe0, 0x26, 0xb6, 0x0d, 0x6c, 0xeb,
		0x3b, 0x85, 0xc4, 0x74, 0x62, 0x26, 0xa3, 0x84, 0x24, 0xe8, 0x01, 0x18, 0x6b, 0xb6, 0xb6, 0x2c,
		0x53, 0x57, 0x43, 0x6a, 0x30, 0x9d, 0x98, 0x49, 0x29, 0x12, 0x9b, 0x98, 0x6f, 0x2b, 0xdf, 0x07,
		0xa3, 0x97, 0xb1, 0x76, 0x31, 0xac, 0x9a, 0xa5, 0xaa, 0x79, 0x22, 0x0e, 0x29, 0x56, 0x20, 0xd7,
		0xc0, 0x9e, 0xa7, 0xd5, 0xb1, 0xea, 0xef, 0x34, 0x71, 0x21, 0x49, 0x57, 0x3f, 0xdd, 0xb3, 0xfa,
		0xee, 0x95, 0x67, 0x39, 0x6a, 0x63, 0xa7, 0x89, 0x51, 0x09, 0x32, 0xd8, 0x6e, 0x35, 0x18, 0x43,
		0x6a, 0x17, 0xff, 0x55, 0xed, 0x56, 0xa3, 0x9b, 0x25, 0x4d, 0x60, 0x9c, 0x62, 0xd8, 0xc3, 0xee,
		0x25, 0x53, 0xc7, 0x85, 0x21, 0x4a, 0x70, 0x5f, 0x0f, 0xc1, 0x3a, 0x9b, 0xef, 0xe6, 0x10, 0x38,
		0x54, 0x81, 0x0c, 0xbe, 0xe2, 0x63, 0xdb, 0x33, 0x1d, 0xbb, 0x30, 0x4c, 0x49, 0x0e, 0xf7, 0xd9,
		0x45, 0x6c, 0x19, 0xdd, 0x14, 0x6d, 0x1c, 0x3a, 0x01, 0xc3, 0x4e, 0xd3, 0x37, 0x1d, 0xdb, 0x2b,
		0xa4, 0xa7, 0x63, 0x33, 0xd9, 0xb9, 0x3b, 0xfb, 0x06, 0xc2, 0x2a, 0xd3, 0x51, 0x84, 0x32, 0x5a,
		0x04, 0xc9, 0x73, 0x5a, 0xae, 0x8e, 0x55, 0xdd, 0x31, 0xb0, 0x6a, 0xda, 0x35, 0xa7, 0x90, 0xa1,
		0x04, 0x07, 0x7b, 0x17, 0x42, 0x15, 0x2b, 0x8e, 0x81, 0x17, 0xed, 0x9a, 0xa3, 0xe4, 0xbd, 0x8e,
		0x31, 0x9a, 0x84, 0x21, 0x6f, 0xc7, 0xf6, 0xb5, 0x2b, 0x85, 0x1c, 0x8d, 0x10, 0x3e, 0x2a, 0xfe,
		0x21, 0x05, 0xa3, 0x83, 0x84, 0xd8, 0x69, 0x48, 0xd5, 0xc8, 0x2a, 0x0b, 0xf1, 0xbd, 0xf8, 0x80,
		0x61, 0x3a, 0x9d, 0x38, 0xf4, 0x05, 0x9d, 0x58, 0x82, 0xac, 0x8d, 0x3d, 0x1f, 0x1b, 0x2c, 0x22,
		0x12, 0x03, 0xc6, 0x14, 0x30, 0x50, 0x6f, 0x48, 0x25, 0xbf, 0x50, 0x48, 0x9d, 0x87, 0xd1, 0xc0,
		0x24, 0xd5, 0xd5, 0xec, 0xba, 0x88, 0xcd, 0xa3, 0x51, 0x96, 0xcc, 0x56, 0x05, 0x4e, 0x21, 0x30,
		0x25, 0x8f, 0x3b, 0xc6, 0x68, 0x1e, 0xc0, 0xb1, 0xb1, 0x53, 0x53, 0x0d, 0xac, 0x5b, 0x85, 0xf4,
		0x2e, 0x5e, 0x5a, 0x25, 0x2a, 0x3d, 0x5e, 0x72, 0x98, 0x54, 0xb7, 0xd0, 0xa9, 0x76, 0xa8, 0x0d,
		0xef, 0x12, 0x29, 0xcb, 0xec, 0x90, 0xf5, 0x44, 0xdb, 0x26, 0xe4, 0x5d, 0x4c, 0xe2, 0x1e, 0x1b,
		0x7c, 0x65, 0x19, 0x6a, 0xc4, 0x6c, 0xe4, 0xca, 0x14, 0x0e, 0x63, 0x0b, 0x1b, 0x71, 0xc3, 0x43,
		0x74, 0x37, 0x04, 0x02, 0x95, 0x86, 0x15, 0xd0, 0x2c, 0x94, 0x13, 0xc2, 0x15, 0xad, 0x81, 0xa7,
		0x4e, 0x42, 0xbe, 0xd3, 0x3d, 0x68, 0x02, 0x52, 0x9e, 0xaf, 0xb9, 0x3e, 0x8d, 0xc2, 0x94, 0xc2,
		0x06, 0x48, 0x82, 0x04, 0xb6, 0x0d, 0x9a, 0xe5, 0x52, 0x0a, 0xf9, 0x39, 0xf5, 0x28, 0x8c, 0x74,
		0x3c, 0x7e, 0x50, 0x60, 0xf1, 0x95, 0x21, 0x98, 0xe8, 0x17, 0x73, 0x7d, 0xc3, 0x7f, 0x12, 0x86,
		0xec, 0x56, 0x63, 0x0b, 0xbb, 0x85, 0x04, 0x65, 0xe0, 0x23, 0x54, 0x82, 0x94, 0xa5, 0x6d, 0x61,
		0xab, 0x90, 0x9c, 0x8e, 0xcd, 0xe4, 0xe7, 0x1e, 0x18, 0x28, 0xaa, 0x67, 0x97, 0x08, 0x44, 0x61,
		0x48, 0xf4, 0x38, 0x24, 0x79, 0x8a, 0x23, 0x0c, 0xf7, 0x0f, 0xc6, 0x40, 0x62, 0x51, 0xa1, 0x38,
		0x74, 0x07, 0x64, 0xc8, 0x5f, 0xe6, 0xdb, 0x21, 0x6a, 0x73, 0x9a, 0x08, 0x88, 0x5f, 0xd1, 0x14,
		0xa4, 0x69, 0x98, 0x19, 0x58, 0x94, 0x86, 0x60, 0x4c, 0x36, 0xc6, 0xc0, 0x35, 0xad, 0x65, 0xf9,
		0xea, 0x25, 0xcd, 0x6a, 0x61, 0x1a, 0x30, 0x19, 0x25, 0xc7, 0x85, 0x4f, 0x13, 0x19, 0x3a, 0x08,
		0x59, 0x16, 0x95, 0xa6, 0x6d, 0xe0, 0x2b, 0x34, 0xfb, 0xa4, 0x14, 0x16, 0xa8, 0x8b, 0x44, 0x42,
		0x1e, 0x7f, 0xc1, 0x73, 0x6c, 0xb1, 0xb5, 0xf4, 0x11, 0x44, 0x40, 0x1f, 0xff, 0x68, 0x77, 0xe2,
		0xbb, 0xab, 0xff, 0xf2, 0xba, 0x63, 0xb1, 0xf8, 0x51, 0x1c, 0x92, 0xf4, 0xbc, 0x8d, 0x42, 0x76,
		0xe3, 0xd9, 0xb5, 0xaa, 0x3a, 0xbf, 0xba, 0x59, 0x5e, 0xaa, 0x4a, 0x31, 0x94, 0x07, 0xa0, 0x82,
		0xb3, 0x4b, 0xab, 0xa5, 0x0d, 0x29, 0x1e, 0x8c, 0x17, 0x57, 0x36, 0x4e, 0x1c, 0x93, 0x12, 0x01,
		0x60, 0x93, 0x09, 0x92, 0x61, 0x85, 0x47, 0xe6, 0xa4, 0x14, 0x92, 0x20, 0xc7, 0x08, 0x16, 0xcf,
		0x57, 0xe7, 0x4f, 0x1c, 0x93, 0x86, 0x3a, 0x25, 0x8f, 0xcc, 0x49, 0xc3, 0x68, 0x04, 0x32, 0x54,
		0x52, 0x5e, 0x5d, 0x5d, 0x92, 0xd2, 0x01, 0xe7, 0xfa, 0x86, 0xb2, 0xb8, 0xb2, 0x20, 0x65, 0x02,
		0xce, 0x05, 0x65, 0x75, 0x73, 0x4d, 0x82, 0x80, 0x61, 0xb9, 0xba, 0xbe, 0x5e, 0x5a, 0xa8, 0x4a,
		0xd9, 0x40, 0xa3, 0xfc, 0xec, 0x46, 0x75, 0x5d, 0xca, 0x75, 0x98, 0xf5, 0xc8, 0x9c, 0x34, 0x12,
		0x3c, 0xa2, 0xba, 0xb2, 0xb9, 0x2c, 0xe5, 0xd1, 0x18, 0x8c, 0xb0, 0x47, 0x08, 0x23, 0x46, 0xbb,
		0x44, 0x27, 0x8e, 0x49, 0x52, 0xdb, 0x10, 0xc6, 0x32, 0xd6, 0x21, 0x38, 0x71, 0x4c, 0x42, 0xc5,
		0x0a, 0xa4, 0x68, 0x74, 0x21, 0x04, 0xf9, 0xa5, 0x52, 0xb9, 0xba, 0xa4, 0xae, 0xae, 0x6d, 0x2c,
		0xae, 0xae, 0x94, 0x96, 0xa4, 0x58, 0x5b, 0xa6, 0x54, 0x9f, 0xda, 0x5c, 0x54, 0xaa, 0xf3, 0x52,
		0x3c, 0x2c, 0x5b, 0xab, 0x96, 0x36, 0xaa, 0xf3, 0x52, 0xa2, 0xa8, 0xc3, 0x44, 0xbf, 0x3c, 0xd3,
		0xf7, 0x64, 0x84, 0xb6, 0x38, 0xbe, 0xcb, 0x16, 0x53, 0xae, 0x9e, 0x2d, 0x7e, 0x27, 0x06, 0xe3,
		0x7d, 0x72, 0x6d, 0xdf, 0x87, 0x9c, 0x81, 0x14, 0x0b, 0x51, 0x56, 0x7d, 0x8e, 0xf4, 0x4d, 0xda,
		0x34, 0x60, 0x7b, 0x2a, 0x10, 0xc5, 0x85, 0x2b, 0x70, 0x62, 0x97, 0x0a, 0x4c, 0x28, 0x7a, 0x8c,
		0x7c, 0x31, 0x06, 0x85, 0xdd, 0xb8, 0x23, 0x12, 0x45, 0xbc, 0x23, 0x51, 0x9c, 0xee, 0x36, 0xe0,
		0xd0, 0xee, 0x6b, 0xe8, 0xb1, 0xe2, 0xbd, 0x18, 0x4c, 0xf6, 0x6f, 0x54, 0xfa, 0xda, 0xf0, 0x38,
		0x0c, 0x35, 0xb0, 0xbf, 0xed, 0x88, 0x62, 0x7d, 0x6f, 0x9f, 0x12, 0x40, 0xa6, 0xbb, 0x7d, 0xc5,
		0x51, 0xe1, 0x1a, 0x92, 0xd8, 0xad, 0xdb, 0x60, 0xd6, 0xf4, 0x58, 0xfa, 0x52, 0x1c, 0x6e, 0xef,
		0x4b, 0xde, 0xd7, 0xd0, 0xbb, 0x00, 0x4c, 0xbb, 0xd9, 0xf2, 0x59, 0x41, 0x66, 0xf9, 0x29, 0x43,
		0x25, 0xf4, 0xec, 0x93, 0xdc, 0xd3, 0xf2, 0x83, 0xf9, 0x04, 0x9d, 0x07, 0x26, 0xa2, 0x0a, 0x27,
		0xdb, 0x86, 0x26, 0xa9, 0xa1, 0x07, 0x76, 0x59, 0x69, 0x4f, 0xad, 0x7b, 0x18, 0x24, 0xdd, 0x32,
		0xb1, 0xed, 0xab, 0x9e, 0xef, 0x62, 0xad, 0x61, 0xda, 0x75, 0x9a, 0x80, 0xd3, 0x72, 0xaa, 0xa6,
		0x59, 0x1e, 0x56, 0x46, 0xd9, 0xf4, 0xba, 0x98, 0x25, 0x08, 0x5a, 0x65, 0xdc, 0x10, 0x62, 0xa8,
		0x03, 0xc1, 0xa6, 0x03, 0x44, 0xf1, 0xe5, 0x61, 0xc8, 0x86, 0xda, 0x3a, 0x74, 0x08, 0x72, 0x17,
		0xb4, 0x4b, 0x9a, 0x2a, 0x5a, 0x75, 0xe6, 0x89, 0x2c, 0x91, 0xad, 0xf1, 0x76, 0xfd, 0x61, 0x98,
		0xa0, 0x2a, 0x4e, 0xcb, 0xc7, 0xae, 0xaa, 0x5b, 0x9a, 0xe7, 0x51, 0xa7, 0xa5, 0xa9, 0x2a, 0x22,
		0x73, 0xab, 0x64, 0xaa, 0x22, 0x66, 0xd0, 0x71, 0x18, 0xa7, 0x88, 0x46, 0xcb, 0xf2, 0xcd, 0xa6,
		0x85, 0x55, 0xf2, 0xf2, 0xe0, 0xd1, 0x44, 0x1c, 0x58, 0x36, 0x46, 0x34, 0x96, 0xb9, 0x02, 0xb1,
		0xc8, 0x43, 0x0b, 0x70, 0x17, 0x85, 0xd5, 0xb1, 0x8d, 0x5d, 0xcd, 0xc7, 0x2a, 0xfe, 0xf3, 0x96,
		0x66, 0x79, 0xaa, 0x66, 0x1b, 0xea, 0xb6, 0xe6, 0x6d, 0x17, 0x26, 0xc2, 0x04, 0xfb, 0x89, 0xee,
		0x02, 0x57, 0xad, 0x52, 0xcd, 0x92, 0x6d, 0x3c, 0xa1, 0x79, 0xdb, 0x48, 0x86, 0x49, 0x4a, 0xe4,
		0xf9, 0xae, 0x69, 0xd7, 0x55, 0x7d, 0x1b, 0xeb, 0x17, 0xd5, 0x96, 0x5f, 0x3b, 0x59, 0xb8, 0x23,
		0xcc, 0x40, 0x8d, 0x5c, 0xa7, 0x3a, 0x15, 0xa2, 0xb2, 0xe9, 0xd7, 0x4e, 0xa2, 0x75, 0xc8, 0x91,
		0xfd, 0x68, 0x98, 0x57, 0xb1, 0x5a, 0x73, 0x5c, 0x5a, 0x5c, 0xf2, 0x7d, 0x0e, 0x77, 0xc8, 0x89,
		0xb3, 0xab, 0x1c, 0xb0, 0xec, 0x18, 0x58, 0x4e, 0xad, 0xaf, 0x55, 0xab, 0xf3, 0x4a, 0x56, 0xb0,
		0x9c, 0x75, 0x5c, 0x12, 0x53, 0x75, 0x27, 0xf0, 0x71, 0x96, 0xc5, 0x54, 0xdd, 0x11, 0x1e, 0x3e,
		0x0e, 0xe3, 0xba, 0xce, 0x96, 0x6d, 0xea, 0x2a, 0xef, 0xf2, 0xbd, 0x82, 0xd4, 0xe1, 0x2f, 0x5d,
		0x5f, 0x60, 0x0a, 0x3c, 0xcc, 0x3d, 0x74, 0x0a, 0x6e, 0x6f, 0xfb, 0x2b, 0x0c, 0x1c, 0xeb, 0x59,
		0x65, 0x37, 0xf4, 0x38, 0x8c, 0x37, 0x77, 0x7a, 0x81, 0xa8, 0xe3, 0x89, 0xcd, 0x9d, 0x6e, 0xd8,
		0x61, 0xfa, 0xe6, 0xe6, 0x62, 0x5d, 0xf3, 0xb1, 0x51, 0xd8, 0x17, 0xd6, 0x0e, 0x4d, 0xa0, 0xa3,
		0x20, 0xe9, 0xba, 0x8a, 0x6d, 0x6d, 0xcb, 0xc2, 0xaa, 0xe6, 0x62, 0x5b, 0xf3, 0x0a, 0x07, 0xc3,
		0xca, 0x79, 0x5d, 0xaf, 0xd2, 0xd9, 0x12, 0x9d, 0x44, 0xf7, 0xc3, 0x98, 0xb3, 0x75, 0x41, 0x67,
		0xc1, 0xa5, 0x36, 0x5d, 0x5c, 0x33, 0xaf, 0x14, 0xee, 0xa1, 0x6e, 0x1a, 0x25, 0x13, 0x34, 0xb4,
		0xd6, 0xa8, 0x18, 0x1d, 0x01, 0x49, 0xf7, 0xb6, 0x35, 0xb7, 0x49, 0xab, 0xbb, 0xd7, 0xd4, 0x74,
		0x5c, 0x38, 0xcc, 0x54, 0x99, 0x7c, 0x45, 0x88, 0xd1, 0x79, 0x98, 0x68, 0xd9, 0xa6, 0xed, 0x63,
		0xb7, 0xe9, 0x62, 0xd2, 0xa4, 0xb3, 0x93, 0x56, 0xf8, 0xd9, 0xf0, 0x2e, 0x6d, 0xf6, 0x66, 0x58,
		0x9b, 0xed, 0xae, 0x32, 0xde, 0xea, 0x15, 0x16, 0x65, 0xc8, 0x85, 0x37, 0x1d, 0x65, 0x80, 0x6d,
		0xbb, 0x14, 0x23, 0x35, 0xb4, 0xb2, 0x3a, 0x4f, 0xaa, 0xdf, 0x73, 0x55, 0x29, 0x4e, 0xaa, 0xf0,
		0xd2, 0xe2, 0x46, 0x55, 0x55, 0x36, 0x57, 0x36, 0x16, 0x97, 0xab, 0x52, 0xe2, 0xfe, 0x4c, 0xfa,
		0xe7, 0xc3, 0xd2, 0xb5, 0x6b, 0xd7, 0xae, 0xc5, 0x8b, 0x1f, 0xc7, 0x21, 0xdf, 0xd9, 0xf9, 0xa2,
		0x3f, 0x83, 0x7d, 0xe2, 0x35, 0xd5, 0xc3, 0xbe, 0x7a, 0xd9, 0x74, 0x69, 0x1c, 0x36, 0x34, 0xd6,
		0x3b, 0x06, 0x2e, 0x9c, 0xe0, 0x5a, 0xeb, 0xd8, 0x7f, 0xc6, 0x74, 0x49, 0x94, 0x35, 0x34, 0x1f,
		0x2d, 0xc1, 0x41, 0xdb, 0x51, 0x3d, 0x5f, 0xb3, 0x0d, 0xcd, 0x35, 0xd4, 0xf6, 0x05, 0x81, 0xaa,
		0xe9, 0x3a, 0xf6, 0x3c, 0x87, 0x95, 0x80, 0x80, 0xe5, 0x4e, 0xdb, 0x59, 0xe7, 0xca, 0xed, 0xdc,
		0x58, 0xe2, 0xaa, 0x5d, 0xdb, 0x9d, 0xd8, 0x6d, 0xbb, 0xef, 0x80, 0x4c, 0x43, 0x6b, 0xaa, 0xd8,
		0xf6, 0xdd, 0x1d, 0xda, 0xaf, 0xa5, 0x95, 0x74, 0x43, 0x6b, 0x56, 0xc9, 0xf8, 0xcb, 0xdb, 0x83,
		0xb0, 0x1f, 0x7f, 0x9c, 0x80, 0x5c, 0xb8, 0x67, 0x23, 0x2d, 0xb0, 0x4e, 0xf3, 0x73, 0x8c, 0x1e,
		0xdf, 0xbb, 0x6f, 0xd9, 0xe1, 0xcd, 0x56, 0x48, 0xe2, 0x96, 0x87, 0x58, 0x27, 0xa5, 0x30, 0x24,
		0x29, 0x9a, 0xe4, 0xc0, 0x62, 0xd6, 0x9f, 0xa7, 0x15, 0x3e, 0x42, 0x0b, 0x30, 0x74, 0xc1, 0xa3,
		0xdc, 0x43, 0x94, 0xfb, 0x9e, 0x5b, 0x73, 0x9f, 0x5b, 0xa7, 0xe4, 0x99, 0x73, 0xeb, 0xea, 0xca,
		0xaa, 0xb2, 0x5c, 0x5a, 0x52, 0x38, 0x1c, 0xed, 0x87, 0xa4, 0xa5, 0x5d, 0xdd, 0xe9, 0x4c, 0xf1,
		0x54, 0x34, 0xa8, 0xe3, 0xf7, 0x43, 0xf2, 0x32, 0xd6, 0x2e, 0x76, 0x26, 0x56, 0x2a, 0xfa, 0x12,
		0x43, 0xff, 0x28, 0xa4, 0xa8, 0xbf, 0x10, 0x00, 0xf7, 0x98, 0x74, 0x1b, 0x4a, 0x43, 0xb2, 0xb2,
		0xaa, 0x90, 0xf0, 0x97, 0x20, 0xc7, 0xa4, 0xea, 0xda, 0x62, 0xb5, 0x52, 0x95, 0xe2, 0xc5, 0xe3,
		0x30, 0xc4, 0x9c, 0x40, 0x8e, 0x46, 0xe0, 0x06, 0xe9, 0x36, 0x3e, 0xe4, 0x1c, 0x31, 0x31, 0xbb,
		0xb9, 0x5c, 0xae, 0x2a, 0x52, 0x3c, 0xbc, 0xbd, 0x1e, 0xe4, 0xc2, 0xed, 0xda, 0x57, 0x13, 0x53,
		0xdf, 0x8d, 0x41, 0x36, 0xd4, 0x7e, 0x91, 0xc2, 0xaf, 0x59, 0x96, 0x73, 0x59, 0xd5, 0x2c, 0x53,
		0xf3, 0x78, 0x50, 0x00, 0x15, 0x95, 0x88, 0x64, 0xd0, 0x4d, 0xfb, 0x4a, 0x8c, 0x7f, 0x2b, 0x06,
		0x52, 0x77, 0xeb, 0xd6, 0x65, 0x60, 0xec, 0x6b, 0x35, 0xf0, 0x8d, 0x18, 0xe4, 0x3b, 0xfb, 0xb5,
		0x2e, 0xf3, 0x0e, 0x7d, 0xad, 0xe6, 0xbd, 0x1e, 0x83, 0x91, 0x8e, 0x2e, 0xed, 0x4f, 0xca, 0xba,
		0xd7, 0x12, 0x30, 0xde, 0x07, 0x87, 0x4a, 0xbc, 0x9d, 0x65, 0x1d, 0xf6, 0x43, 0x83, 0x3c, 0x6b,
		0x96, 0x54, 0xcb, 0x35, 0xcd, 0xf5, 0x79, 0xf7, 0x7b, 0x04, 0x24, 0xd3, 0xc0, 0xb6, 0x6f, 0xd6,
		0x4c, 0xec, 0xf2, 0x57, 0x70, 0xd6, 0xe3, 0x8e, 0xb6, 0xe5, 0xec, 0x2d, 0xfc, 0x41, 0x40, 0x4d,
		0xc7, 0x33, 0x7d, 0xf3, 0x12, 0x56, 0x4d, 0x5b, 0xbc, 0xaf, 0x93, 0x9e, 0x37, 0xa9, 0x48, 0x62,
		0x66, 0xd1, 0xf6, 0x03, 0x6d, 0x1b, 0xd7, 0xb5, 0x2e, 0x6d, 0x92, 0xfb, 0x12, 0x8a, 0x24, 0x66,
		0x02, 0xed, 0x43, 0x90, 0x33, 0x9c, 0x16, 0x69, 0x1f, 0x98, 0x1e, 0x49, 0xb5, 0x31, 0x25, 0xcb,
		0x64, 0x81, 0x0a, 0xef, 0xef, 0xda, 0x17, 0x05, 0x39, 0x25, 0xcb, 0x64, 0x4c, 0xe5, 0x3e, 0x18,
		0xd5, 0xea, 0x75, 0x97, 0x90, 0x0b, 0x22, 0xd6, 0xb4, 0xe6, 0x03, 0x31, 0x55, 0x9c, 0x3a, 0x07,
		0x69, 0xe1, 0x07, 0x52, 0xcd, 0x88, 0x27, 0xd4, 0x26, 0xbb, 0xae, 0x89, 0xcf, 0x64, 0x94, 0xb4,
		0x2d, 0x26, 0x0f, 0x41, 0xce, 0xf4, 0xd4, 0xf6, 0xbd, 0x61, 0x7c, 0x3a, 0x3e, 0x93, 0x56, 0xb2,
		0xa6, 0x17, 0x5c, 0x14, 0x15, 0xdf, 0x8b, 0x43, 0xbe, 0xf3, 0xde, 0x13, 0xcd, 0x43, 0xda, 0x72,
		0x74, 0x8d, 0x06, 0x02, 0xbb, 0x74, 0x9f, 0x89, 0xb8, 0x2a, 0x9d, 0x5d, 0xe2, 0xfa, 0x4a, 0x80,
		0x9c, 0xfa, 0x51, 0x0c, 0xd2, 0x42, 0x8c, 0x26, 0x21, 0xd9, 0xd4, 0xfc, 0x6d, 0x4a, 0x97, 0x2a,
		0xc7, 0xa5, 0x98, 0x42, 0xc7, 0x44, 0xee, 0x35, 0x35, 0x9b, 0x86, 0x00, 0x97, 0x93, 0x31, 0xd9,
		0x57, 0x0b, 0x6b, 0x06, 0x6d, 0x87, 0x9d, 0x46, 0x03, 0xdb, 0xbe, 0x27, 0xf6, 0x95, 0xcb, 0x2b,
		0x5c, 0x8c, 0x1e, 0x80, 0x31, 0xdf, 0xd5, 0x4c, 0xab, 0x43, 0x37, 0x49, 0x75, 0x25, 0x31, 0x11,
		0x28, 0xcb, 0xb0, 0x5f, 0xf0, 0x1a, 0xd8, 0xd7, 0xf4, 0x6d, 0x6c, 0xb4, 0x41, 0x43, 0xf4, 0x52,
		0x6d, 0x1f, 0x57, 0x98, 0xe7, 0xf3, 0x02, 0x5b, 0xfc, 0x24, 0x06, 0x63, 0xa2, 0x81, 0x37, 0x02,
		0x67, 0x2d, 0x03, 0x68, 0xb6, 0xed, 0xf8, 0x61, 0x77, 0xf5, 0x86, 0x72, 0x0f, 0x6e, 0xb6, 0x14,
		0x80, 0x94, 0x10, 0xc1, 0x54, 0x03, 0xa0, 0x3d, 0xb3, 0xab, 0xdb, 0x0e, 0x42, 0x96, 0x5f, 0x6a,
		0xd3, 0x2f, 0x23, 0xec, 0xad, 0x0f, 0x98, 0x88, 0x74, 0xfa, 0x68, 0x02, 0x52, 0x5b, 0xb8, 0x6e,
		0xda, 0xfc, 0xaa, 0x8d, 0x0d, 0xc4, 0x05, 0x5e, 0x32, 0xb8, 0xc0, 0x2b, 0x3f, 0x0f, 0xe3, 0xba,
		0xd3, 0xe8, 0x36, 0xb7, 0x2c, 0x75, 0xbd, 0x79, 0x7a, 0x4f, 0xc4, 0x9e, 0x83, 0x76, 0x77, 0xf6,
		0x76, 0x2c, 0xf6, 0x4e, 0x3c, 0xb1, 0xb0, 0x56, 0x7e, 0x3f, 0x3e, 0xb5, 0xc0, 0xa0, 0x6b, 0x62,
		0xa5, 0x0a, 0xae, 0x59, 0x58, 0x27, 0xd6, 0xc3, 0xe7, 0xf7, 0xc2, 0x43, 0x75, 0xd3, 0xdf, 0x6e,
		0x6d, 0xcd, 0xea, 0x4e, 0xe3, 0x68, 0xdd, 0xa9, 0x3b, 0xed, 0x8f, 0x41, 0x64, 0x44, 0x07, 0xf4,
		0x17, 0xff, 0x20, 0x94, 0x09, 0xa4, 0x53, 0x91, 0x5f, 0x8f, 0xe4, 0x15, 0x18, 0xe7, 0xca, 0x2a,
		0xbd, 0x91, 0x66, 0x7d, 0x38, 0xba, 0xe5, 0xad, 0x44, 0xe1, 0xc3, 0x4f, 0x69, 0xa5, 0x53, 0xc6,
		0x38, 0x94, 0xcc, 0xb1, 0x4e, 0x5d, 0x56, 0xe0, 0xf6, 0x0e, 0x3e, 0x76, 0x34, 0xb1, 0x1b, 0xc1,
		0xf8, 0x31, 0x67, 0x1c, 0x0f, 0x31, 0xae, 0x73, 0xa8, 0x5c, 0x81, 0x91, 0xbd, 0x70, 0x7d, 0x9f,
		0x73, 0xe5, 0x70, 0x98, 0x64, 0x01, 0x46, 0x29, 0x89, 0xde, 0xf2, 0x7c, 0xa7, 0x41, 0xf3, 0xde,
		0xad, 0x69, 0x7e, 0xf0, 0x29, 0x3b, 0x2b, 0x79, 0x02, 0xab, 0x04, 0x28, 0x59, 0x06, 0x7a, 0x09,
		0x6f, 0x60, 0xdd, 0x8a, 0x60, 0xf8, 0x21, 0x37, 0x24, 0xd0, 0x97, 0x9f, 0x86, 0x09, 0xf2, 0x9b,
		0xa6, 0xa5, 0xb0, 0x25, 0xd1, 0x77, 0x30, 0x85, 0x4f, 0x5e, 0x64, 0xc7, 0x71, 0x3c, 0x20, 0x08,
		0xd9, 0x14, 0xda, 0xc5, 0x3a, 0xf6, 0x7d, 0xec, 0x7a, 0xaa, 0x66, 0xf5, 0x33, 0x2f, 0xf4, 0x06,
		0x5b, 0x78, 0xf5, 0x7a, 0xe7, 0x2e, 0x2e, 0x30, 0x64, 0xc9, 0xb2, 0xe4, 0x4d, 0xd8, 0xd7, 0x27,
		0x2a, 0x06, 0xe0, 0x7c, 0x8d, 0x73, 0x4e, 0xf4, 0x44, 0x06, 0xa1, 0x5d, 0x03, 0x21, 0x0f, 0xf6,
		0x72, 0x00, 0xce, 0xd7, 0x39, 0x27, 0xe2, 0x58, 0xb1, 0xa5, 0x84, 0xf1, 0x1c, 0x8c, 0x5d, 0xc2,
		0xee, 0x96, 0xe3, 0xf1, 0x8b, 0x83, 0x01, 0xe8, 0xde, 0xe0, 0x74, 0xa3, 0x1c, 0x48, 0xaf, 0x11,
		0x08, 0xd7, 0x29, 0x48, 0xd7, 0x34, 0x1d, 0x0f, 0x40, 0xf1, 0x26, 0xa7, 0x18, 0x26, 0xfa, 0x04,
		0x5a, 0x82, 0x5c, 0xdd, 0xe1, 0x95, 0x29, 0x1a, 0xfe, 0x16, 0x87, 0x67, 0x05, 0x86, 0x53, 0x34,
		0x9d, 0x66, 0xcb, 0x22, 0x65, 0x2b, 0x9a, 0xe2, 0x5f, 0x05, 0x85, 0xc0, 0x70, 0x8a, 0x3d, 0xb8,
		0xf5, 0x6d, 0x41, 0xe1, 0x85, 0xfc, 0x79, 0x06, 0xb2, 0x8e, 0x6d, 0xed, 0x38, 0xf6, 0x20, 0x46,
		0xfc, 0x1b, 0x67, 0x00, 0x0e, 0x21, 0x04, 0xa7, 0x21, 0x33, 0xe8, 0x46, 0xbc, 0x7b, 0x5d, 0x1c,
		0x0f, 0xb1, 0x03, 0x0b, 0x30, 0x2a, 0x12, 0x94, 0xe9, 0xd8, 0x03, 0x50, 0xfc, 0x3b, 0xa7, 0xc8,
		0x87, 0x60, 0x7c, 0x19, 0x3e, 0xf6, 0xfc, 0x3a, 0x1e, 0x84, 0xe4, 0x3d, 0xb1, 0x0c, 0x0e, 0xe1,
		0xae, 0xdc, 0xc2, 0xb6, 0xbe, 0x3d, 0x18, 0xc3, 0x7f, 0x08, 0x57, 0x0a, 0x0c, 0xa1, 0xa8, 0xc0,
		0x48, 0x43, 0x73, 0xbd, 0x6d, 0xcd, 0x1a, 0x68, 0x3b, 0xfe, 0x93, 0x73, 0xe4, 0x02, 0x10, 0xf7,
		0x48, 0xcb, 0xde, 0x0b, 0xcd, 0xfb, 0xc2, 0x23, 0x21, 0x18, 0x3f, 0x7a, 0x9e, 0x4f, 0xef, 0x66,
		0xf6, 0xc2, 0xf6, 0x5f, 0xe2, 0xe8, 0x31, 0xec, 0x72, 0x98, 0xf1, 0x34, 0x64, 0x3c, 0xf3, 0xea,
		0x40, 0x34, 0xff, 0x2d, 0x76, 0x9a, 0x02, 0x08, 0xf8, 0x59, 0xd8, 0xdf, 0xb7, 0x4c, 0x0c, 0x40,
		0xf6, 0x3f, 0x9c, 0x6c, 0xb2, 0x4f, 0xa9, 0xe0, 0x29, 0x61, 0xaf, 0x94, 0xff, 0x2b, 0x52, 0x02,
		0xee, 0xe2, 0x5a, 0x23, 0x9d, 0xbd, 0xa7, 0xd5, 0xf6, 0xe6, 0xb5, 0xff, 0x13, 0x5e, 0x63, 0xd8,
		0x0e, 0xaf, 0x6d, 0xc0, 0x24, 0x67, 0xdc, 0xdb, 0xbe, 0x7e, 0x20, 0x12, 0x2b, 0x43, 0x6f, 0x76,
		0xee, 0xee, 0xf3, 0x30, 0x15, 0xb8, 0x53, 0x34, 0xa5, 0x9e, 0xda, 0xd0, 0x9a, 0x03, 0x30, 0x7f,
		0xc8, 0x99, 0x45, 0xc6, 0x0f, 0xba, 0x5a, 0x6f, 0x59, 0x6b, 0x12, 0xf2, 0xf3, 0x50, 0x10, 0xe4,
		0x2d, 0xdb, 0xc5, 0xba, 0x53, 0xb7, 0xcd, 0xab, 0xd8, 0x18, 0x80, 0xfa, 0xff, 0xbb, 0xb6, 0x6a,
		0x33, 0x04, 0x27, 0xcc, 0x8b, 0x20, 0x05, 0xbd, 0x8a, 0x6a, 0x36, 0x9a, 0x8e, 0xeb, 0x47, 0x30,
		0x7e, 0x43, 0xec, 0x54, 0x80, 0x5b, 0xa4, 0x30, 0xb9, 0x0a, 0x79, 0x3a, 0x1c, 0x34, 0x24, 0xbf,
		0xc9, 0x89, 0x46, 0xda, 0x28, 0x9e, 0x38, 0x74, 0xa7, 0xd1, 0xd4, 0xdc, 0x41, 0xf2, 0xdf, 0xb7,
		0x44, 0xe2, 0xe0, 0x10, 0x9e, 0x38, 0xfc, 0x9d, 0x26, 0x26, 0xd5, 0x7e, 0x00, 0x86, 0x8f, 0x44,
		0xe2, 0x10, 0x18, 0x4e, 0x21, 0x1a, 0x86, 0x01, 0x28, 0xbe, 0x2d, 0x28, 0x04, 0x86, 0x50, 0x3c,
		0xd5, 0x2e, 0xb4, 0x2e, 0xae, 0x9b, 0x9e, 0xef, 0xb2, 0x56, 0xf8, 0xd6, 0x54, 0xdf, 0xb9, 0xde,
		0xd9, 0x84, 0x29, 0x21, 0xa8, 0x7c, 0x0e, 0x46, 0xbb, 0x5a, 0x0c, 0x14, 0xf5, 0x45, 0xbf, 0xf0,
		0xc2, 0x0d, 0x9e, 0x8c, 0x3a, 0x3b, 0x0c, 0x79, 0x89, 0xec, 0x7b, 0x67, 0x1f, 0x10, 0x4d, 0xf6,
		0xe2, 0x8d, 0x60, 0xeb, 0x3b, 0xda, 0x00, 0xf9, 0x2c, 0x8c, 0x74, 0xf4, 0x00, 0xd1, 0x54, 0x7f,
		0xc1, 0xa9, 0x72, 0xe1, 0x16, 0x40, 0x3e, 0x0e, 0x49, 0x52, 0xcf, 0xa3, 0xe1, 0x7f, 0xc9, 0xe1,
		0x54, 0x5d, 0x7e, 0x0c, 0xd2, 0xa2, 0x8e, 0x47, 0x43, 0xff, 0x8a, 0x43, 0x03, 0x08, 0x81, 0x8b,
		0x1a, 0x1e, 0x0d, 0xff, 0x6b, 0x01, 0x17, 0x10, 0x02, 0x1f, 0xdc, 0x85, 0xdf, 0x7b, 0x39, 0xc9,
		0xf3, 0xb0, 0xf0, 0xdd, 0x69, 0x18, 0xe6, 0xc5, 0x3b, 0x1a, 0xfd, 0x12, 0x7f, 0xb8, 0x40, 0xc8,
		0x8f, 0x42, 0x6a, 0x40, 0x87, 0xff, 0x0d, 0x87, 0x32, 0x7d, 0xb9, 0x02, 0xd9, 0x50, 0xc1, 0x8e,
		0x86, 0xff, 0x2d, 0x87, 0x87, 0x51, 0xc4, 0x74, 0x5e, 0xb0, 0xa3, 0x09, 0xfe, 0x4e, 0x98, 0xce,
		0x11, 0xc4, 0x6d, 0xa2, 0x56, 0x47, 0xa3, 0xff, 0x5e, 0x78, 0x5d, 0x40, 0xe4, 0x33, 0x90, 0x09,
		0xf2, 0x6f, 0x34, 0xfe, 0x1f, 0x38, 0xbe, 0x8d, 0x21, 0x1e, 0x08, 0xe5, 0xff, 0x68, 0x8a, 0x7f,
		0x14, 0x1e, 0x08, 0xa1, 0xc8, 0x31, 0xea, 0xae, 0xe9, 0xd1, 0x4c, 0xff, 0x24, 0x8e, 0x51, 0x57,
		0x49, 0x27, 0xbb, 0x49, 0xd3, 0x60, 0x34, 0xc5, 0x3f, 0x8b, 0xdd, 0xa4, 0xfa, 0xc4, 0x8c, 0xee,
		0x22, 0x19, 0xcd, 0xf1, 0x2f, 0xc2, 0x8c, 0xae, 0x1a, 0x29, 0xaf, 0x01, 0xea, 0x2d, 0x90, 0xd1,
		0x7c, 0xaf, 0x70, 0xbe, 0xb1, 0x9e, 0xfa, 0x28, 0x3f, 0x03, 0x93, 0xfd, 0x8b, 0x63, 0x34, 0xeb,
		0xab, 0x37, 0xba, 0x5e, 0x67, 0xc2, 0xb5, 0x51, 0xde, 0x68, 0x67, 0xd9, 0x70, 0x61, 0x8c, 0xa6,
		0x7d, 0xed, 0x46, 0x67, 0xa2, 0x0d, 0xd7, 0x45, 0xb9, 0x04, 0xd0, 0xae, 0x49, 0xd1, 0x5c, 0x6f,
		0x70, 0xae, 0x10, 0x88, 0x1c, 0x0d, 0x5e, 0x92, 0xa2, 0xf1, 0x6f, 0x8a, 0xa3, 0xc1, 0x11, 0xe4,
		0x68, 0x88, 0x6a, 0x14, 0x8d, 0x7e, 0x4b, 0x1c, 0x0d, 0x01, 0x91, 0x4f, 0x43, 0xda, 0x6e, 0x59,
		0x16, 0x89, 0x2d, 0x74, 0xeb, 0x7f, 0xb2, 0x29, 0xfc, 0xe2, 0x26, 0x07, 0x0b, 0x80, 0x7c, 0x1c,
		0x52, 0xb8, 0xb1, 0x85, 0x8d, 0x28, 0xe4, 0x2f, 0x6f, 0x8a, 0x7c, 0x42, 0xb4, 0xe5, 0x33, 0x00,
		0xec, 0x65, 0x9a, 0x7e, 0x63, 0x89, 0xc0, 0xfe, 0xea, 0x26, 0xff, 0x7e, 0xdf, 0x86, 0xb4, 0x09,
		0xd8, 0x7f, 0x03, 0xdc, 0x9a, 0xe0, 0x7a, 0x27, 0x01, 0x7d, 0x01, 0x3f, 0x05, 0xc3, 0x17, 0x3c,
		0xc7, 0xf6, 0xb5, 0x7a, 0x14, 0xfa, 0xd7, 0x1c, 0x2d, 0xf4, 0x89, 0xc3, 0x1a, 0x8e, 0x8b, 0x7d,
		0xad, 0xee, 0x45, 0x61, 0x7f, 0xc3, 0xb1, 0x01, 0x80, 0x80, 0x75, 0xcd, 0xf3, 0x07, 0x59, 0xf7,
		0x6f, 0x05, 0x58, 0x00, 0x88, 0xd1, 0xe4, 0xf7, 0x45, 0xbc, 0x13, 0x85, 0xfd, 0x4c, 0x18, 0xcd,
		0xf5, 0xe5, 0xc7, 0x20, 0x43, 0x7e, 0xb2, 0xff, 0x69, 0x89, 0x00, 0xff, 0x8e, 0x83, 0xdb, 0x08,
		0xf2, 0x64, 0xcf, 0x37, 0x7c, 0x33, 0xda, 0xd9, 0xbf, 0xe7, 0x3b, 0x2d, 0xf4, 0xe5, 0x12, 0x64,
		0x3d, 0xdf, 0x30, 0x5a, 0xbc, 0xa3, 0x89, 0x80, 0x7f, 0x7e, 0x33, 0x78, 0xc9, 0x0d, 0x30, 0xe5,
		0x43, 0xfd, 0xef, 0xeb, 0x60, 0xc1, 0x59, 0x70, 0xd8, 0x4d, 0x1d, 0xbc, 0x9b, 0xe4, 0xfd, 0xa4,
		0xdd, 0x6a, 0xf0, 0x6b, 0xb5, 0xb4, 0x18, 0x4f, 0xed, 0xed, 0x3e, 0xae, 0x28, 0x43, 0x9a, 0xb2,
		0xae, 0xb4, 0x1a, 0x68, 0x16, 0xd2, 0x4f, 0xe2, 0x9d, 0xa7, 0x43, 0xff, 0x42, 0x84, 0x66, 0x83,
		0xe7, 0x88, 0x19, 0x25, 0xd0, 0x29, 0xce, 0xb5, 0xf5, 0x91, 0x04, 0x89, 0x27, 0xf1, 0x0e, 0xff,
		0x6f, 0x0d, 0xf2, 0x13, 0x4d, 0x40, 0x4a, 0x50, 0x11, 0x19, 0x1b, 0x14, 0x9f, 0x03, 0xd8, 0x70,
		0x9a, 0xde, 0xce, 0x46, 0xcb, 0xbd, 0xb4, 0x83, 0x0e, 0x43, 0x8a, 0x8e, 0x28, 0x2e, 0x3b, 0x37,
		0xda, 0x7e, 0x1c, 0x15, 0x2b, 0x6c, 0x96, 0xaa, 0x11, 0x7d, 0xfe, 0xbf, 0x53, 0x61, 0x35, 0x22,
		0x56, 0xd8, 0x6c, 0xf1, 0x6e, 0xce, 0x86, 0x72, 0x10, 0x2b, 0x51, 0xca, 0x84, 0x12, 0x2b, 0x91,
		0x51, 0x99, 0x22, 0x13, 0x4a, 0xac, 0x4c, 0x95, 0xe8, 0xb3, 0xa9, 0x98, 0x2b, 0x95, 0x19, 0x84,
		0x2b, 0x95, 0x8a, 0x2d, 0x48, 0x3e, 0x69, 0x3b, 0x3e, 0x3a, 0x02, 0xa9, 0xb2, 0x59, 0xdf, 0xf6,
		0xf9, 0xad, 0xef, 0x78, 0xfb, 0xc1, 0x54, 0x4c, 0x74, 0x14, 0xa6, 0x41, 0x96, 0x5b, 0xb5, 0xb6,
		0x9c, 0xcb, 0xfc, 0x3b, 0x1c, 0x1b, 0xa0, 0x07, 0x21, 0x53, 0x36, 0x49, 0x5f, 0x59, 0xb5, 0x0d,
		0xfe, 0x6f, 0x42, 0xf9, 0x90, 0x4f, 0x09, 0xbe, 0xad, 0x50, 0xac, 0x10, 0x6d, 0xce, 0x8b, 0x8a,
		0x90, 0x5c, 0x72, 0x9c, 0x26, 0x77, 0x4d, 0x37, 0x8a, 0xce, 0x21, 0x04, 0xc9, 0x8d, 0x96, 0x6b,
		0xf3, 0x67, 0xd2, 0xdf, 0xe5, 0xf4, 0x67, 0x3f, 0x39, 0x10, 0xfb, 0xe0, 0xa7, 0x07, 0x62, 0x7f,
		0x0c, 0x00, 0x00, 0xff, 0xff, 0x95, 0xd5, 0xf3, 0x4d, 0xa2, 0x2f, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *ProtoNum) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&protonum.ProtoNum{")
	if this.KeyValue != nil {
		s = append(s, "KeyValue: "+fmt.Sprintf("%#v", this.KeyValue)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *KeyValue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protonum.KeyValue{")
	if this.Key != nil {
		s = append(s, "Key: "+valueToGoStringProtonum(this.Key, "string")+",\n")
	}
	if this.Value != nil {
		s = append(s, "Value: "+valueToGoStringProtonum(this.Value, "string")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TopsyTurvy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protonum.TopsyTurvy{")
	if this.Topsy != nil {
		s = append(s, "Topsy: "+fmt.Sprintf("%#v", this.Topsy)+",\n")
	}
	if this.Turvy != nil {
		s = append(s, "Turvy: "+fmt.Sprintf("%#v", this.Turvy)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Topsy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protonum.Topsy{")
	if this.A != nil {
		s = append(s, "A: "+valueToGoStringProtonum(this.A, "int64")+",\n")
	}
	if this.B != nil {
		s = append(s, "B: "+valueToGoStringProtonum(this.B, "int64")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Turvy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protonum.Turvy{")
	if this.B != nil {
		s = append(s, "B: "+valueToGoStringProtonum(this.B, "int64")+",\n")
	}
	if this.A != nil {
		s = append(s, "A: "+valueToGoStringProtonum(this.A, "int64")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Knot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&protonum.Knot{")
	if this.Bight != nil {
		s = append(s, "Bight: "+fmt.Sprintf("%#v", this.Bight)+",\n")
	}
	if this.Elbow != nil {
		s = append(s, "Elbow: "+valueToGoStringProtonum(this.Elbow, "bool")+",\n")
	}
	if this.BitterEnd != nil {
		s = append(s, "BitterEnd: "+fmt.Sprintf("%#v", this.BitterEnd)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BightKnot) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&protonum.BightKnot{")
	if this.Loop != nil {
		s = append(s, "Loop: "+fmt.Sprintf("%#v", this.Loop)+",\n")
	}
	if this.Turn != nil {
		s = append(s, "Turn: "+valueToGoStringProtonum(this.Turn, "bool")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProtonum(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

func init() { proto.RegisterFile("protonum.proto", fileDescriptorProtonum) }

var fileDescriptorProtonum = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x59, 0xd3, 0x42, 0x3a, 0x95, 0x2a, 0xa3, 0x87, 0xe0, 0xa1, 0x94, 0x15, 0xa1, 0x82,
	0xa6, 0xd0, 0xa3, 0xb7, 0xae, 0xf4, 0x54, 0x11, 0x59, 0x8a, 0x07, 0x6f, 0x46, 0x63, 0x1a, 0x68,
	0xb2, 0x21, 0xee, 0x2a, 0x79, 0x2b, 0x5f, 0x49, 0x9f, 0xc0, 0x47, 0x90, 0x9d, 0xdd, 0x34, 0xea,
	0x6d, 0xfe, 0x99, 0xef, 0xff, 0xff, 0x64, 0x61, 0x54, 0xd5, 0x4a, 0xab, 0xd2, 0x14, 0x31, 0x0d,
	0x18, 0xb6, 0xfa, 0xe4, 0x32, 0xcb, 0xf5, 0xc6, 0x24, 0xf1, 0x93, 0x2a, 0x66, 0x99, 0xca, 0xd4,
	0x8c, 0x2e, 0x89, 0x79, 0x21, 0x45, 0x82, 0x26, 0x67, 0xe4, 0x57, 0x10, 0xde, 0xd9, 0xe1, 0xd6,
	0x14, 0x18, 0x43, 0xb8, 0x4a, 0x9b, 0xfb, 0xc7, 0xad, 0x49, 0xa3, 0xbd, 0x49, 0x30, 0x1d, 0xce,
	0x31, 0xde, 0xf5, 0xb4, 0x17, 0xb9, 0x63, 0xf8, 0xbc, 0xe3, 0xf1, 0x10, 0x82, 0x55, 0xda, 0x44,
	0x6c, 0xc2, 0xa6, 0x03, 0x69, 0x47, 0x3c, 0x86, 0x7e, 0x1b, 0x65, 0x77, 0x4e, 0xf0, 0x07, 0x80,
	0xb5, 0xaa, 0x5e, 0x9b, 0xb5, 0xa9, 0xdf, 0x1a, 0x3c, 0x83, 0x3e, 0x29, 0xf2, 0x0d, 0xe7, 0x07,
	0x5d, 0x1d, 0xad, 0xa5, 0xbb, 0x12, 0x66, 0x79, 0x8a, 0xfa, 0x8b, 0xd9, 0xb5, 0x74, 0x57, 0x7e,
	0xea, 0xd3, 0x70, 0x1f, 0xd8, 0x82, 0x22, 0x03, 0xc9, 0x16, 0x56, 0x09, 0x72, 0x06, 0x92, 0x09,
	0x82, 0xa8, 0x9b, 0xd6, 0x1e, 0x12, 0xce, 0xe2, 0xa1, 0x05, 0x37, 0xd0, 0x5b, 0x95, 0x4a, 0xe3,
	0x39, 0xf4, 0x45, 0x9e, 0x6d, 0x74, 0xc4, 0xe8, 0x39, 0x8e, 0xba, 0x62, 0x5a, 0x5b, 0x46, 0x3a,
	0xc2, 0xfe, 0xee, 0x72, 0x9b, 0xa8, 0x77, 0x0a, 0x09, 0xa5, 0x13, 0x78, 0x01, 0x03, 0x91, 0x6b,
	0x9d, 0xd6, 0xcb, 0xf2, 0x39, 0x0a, 0xe8, 0xeb, 0x47, 0xbf, 0xde, 0xd4, 0xfa, 0x3b, 0x80, 0x5f,
	0x5b, 0xda, 0xe7, 0x22, 0x87, 0xde, 0x8d, 0x52, 0x95, 0x7f, 0x9a, 0xff, 0x2e, 0xba, 0x21, 0x42,
	0x6f, 0x6d, 0xea, 0xd2, 0x77, 0xd2, 0x2c, 0xc2, 0xef, 0xcf, 0x31, 0xfb, 0xf8, 0x1a, 0xb3, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x5a, 0xec, 0x74, 0x43, 0x25, 0x02, 0x00, 0x00,
}
