// Code generated by protoc-gen-gogo.
// source: simple.proto
// DO NOT EDIT!

/*
Package prototests is a generated protocol buffer package.

It is generated from these files:
	simple.proto

It has these top-level messages:
	Simple
	Nested
*/
package prototests

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Simple struct {
	Field1           *float64  `protobuf:"fixed64,1,opt,name=Field1,json=field1" json:"Field1,omitempty"`
	Field2           *float32  `protobuf:"fixed32,2,opt,name=Field2,json=field2" json:"Field2,omitempty"`
	Field3           *int32    `protobuf:"varint,3,opt,name=Field3,json=field3" json:"Field3,omitempty"`
	Field4           *int64    `protobuf:"varint,4,opt,name=Field4,json=field4" json:"Field4,omitempty"`
	Field5           *uint32   `protobuf:"varint,5,opt,name=Field5,json=field5" json:"Field5,omitempty"`
	Field6           *uint64   `protobuf:"varint,6,opt,name=Field6,json=field6" json:"Field6,omitempty"`
	Field7           *int32    `protobuf:"zigzag32,7,opt,name=Field7,json=field7" json:"Field7,omitempty"`
	Field8           *int64    `protobuf:"zigzag64,8,opt,name=Field8,json=field8" json:"Field8,omitempty"`
	Field9           *uint32   `protobuf:"fixed32,9,opt,name=Field9,json=field9" json:"Field9,omitempty"`
	Field10          *int32    `protobuf:"fixed32,10,opt,name=Field10,json=field10" json:"Field10,omitempty"`
	Field11          *uint64   `protobuf:"fixed64,11,opt,name=Field11,json=field11" json:"Field11,omitempty"`
	Field12          *int64    `protobuf:"fixed64,12,opt,name=Field12,json=field12" json:"Field12,omitempty"`
	Field13          *bool     `protobuf:"varint,13,opt,name=Field13,json=field13" json:"Field13,omitempty"`
	Field14          *string   `protobuf:"bytes,14,opt,name=Field14,json=field14" json:"Field14,omitempty"`
	Field15          []byte    `protobuf:"bytes,15,opt,name=Field15,json=field15" json:"Field15,omitempty"`
	Fields1          []float64 `protobuf:"fixed64,21,rep,name=Fields1,json=fields1" json:"Fields1,omitempty"`
	Fields2          []float32 `protobuf:"fixed32,22,rep,name=Fields2,json=fields2" json:"Fields2,omitempty"`
	Fields3          []int32   `protobuf:"varint,23,rep,name=Fields3,json=fields3" json:"Fields3,omitempty"`
	Fields4          []int64   `protobuf:"varint,24,rep,name=Fields4,json=fields4" json:"Fields4,omitempty"`
	Fields5          []uint32  `protobuf:"varint,25,rep,name=Fields5,json=fields5" json:"Fields5,omitempty"`
	Fields6          []uint64  `protobuf:"varint,26,rep,name=Fields6,json=fields6" json:"Fields6,omitempty"`
	Fields7          []int32   `protobuf:"zigzag32,27,rep,name=Fields7,json=fields7" json:"Fields7,omitempty"`
	Fields8          []int64   `protobuf:"zigzag64,28,rep,name=Fields8,json=fields8" json:"Fields8,omitempty"`
	Fields9          []uint32  `protobuf:"fixed32,29,rep,name=Fields9,json=fields9" json:"Fields9,omitempty"`
	Fields10         []int32   `protobuf:"fixed32,30,rep,name=Fields10,json=fields10" json:"Fields10,omitempty"`
	Fields11         []uint64  `protobuf:"fixed64,31,rep,name=Fields11,json=fields11" json:"Fields11,omitempty"`
	Fields12         []int64   `protobuf:"fixed64,32,rep,name=Fields12,json=fields12" json:"Fields12,omitempty"`
	Fields13         []bool    `protobuf:"varint,33,rep,name=Fields13,json=fields13" json:"Fields13,omitempty"`
	Fields14         []string  `protobuf:"bytes,34,rep,name=Fields14,json=fields14" json:"Fields14,omitempty"`
	Fields15         [][]byte  `protobuf:"bytes,35,rep,name=Fields15,json=fields15" json:"Fields15,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Simple) Reset()                    { *m = Simple{} }
func (m *Simple) String() string            { return proto.CompactTextString(m) }
func (*Simple) ProtoMessage()               {}
func (*Simple) Descriptor() ([]byte, []int) { return fileDescriptorSimple, []int{0} }

func (m *Simple) GetField1() float64 {
	if m != nil && m.Field1 != nil {
		return *m.Field1
	}
	return 0
}

func (m *Simple) GetField2() float32 {
	if m != nil && m.Field2 != nil {
		return *m.Field2
	}
	return 0
}

func (m *Simple) GetField3() int32 {
	if m != nil && m.Field3 != nil {
		return *m.Field3
	}
	return 0
}

func (m *Simple) GetField4() int64 {
	if m != nil && m.Field4 != nil {
		return *m.Field4
	}
	return 0
}

func (m *Simple) GetField5() uint32 {
	if m != nil && m.Field5 != nil {
		return *m.Field5
	}
	return 0
}

func (m *Simple) GetField6() uint64 {
	if m != nil && m.Field6 != nil {
		return *m.Field6
	}
	return 0
}

func (m *Simple) GetField7() int32 {
	if m != nil && m.Field7 != nil {
		return *m.Field7
	}
	return 0
}

func (m *Simple) GetField8() int64 {
	if m != nil && m.Field8 != nil {
		return *m.Field8
	}
	return 0
}

func (m *Simple) GetField9() uint32 {
	if m != nil && m.Field9 != nil {
		return *m.Field9
	}
	return 0
}

func (m *Simple) GetField10() int32 {
	if m != nil && m.Field10 != nil {
		return *m.Field10
	}
	return 0
}

func (m *Simple) GetField11() uint64 {
	if m != nil && m.Field11 != nil {
		return *m.Field11
	}
	return 0
}

func (m *Simple) GetField12() int64 {
	if m != nil && m.Field12 != nil {
		return *m.Field12
	}
	return 0
}

func (m *Simple) GetField13() bool {
	if m != nil && m.Field13 != nil {
		return *m.Field13
	}
	return false
}

func (m *Simple) GetField14() string {
	if m != nil && m.Field14 != nil {
		return *m.Field14
	}
	return ""
}

func (m *Simple) GetField15() []byte {
	if m != nil {
		return m.Field15
	}
	return nil
}

func (m *Simple) GetFields1() []float64 {
	if m != nil {
		return m.Fields1
	}
	return nil
}

func (m *Simple) GetFields2() []float32 {
	if m != nil {
		return m.Fields2
	}
	return nil
}

func (m *Simple) GetFields3() []int32 {
	if m != nil {
		return m.Fields3
	}
	return nil
}

func (m *Simple) GetFields4() []int64 {
	if m != nil {
		return m.Fields4
	}
	return nil
}

func (m *Simple) GetFields5() []uint32 {
	if m != nil {
		return m.Fields5
	}
	return nil
}

func (m *Simple) GetFields6() []uint64 {
	if m != nil {
		return m.Fields6
	}
	return nil
}

func (m *Simple) GetFields7() []int32 {
	if m != nil {
		return m.Fields7
	}
	return nil
}

func (m *Simple) GetFields8() []int64 {
	if m != nil {
		return m.Fields8
	}
	return nil
}

func (m *Simple) GetFields9() []uint32 {
	if m != nil {
		return m.Fields9
	}
	return nil
}

func (m *Simple) GetFields10() []int32 {
	if m != nil {
		return m.Fields10
	}
	return nil
}

func (m *Simple) GetFields11() []uint64 {
	if m != nil {
		return m.Fields11
	}
	return nil
}

func (m *Simple) GetFields12() []int64 {
	if m != nil {
		return m.Fields12
	}
	return nil
}

func (m *Simple) GetFields13() []bool {
	if m != nil {
		return m.Fields13
	}
	return nil
}

func (m *Simple) GetFields14() []string {
	if m != nil {
		return m.Fields14
	}
	return nil
}

func (m *Simple) GetFields15() [][]byte {
	if m != nil {
		return m.Fields15
	}
	return nil
}

type Nested struct {
	One              *Simple   `protobuf:"bytes,1,opt,name=One,json=one" json:"One,omitempty"`
	Many             []*Simple `protobuf:"bytes,2,rep,name=Many,json=many" json:"Many,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *Nested) Reset()                    { *m = Nested{} }
func (m *Nested) String() string            { return proto.CompactTextString(m) }
func (*Nested) ProtoMessage()               {}
func (*Nested) Descriptor() ([]byte, []int) { return fileDescriptorSimple, []int{1} }

func (m *Nested) GetOne() *Simple {
	if m != nil {
		return m.One
	}
	return nil
}

func (m *Nested) GetMany() []*Simple {
	if m != nil {
		return m.Many
	}
	return nil
}

func init() {
	proto.RegisterType((*Simple)(nil), "prototests.Simple")
	proto.RegisterType((*Nested)(nil), "prototests.Nested")
}
func (this *Simple) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return SimpleDescription()
}
func (this *Nested) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return SimpleDescription()
}
func SimpleDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 3654 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x5a, 0x5b, 0x6c, 0x23, 0xd7,
		0x79, 0x0e, 0x39, 0xbc, 0xfe, 0xa4, 0xc8, 0xd1, 0x91, 0xac, 0x9d, 0x95, 0xed, 0x5d, 0xae, 0x7c,
		0xa3, 0xed, 0x46, 0xbb, 0xab, 0xdb, 0x4a, 0xdc, 0x26, 0x06, 0x25, 0xd1, 0x8a, 0x0c, 0xdd, 0x3a,
		0x94, 0x9c, 0x75, 0xfa, 0x30, 0x18, 0x0d, 0x0f, 0xa9, 0xd9, 0x1d, 0xce, 0xb0, 0x33, 0xc3, 0xb5,
		0xe5, 0x27, 0x17, 0xee, 0x05, 0x41, 0xd1, 0xf4, 0x0a, 0x34, 0x71, 0x9c, 0xb4, 0x09, 0xd0, 0x3a,
		0x4d, 0x6f, 0x49, 0x6f, 0x0f, 0x7d, 0x2a, 0xd0, 0xa6, 0x7d, 0x2b, 0xd0, 0x3e, 0xf7, 0x25, 0x81,
		0x81, 0xde, 0xd2, 0x36, 0x05, 0x16, 0x68, 0x01, 0xbf, 0x14, 0xe7, 0x36, 0x33, 0xbc, 0x68, 0x87,
		0x0a, 0x90, 0xba, 0x4f, 0xd2, 0xf9, 0xff, 0xff, 0xfb, 0xe6, 0x9c, 0xff, 0xfc, 0xe7, 0xff, 0xff,
		0x39, 0x43, 0xf8, 0xab, 0xdb, 0x50, 0xe9, 0x38, 0x4e, 0xc7, 0xc2, 0x37, 0x7b, 0xae, 0xe3, 0x3b,
		0xa7, 0xfd, 0xf6, 0xcd, 0x16, 0xf6, 0x0c, 0xd7, 0xec, 0xf9, 0x8e, 0xbb, 0x48, 0x65, 0xa8, 0xcc,
		0x2c, 0x16, 0x85, 0xc5, 0xc2, 0x3e, 0x4c, 0xbf, 0x6a, 0x5a, 0x78, 0x3b, 0x30, 0x6c, 0x62, 0x1f,
		0xad, 0x43, 0xaa, 0x6d, 0x5a, 0x58, 0x49, 0x54, 0xa4, 0x6a, 0x61, 0xe9, 0xd9, 0xc5, 0x21, 0xd0,
		0xe2, 0x20, 0xe2, 0x88, 0x88, 0x55, 0x8a, 0x58, 0xf8, 0x30, 0x05, 0x33, 0x63, 0xb4, 0x08, 0x41,
		0xca, 0xd6, 0xbb, 0x84, 0x31, 0x51, 0xcd, 0xab, 0xf4, 0x7f, 0xa4, 0x40, 0xb6, 0xa7, 0x1b, 0x0f,
		0xf4, 0x0e, 0x56, 0x92, 0x54, 0x2c, 0x86, 0xe8, 0x1a, 0x40, 0x0b, 0xf7, 0xb0, 0xdd, 0xc2, 0xb6,
		0x71, 0xae, 0x48, 0x15, 0xa9, 0x9a, 0x57, 0x23, 0x12, 0xf4, 0x32, 0x4c, 0xf7, 0xfa, 0xa7, 0x96,
		0x69, 0x68, 0x11, 0x33, 0xa8, 0x48, 0xd5, 0xb4, 0x2a, 0x33, 0xc5, 0x76, 0x68, 0xfc, 0x02, 0x94,
		0xdf, 0xc4, 0xfa, 0x83, 0xa8, 0x69, 0x81, 0x9a, 0x96, 0x88, 0x38, 0x62, 0xb8, 0x05, 0xc5, 0x2e,
		0xf6, 0x3c, 0xbd, 0x83, 0x35, 0xff, 0xbc, 0x87, 0x95, 0x14, 0x5d, 0x7d, 0x65, 0x64, 0xf5, 0xc3,
		0x2b, 0x2f, 0x70, 0xd4, 0xf1, 0x79, 0x0f, 0xa3, 0x3a, 0xe4, 0xb1, 0xdd, 0xef, 0x32, 0x86, 0xf4,
		0x05, 0xfe, 0x6b, 0xd8, 0xfd, 0xee, 0x30, 0x4b, 0x8e, 0xc0, 0x38, 0x45, 0xd6, 0xc3, 0xee, 0x43,
		0xd3, 0xc0, 0x4a, 0x86, 0x12, 0xbc, 0x30, 0x42, 0xd0, 0x64, 0xfa, 0x61, 0x0e, 0x81, 0x43, 0x5b,
		0x90, 0xc7, 0x6f, 0xf9, 0xd8, 0xf6, 0x4c, 0xc7, 0x56, 0xb2, 0x94, 0xe4, 0xb9, 0x31, 0xbb, 0x88,
		0xad, 0xd6, 0x30, 0x45, 0x88, 0x43, 0x6b, 0x90, 0x75, 0x7a, 0xbe, 0xe9, 0xd8, 0x9e, 0x92, 0xab,
		0x24, 0xaa, 0x85, 0xa5, 0xa7, 0xc6, 0x06, 0xc2, 0x21, 0xb3, 0x51, 0x85, 0x31, 0xda, 0x05, 0xd9,
		0x73, 0xfa, 0xae, 0x81, 0x35, 0xc3, 0x69, 0x61, 0xcd, 0xb4, 0xdb, 0x8e, 0x92, 0xa7, 0x04, 0xd7,
		0x47, 0x17, 0x42, 0x0d, 0xb7, 0x9c, 0x16, 0xde, 0xb5, 0xdb, 0x8e, 0x5a, 0xf2, 0x06, 0xc6, 0x68,
		0x0e, 0x32, 0xde, 0xb9, 0xed, 0xeb, 0x6f, 0x29, 0x45, 0x1a, 0x21, 0x7c, 0xb4, 0xf0, 0xdf, 0x69,
		0x28, 0x4f, 0x12, 0x62, 0x77, 0x21, 0xdd, 0x26, 0xab, 0x54, 0x92, 0x97, 0xf1, 0x01, 0xc3, 0x0c,
		0x3a, 0x31, 0xf3, 0x43, 0x3a, 0xb1, 0x0e, 0x05, 0x1b, 0x7b, 0x3e, 0x6e, 0xb1, 0x88, 0x90, 0x26,
		0x8c, 0x29, 0x60, 0xa0, 0xd1, 0x90, 0x4a, 0xfd, 0x50, 0x21, 0x75, 0x0f, 0xca, 0xc1, 0x94, 0x34,
		0x57, 0xb7, 0x3b, 0x22, 0x36, 0x6f, 0xc6, 0xcd, 0x64, 0xb1, 0x21, 0x70, 0x2a, 0x81, 0xa9, 0x25,
		0x3c, 0x30, 0x46, 0xdb, 0x00, 0x8e, 0x8d, 0x9d, 0xb6, 0xd6, 0xc2, 0x86, 0xa5, 0xe4, 0x2e, 0xf0,
		0xd2, 0x21, 0x31, 0x19, 0xf1, 0x92, 0xc3, 0xa4, 0x86, 0x85, 0x36, 0xc2, 0x50, 0xcb, 0x5e, 0x10,
		0x29, 0xfb, 0xec, 0x90, 0x8d, 0x44, 0xdb, 0x09, 0x94, 0x5c, 0x4c, 0xe2, 0x1e, 0xb7, 0xf8, 0xca,
		0xf2, 0x74, 0x12, 0x8b, 0xb1, 0x2b, 0x53, 0x39, 0x8c, 0x2d, 0x6c, 0xca, 0x8d, 0x0e, 0xd1, 0x33,
		0x10, 0x08, 0x34, 0x1a, 0x56, 0x40, 0xb3, 0x50, 0x51, 0x08, 0x0f, 0xf4, 0x2e, 0x9e, 0x5f, 0x87,
		0xd2, 0xa0, 0x7b, 0xd0, 0x2c, 0xa4, 0x3d, 0x5f, 0x77, 0x7d, 0x1a, 0x85, 0x69, 0x95, 0x0d, 0x90,
		0x0c, 0x12, 0xb6, 0x5b, 0x34, 0xcb, 0xa5, 0x55, 0xf2, 0xef, 0xfc, 0x1d, 0x98, 0x1a, 0x78, 0xfc,
		0xa4, 0xc0, 0x85, 0x2f, 0x66, 0x60, 0x76, 0x5c, 0xcc, 0x8d, 0x0d, 0xff, 0x39, 0xc8, 0xd8, 0xfd,
		0xee, 0x29, 0x76, 0x15, 0x89, 0x32, 0xf0, 0x11, 0xaa, 0x43, 0xda, 0xd2, 0x4f, 0xb1, 0xa5, 0xa4,
		0x2a, 0x89, 0x6a, 0x69, 0xe9, 0xe5, 0x89, 0xa2, 0x7a, 0x71, 0x8f, 0x40, 0x54, 0x86, 0x44, 0x9f,
		0x86, 0x14, 0x4f, 0x71, 0x84, 0xe1, 0xa5, 0xc9, 0x18, 0x48, 0x2c, 0xaa, 0x14, 0x87, 0x9e, 0x84,
		0x3c, 0xf9, 0xcb, 0x7c, 0x9b, 0xa1, 0x73, 0xce, 0x11, 0x01, 0xf1, 0x2b, 0x9a, 0x87, 0x1c, 0x0d,
		0xb3, 0x16, 0x16, 0xa5, 0x21, 0x18, 0x93, 0x8d, 0x69, 0xe1, 0xb6, 0xde, 0xb7, 0x7c, 0xed, 0xa1,
		0x6e, 0xf5, 0x31, 0x0d, 0x98, 0xbc, 0x5a, 0xe4, 0xc2, 0xd7, 0x89, 0x0c, 0x5d, 0x87, 0x02, 0x8b,
		0x4a, 0xd3, 0x6e, 0xe1, 0xb7, 0x68, 0xf6, 0x49, 0xab, 0x2c, 0x50, 0x77, 0x89, 0x84, 0x3c, 0xfe,
		0xbe, 0xe7, 0xd8, 0x62, 0x6b, 0xe9, 0x23, 0x88, 0x80, 0x3e, 0xfe, 0xce, 0x70, 0xe2, 0x7b, 0x7a,
		0xfc, 0xf2, 0x86, 0x63, 0x71, 0xe1, 0xcf, 0x93, 0x90, 0xa2, 0xe7, 0xad, 0x0c, 0x85, 0xe3, 0x37,
		0x8e, 0x1a, 0xda, 0xf6, 0xe1, 0xc9, 0xe6, 0x5e, 0x43, 0x4e, 0xa0, 0x12, 0x00, 0x15, 0xbc, 0xba,
		0x77, 0x58, 0x3f, 0x96, 0x93, 0xc1, 0x78, 0xf7, 0xe0, 0x78, 0x6d, 0x45, 0x96, 0x02, 0xc0, 0x09,
		0x13, 0xa4, 0xa2, 0x06, 0xcb, 0x4b, 0x72, 0x1a, 0xc9, 0x50, 0x64, 0x04, 0xbb, 0xf7, 0x1a, 0xdb,
		0x6b, 0x2b, 0x72, 0x66, 0x50, 0xb2, 0xbc, 0x24, 0x67, 0xd1, 0x14, 0xe4, 0xa9, 0x64, 0xf3, 0xf0,
		0x70, 0x4f, 0xce, 0x05, 0x9c, 0xcd, 0x63, 0x75, 0xf7, 0x60, 0x47, 0xce, 0x07, 0x9c, 0x3b, 0xea,
		0xe1, 0xc9, 0x91, 0x0c, 0x01, 0xc3, 0x7e, 0xa3, 0xd9, 0xac, 0xef, 0x34, 0xe4, 0x42, 0x60, 0xb1,
		0xf9, 0xc6, 0x71, 0xa3, 0x29, 0x17, 0x07, 0xa6, 0xb5, 0xbc, 0x24, 0x4f, 0x05, 0x8f, 0x68, 0x1c,
		0x9c, 0xec, 0xcb, 0x25, 0x34, 0x0d, 0x53, 0xec, 0x11, 0x62, 0x12, 0xe5, 0x21, 0xd1, 0xda, 0x8a,
		0x2c, 0x87, 0x13, 0x61, 0x2c, 0xd3, 0x03, 0x82, 0xb5, 0x15, 0x19, 0x2d, 0x6c, 0x41, 0x9a, 0x46,
		0x17, 0x42, 0x50, 0xda, 0xab, 0x6f, 0x36, 0xf6, 0xb4, 0xc3, 0xa3, 0xe3, 0xdd, 0xc3, 0x83, 0xfa,
		0x9e, 0x9c, 0x08, 0x65, 0x6a, 0xe3, 0x27, 0x4e, 0x76, 0xd5, 0xc6, 0xb6, 0x9c, 0x8c, 0xca, 0x8e,
		0x1a, 0xf5, 0xe3, 0xc6, 0xb6, 0x2c, 0x2d, 0xbc, 0x04, 0xb3, 0xe3, 0xf2, 0xcc, 0xb8, 0x93, 0xb1,
		0xf0, 0xf5, 0x04, 0xcc, 0x8c, 0x49, 0x99, 0x63, 0x4f, 0xd1, 0x2b, 0x90, 0x66, 0x91, 0xc6, 0x8a,
		0xc8, 0x8b, 0x63, 0x73, 0x2f, 0x8d, 0xbb, 0x91, 0x42, 0x42, 0x71, 0xd1, 0x42, 0x2a, 0x5d, 0x50,
		0x48, 0x09, 0xc5, 0x48, 0x38, 0xbd, 0x9b, 0x00, 0xe5, 0x22, 0xee, 0x98, 0xf3, 0x9e, 0x1c, 0x38,
		0xef, 0x77, 0x87, 0x27, 0x70, 0xe3, 0xe2, 0x35, 0x8c, 0xcc, 0xe2, 0x83, 0x04, 0xcc, 0x8d, 0xef,
		0x37, 0xc6, 0xce, 0xe1, 0xd3, 0x90, 0xe9, 0x62, 0xff, 0xcc, 0x11, 0x35, 0xf7, 0xf9, 0x31, 0x99,
		0x9c, 0xa8, 0x87, 0x7d, 0xc5, 0x51, 0xd1, 0x52, 0x20, 0x5d, 0xd4, 0x34, 0xb0, 0xd9, 0x8c, 0xcc,
		0xf4, 0xf3, 0x49, 0x78, 0x62, 0x2c, 0xf9, 0xd8, 0x89, 0x3e, 0x0d, 0x60, 0xda, 0xbd, 0xbe, 0xcf,
		0xea, 0x2a, 0x4b, 0x33, 0x79, 0x2a, 0xa1, 0x47, 0x98, 0xa4, 0x90, 0xbe, 0x1f, 0xe8, 0x25, 0xaa,
		0x07, 0x26, 0xa2, 0x06, 0xeb, 0xe1, 0x44, 0x53, 0x74, 0xa2, 0xd7, 0x2e, 0x58, 0xe9, 0x48, 0xc9,
		0xba, 0x05, 0xb2, 0x61, 0x99, 0xd8, 0xf6, 0x35, 0xcf, 0x77, 0xb1, 0xde, 0x35, 0xed, 0x0e, 0xcd,
		0xa3, 0xb9, 0x5a, 0xba, 0xad, 0x5b, 0x1e, 0x56, 0xcb, 0x4c, 0xdd, 0x14, 0x5a, 0x82, 0xa0, 0xc5,
		0xc2, 0x8d, 0x20, 0x32, 0x03, 0x08, 0xa6, 0x0e, 0x10, 0x0b, 0xff, 0x90, 0x85, 0x42, 0xa4, 0x3b,
		0x43, 0x37, 0xa0, 0x78, 0x5f, 0x7f, 0xa8, 0x6b, 0xa2, 0xe3, 0x66, 0x9e, 0x28, 0x10, 0xd9, 0x11,
		0xef, 0xba, 0x6f, 0xc1, 0x2c, 0x35, 0x71, 0xfa, 0x3e, 0x76, 0x35, 0xc3, 0xd2, 0x3d, 0x8f, 0x3a,
		0x2d, 0x47, 0x4d, 0x11, 0xd1, 0x1d, 0x12, 0xd5, 0x96, 0xd0, 0xa0, 0x55, 0x98, 0xa1, 0x88, 0x6e,
		0xdf, 0xf2, 0xcd, 0x9e, 0x85, 0x35, 0xf2, 0x0e, 0xe0, 0xd1, 0x7c, 0x1a, 0xcc, 0x6c, 0x9a, 0x58,
		0xec, 0x73, 0x03, 0x32, 0x23, 0x0f, 0xed, 0xc0, 0xd3, 0x14, 0xd6, 0xc1, 0x36, 0x76, 0x75, 0x1f,
		0x6b, 0xf8, 0xa7, 0xfa, 0xba, 0xe5, 0x69, 0xba, 0xdd, 0xd2, 0xce, 0x74, 0xef, 0x4c, 0x99, 0x8d,
		0x12, 0x5c, 0x25, 0xb6, 0x3b, 0xdc, 0xb4, 0x41, 0x2d, 0xeb, 0x76, 0xeb, 0x33, 0xba, 0x77, 0x86,
		0x6a, 0x30, 0x47, 0x89, 0x3c, 0xdf, 0x35, 0xed, 0x8e, 0x66, 0x9c, 0x61, 0xe3, 0x81, 0xd6, 0xf7,
		0xdb, 0xeb, 0xca, 0x93, 0x51, 0x06, 0x3a, 0xc9, 0x26, 0xb5, 0xd9, 0x22, 0x26, 0x27, 0x7e, 0x7b,
		0x1d, 0x35, 0xa1, 0x48, 0xf6, 0xa3, 0x6b, 0xbe, 0x8d, 0xb5, 0xb6, 0xe3, 0xd2, 0x1a, 0x51, 0x1a,
		0x73, 0xb8, 0x23, 0x4e, 0x5c, 0x3c, 0xe4, 0x80, 0x7d, 0xa7, 0x85, 0x6b, 0xe9, 0xe6, 0x51, 0xa3,
		0xb1, 0xad, 0x16, 0x04, 0xcb, 0xab, 0x8e, 0x4b, 0x62, 0xaa, 0xe3, 0x04, 0x3e, 0x2e, 0xb0, 0x98,
		0xea, 0x38, 0xc2, 0xc3, 0xab, 0x30, 0x63, 0x18, 0x6c, 0xd9, 0xa6, 0xa1, 0xf1, 0x66, 0xdd, 0x53,
		0xe4, 0x01, 0x7f, 0x19, 0xc6, 0x0e, 0x33, 0xe0, 0x61, 0xee, 0xa1, 0x0d, 0x78, 0x22, 0xf4, 0x57,
		0x14, 0x38, 0x3d, 0xb2, 0xca, 0x61, 0xe8, 0x2a, 0xcc, 0xf4, 0xce, 0x47, 0x81, 0x68, 0xe0, 0x89,
		0xbd, 0xf3, 0x61, 0xd8, 0x73, 0xf4, 0x05, 0xcc, 0xc5, 0x86, 0xee, 0xe3, 0x96, 0x72, 0x25, 0x6a,
		0x1d, 0x51, 0xa0, 0x9b, 0x20, 0x1b, 0x86, 0x86, 0x6d, 0xfd, 0xd4, 0xc2, 0x9a, 0xee, 0x62, 0x5b,
		0xf7, 0x94, 0xeb, 0x51, 0xe3, 0x92, 0x61, 0x34, 0xa8, 0xb6, 0x4e, 0x95, 0xe8, 0x25, 0x98, 0x76,
		0x4e, 0xef, 0x1b, 0x2c, 0xb8, 0xb4, 0x9e, 0x8b, 0xdb, 0xe6, 0x5b, 0xca, 0xb3, 0xd4, 0x4d, 0x65,
		0xa2, 0xa0, 0xa1, 0x75, 0x44, 0xc5, 0xe8, 0x45, 0x90, 0x0d, 0xef, 0x4c, 0x77, 0x7b, 0xb4, 0x48,
		0x7b, 0x3d, 0xdd, 0xc0, 0xca, 0x73, 0xcc, 0x94, 0xc9, 0x0f, 0x84, 0x18, 0x35, 0xe0, 0x3a, 0x59,
		0xbc, 0xad, 0xdb, 0x8e, 0xd6, 0xf7, 0xb0, 0x16, 0x4e, 0x31, 0xd8, 0x8b, 0xe7, 0xc9, 0xb4, 0xd4,
		0xa7, 0x84, 0xd9, 0x89, 0x87, 0xb7, 0x03, 0x23, 0xb1, 0x3d, 0xf7, 0x60, 0xb6, 0x6f, 0x9b, 0xb6,
		0x8f, 0xdd, 0x9e, 0x8b, 0x09, 0x98, 0x1d, 0x58, 0xe5, 0x9f, 0xb2, 0x17, 0x34, 0xdd, 0x27, 0x51,
		0x6b, 0x16, 0x24, 0xea, 0x4c, 0x7f, 0x54, 0xb8, 0x50, 0x83, 0x62, 0x34, 0x76, 0x50, 0x1e, 0x58,
		0xf4, 0xc8, 0x09, 0x52, 0x51, 0xb7, 0x0e, 0xb7, 0x49, 0x2d, 0xfc, 0x5c, 0x43, 0x4e, 0x92, 0x9a,
		0xbc, 0xb7, 0x7b, 0xdc, 0xd0, 0xd4, 0x93, 0x83, 0xe3, 0xdd, 0xfd, 0x86, 0x2c, 0xbd, 0x94, 0xcf,
		0xfd, 0x73, 0x56, 0x7e, 0xe7, 0x9d, 0x77, 0xde, 0x49, 0x2e, 0x7c, 0x27, 0x09, 0xa5, 0xc1, 0x3e,
		0x18, 0xfd, 0x38, 0x5c, 0x11, 0x2f, 0xad, 0x1e, 0xf6, 0xb5, 0x37, 0x4d, 0x97, 0x86, 0x73, 0x57,
		0x67, 0x9d, 0x64, 0xb0, 0x13, 0xb3, 0xdc, 0xaa, 0x89, 0xfd, 0xcf, 0x9a, 0x2e, 0x09, 0xd6, 0xae,
		0xee, 0xa3, 0x3d, 0xb8, 0x6e, 0x3b, 0x9a, 0xe7, 0xeb, 0x76, 0x4b, 0x77, 0x5b, 0x5a, 0x78, 0x5d,
		0xa0, 0xe9, 0x86, 0x81, 0x3d, 0xcf, 0x61, 0x95, 0x24, 0x60, 0x79, 0xca, 0x76, 0x9a, 0xdc, 0x38,
		0x4c, 0xb1, 0x75, 0x6e, 0x3a, 0x14, 0x35, 0xd2, 0x45, 0x51, 0xf3, 0x24, 0xe4, 0xbb, 0x7a, 0x4f,
		0xc3, 0xb6, 0xef, 0x9e, 0xd3, 0xee, 0x2d, 0xa7, 0xe6, 0xba, 0x7a, 0xaf, 0x41, 0xc6, 0x3f, 0xba,
		0x3d, 0x88, 0xfa, 0xf1, 0x1f, 0x25, 0x28, 0x46, 0x3b, 0x38, 0xd2, 0x10, 0x1b, 0x34, 0xcd, 0x27,
		0x68, 0x16, 0x78, 0xe6, 0xb1, 0xfd, 0xde, 0xe2, 0x16, 0xc9, 0xff, 0xb5, 0x0c, 0xeb, 0xab, 0x54,
		0x86, 0x24, 0xb5, 0x97, 0xc4, 0x1a, 0x66, 0xdd, 0x7a, 0x4e, 0xe5, 0x23, 0xb4, 0x03, 0x99, 0xfb,
		0x1e, 0xe5, 0xce, 0x50, 0xee, 0x67, 0x1f, 0xcf, 0xfd, 0x5a, 0x93, 0x92, 0xe7, 0x5f, 0x6b, 0x6a,
		0x07, 0x87, 0xea, 0x7e, 0x7d, 0x4f, 0xe5, 0x70, 0x74, 0x15, 0x52, 0x96, 0xfe, 0xf6, 0xf9, 0x60,
		0xa5, 0xa0, 0xa2, 0x49, 0x1d, 0x7f, 0x15, 0x52, 0x6f, 0x62, 0xfd, 0xc1, 0x60, 0x7e, 0xa6, 0xa2,
		0x1f, 0x61, 0xe8, 0xdf, 0x84, 0x34, 0xf5, 0x17, 0x02, 0xe0, 0x1e, 0x93, 0x3f, 0x81, 0x72, 0x90,
		0xda, 0x3a, 0x54, 0x49, 0xf8, 0xcb, 0x50, 0x64, 0x52, 0xed, 0x68, 0xb7, 0xb1, 0xd5, 0x90, 0x93,
		0x0b, 0xab, 0x90, 0x61, 0x4e, 0x20, 0x47, 0x23, 0x70, 0x83, 0xfc, 0x09, 0x3e, 0xe4, 0x1c, 0x09,
		0xa1, 0x3d, 0xd9, 0xdf, 0x6c, 0xa8, 0x72, 0x32, 0xba, 0xbd, 0x7f, 0x91, 0x80, 0x42, 0xa4, 0xa1,
		0x22, 0xa5, 0x5c, 0xb7, 0x2c, 0xe7, 0x4d, 0x4d, 0xb7, 0x4c, 0xdd, 0xe3, 0xfb, 0x03, 0x54, 0x54,
		0x27, 0x92, 0x49, 0xfd, 0xf7, 0x7f, 0x12, 0x9b, 0x5f, 0x4d, 0x80, 0x3c, 0xdc, 0x8c, 0x0d, 0x4d,
		0x30, 0xf1, 0xb1, 0x4e, 0xf0, 0xfd, 0x04, 0x94, 0x06, 0x3b, 0xb0, 0xa1, 0xe9, 0xdd, 0xf8, 0x58,
		0xa7, 0xf7, 0xe5, 0x04, 0x4c, 0x0d, 0xf4, 0x5d, 0xff, 0xaf, 0x66, 0xf7, 0x9e, 0x04, 0x33, 0x63,
		0x70, 0xa8, 0xce, 0x1b, 0x54, 0xd6, 0x33, 0x7f, 0x72, 0x92, 0x67, 0x2d, 0x92, 0xfa, 0x77, 0xa4,
		0xbb, 0x3e, 0xef, 0x67, 0x5f, 0x04, 0xd9, 0x6c, 0x61, 0xdb, 0x37, 0xdb, 0x26, 0x76, 0xf9, 0xbb,
		0x31, 0xeb, 0x5a, 0xcb, 0xa1, 0x9c, 0xbd, 0x1e, 0xff, 0x18, 0xa0, 0x9e, 0xe3, 0x99, 0xbe, 0xf9,
		0x10, 0x6b, 0xa6, 0x2d, 0x5e, 0xa4, 0x49, 0x17, 0x9b, 0x52, 0x65, 0xa1, 0xd9, 0xb5, 0xfd, 0xc0,
		0xda, 0xc6, 0x1d, 0x7d, 0xc8, 0x9a, 0xa4, 0x21, 0x49, 0x95, 0x85, 0x26, 0xb0, 0xbe, 0x01, 0xc5,
		0x96, 0xd3, 0x27, 0x0d, 0x01, 0xb3, 0x23, 0x59, 0x2f, 0xa1, 0x16, 0x98, 0x2c, 0x30, 0xe1, 0x1d,
		0x5b, 0xf8, 0x06, 0x5f, 0x54, 0x0b, 0x4c, 0xc6, 0x4c, 0x5e, 0x80, 0xb2, 0xde, 0xe9, 0xb8, 0x84,
		0x5c, 0x10, 0xb1, 0x36, 0xb4, 0x14, 0x88, 0xa9, 0xe1, 0xfc, 0x6b, 0x90, 0x13, 0x7e, 0x20, 0x85,
		0x85, 0x78, 0x42, 0xeb, 0xb1, 0x7b, 0x94, 0x24, 0x79, 0xa9, 0xb7, 0x85, 0xf2, 0x06, 0x14, 0x4d,
		0x4f, 0x0b, 0x2f, 0xf4, 0x92, 0x95, 0x64, 0x35, 0xa7, 0x16, 0x4c, 0x2f, 0xb8, 0xc1, 0x59, 0xf8,
		0x20, 0x09, 0xa5, 0xc1, 0x0b, 0x49, 0xb4, 0x0d, 0x39, 0xcb, 0x31, 0x74, 0x1a, 0x08, 0xec, 0x36,
		0xbc, 0x1a, 0x73, 0x87, 0xb9, 0xb8, 0xc7, 0xed, 0xd5, 0x00, 0x39, 0xff, 0x77, 0x09, 0xc8, 0x09,
		0x31, 0x9a, 0x83, 0x54, 0x4f, 0xf7, 0xcf, 0x28, 0x5d, 0x7a, 0x33, 0x29, 0x27, 0x54, 0x3a, 0x26,
		0x72, 0xaf, 0xa7, 0xdb, 0x34, 0x04, 0xb8, 0x9c, 0x8c, 0xc9, 0xbe, 0x5a, 0x58, 0x6f, 0xd1, 0x06,
		0xd7, 0xe9, 0x76, 0xb1, 0xed, 0x7b, 0x62, 0x5f, 0xb9, 0x7c, 0x8b, 0x8b, 0xd1, 0xcb, 0x30, 0xed,
		0xbb, 0xba, 0x69, 0x0d, 0xd8, 0xa6, 0xa8, 0xad, 0x2c, 0x14, 0x81, 0x71, 0x0d, 0xae, 0x0a, 0xde,
		0x16, 0xf6, 0x75, 0xe3, 0x0c, 0xb7, 0x42, 0x50, 0x86, 0xde, 0x76, 0x5d, 0xe1, 0x06, 0xdb, 0x5c,
		0x2f, 0xb0, 0x9b, 0xf7, 0x60, 0xc6, 0x70, 0xba, 0xc3, 0x9e, 0xd8, 0x94, 0x87, 0xde, 0xbb, 0xbc,
		0xcf, 0x24, 0x3e, 0x07, 0x61, 0x53, 0xf1, 0xf5, 0xa4, 0xb4, 0x73, 0xb4, 0xf9, 0xcd, 0xe4, 0xfc,
		0x0e, 0xc3, 0x1d, 0x09, 0x0f, 0xaa, 0xb8, 0x6d, 0x61, 0x83, 0x78, 0x07, 0xbe, 0xf6, 0x0c, 0x7c,
		0xb2, 0x63, 0xfa, 0x67, 0xfd, 0xd3, 0x45, 0xc3, 0xe9, 0xde, 0xec, 0x38, 0x1d, 0x27, 0xfc, 0x9c,
		0x41, 0x46, 0x74, 0x40, 0xff, 0xe3, 0x9f, 0x34, 0xf2, 0x81, 0x74, 0x3e, 0xf6, 0xfb, 0x47, 0xed,
		0x00, 0x66, 0xb8, 0xb1, 0x46, 0xef, 0x54, 0x59, 0x0b, 0x8a, 0x1e, 0xfb, 0x42, 0xae, 0x7c, 0xfb,
		0x43, 0x5a, 0x12, 0xd4, 0x69, 0x0e, 0x25, 0x3a, 0xd6, 0xa4, 0xd6, 0x54, 0x78, 0x62, 0x80, 0x8f,
		0xc5, 0x30, 0x76, 0x63, 0x18, 0xbf, 0xc3, 0x19, 0x67, 0x22, 0x8c, 0x4d, 0x0e, 0xad, 0x6d, 0xc1,
		0xd4, 0x65, 0xb8, 0xfe, 0x86, 0x73, 0x15, 0x71, 0x94, 0x64, 0x07, 0xca, 0x94, 0xc4, 0xe8, 0x7b,
		0xbe, 0xd3, 0xa5, 0x09, 0xe2, 0xf1, 0x34, 0x7f, 0xfb, 0x21, 0x0b, 0xaa, 0x12, 0x81, 0x6d, 0x05,
		0xa8, 0xda, 0xeb, 0x30, 0x4b, 0x24, 0xf4, 0x0c, 0x46, 0xd9, 0xe2, 0xaf, 0x10, 0x94, 0xbf, 0x7f,
		0x97, 0xc5, 0xde, 0x4c, 0x40, 0x10, 0xe1, 0x8d, 0xec, 0x44, 0x07, 0xfb, 0x3e, 0x76, 0x3d, 0x4d,
		0xb7, 0x2c, 0xf4, 0xd8, 0x6f, 0x0c, 0xca, 0x97, 0xbe, 0x3f, 0xb8, 0x13, 0x3b, 0x0c, 0x59, 0xb7,
		0xac, 0xda, 0x09, 0x5c, 0x19, 0xb3, 0xb3, 0x13, 0x70, 0xbe, 0xc7, 0x39, 0x67, 0x47, 0x76, 0x97,
		0xd0, 0x1e, 0x81, 0x90, 0x07, 0xfb, 0x31, 0x01, 0xe7, 0x97, 0x39, 0x27, 0xe2, 0x58, 0xb1, 0x2d,
		0x84, 0xf1, 0x35, 0x98, 0x7e, 0x88, 0xdd, 0x53, 0xc7, 0xe3, 0xef, 0xbd, 0x13, 0xd0, 0xbd, 0xcf,
		0xe9, 0xca, 0x1c, 0x48, 0xdf, 0x82, 0x09, 0xd7, 0x06, 0xe4, 0xda, 0xba, 0x81, 0x27, 0xa0, 0xf8,
		0x0a, 0xa7, 0xc8, 0x12, 0x7b, 0x02, 0xad, 0x43, 0xb1, 0xe3, 0xf0, 0x34, 0x1c, 0x0f, 0xff, 0x2a,
		0x87, 0x17, 0x04, 0x86, 0x53, 0xf4, 0x9c, 0x5e, 0xdf, 0x22, 0x39, 0x3a, 0x9e, 0xe2, 0x37, 0x05,
		0x85, 0xc0, 0x70, 0x8a, 0x4b, 0xb8, 0xf5, 0xb7, 0x04, 0x85, 0x17, 0xf1, 0xe7, 0x2b, 0x50, 0x70,
		0x6c, 0xeb, 0xdc, 0xb1, 0x27, 0x99, 0xc4, 0xd7, 0x38, 0x03, 0x70, 0x08, 0x21, 0xb8, 0x0b, 0xf9,
		0x49, 0x37, 0xe2, 0xb7, 0x39, 0x3c, 0x87, 0xc5, 0x0e, 0xec, 0x40, 0x59, 0x24, 0x19, 0xd3, 0xb1,
		0x27, 0xa0, 0xf8, 0x1d, 0x4e, 0x51, 0x8a, 0xc0, 0xf8, 0x32, 0x7c, 0xec, 0xf9, 0x1d, 0x3c, 0x09,
		0xc9, 0x07, 0x62, 0x19, 0x1c, 0xc2, 0x5d, 0x79, 0x8a, 0x6d, 0xe3, 0x6c, 0x32, 0x86, 0x6f, 0x08,
		0x57, 0x0a, 0x0c, 0xa1, 0xd8, 0x82, 0xa9, 0xae, 0xee, 0x7a, 0x67, 0xba, 0x35, 0xd1, 0x76, 0xfc,
		0x2e, 0xe7, 0x28, 0x06, 0x20, 0xee, 0x91, 0xbe, 0x7d, 0x19, 0x9a, 0x6f, 0x0a, 0x8f, 0x44, 0x60,
		0xfc, 0xe8, 0x79, 0x3e, 0xbd, 0x5a, 0xb8, 0x0c, 0xdb, 0xef, 0x89, 0xa3, 0xc7, 0xb0, 0xfb, 0x51,
		0xc6, 0xbb, 0x90, 0xf7, 0xcc, 0xb7, 0x27, 0xa2, 0xf9, 0x7d, 0xb1, 0xd3, 0x14, 0x40, 0xc0, 0x6f,
		0xc0, 0xd5, 0xb1, 0xa9, 0x7e, 0x02, 0xb2, 0x3f, 0xe0, 0x64, 0x73, 0x63, 0xd2, 0x3d, 0x4f, 0x09,
		0x97, 0xa5, 0xfc, 0x43, 0x91, 0x12, 0xf0, 0x10, 0xd7, 0x11, 0x69, 0x63, 0x3d, 0xbd, 0x7d, 0x39,
		0xaf, 0xfd, 0x91, 0xf0, 0x1a, 0xc3, 0x0e, 0x78, 0xed, 0x18, 0xe6, 0x38, 0xe3, 0xe5, 0xf6, 0xf5,
		0x5b, 0x22, 0xb1, 0x32, 0xf4, 0xc9, 0xe0, 0xee, 0xfe, 0x24, 0xcc, 0x07, 0xee, 0x14, 0x1d, 0x98,
		0xa7, 0x75, 0xf5, 0xde, 0x04, 0xcc, 0xdf, 0xe6, 0xcc, 0x22, 0xe3, 0x07, 0x2d, 0x9c, 0xb7, 0xaf,
		0xf7, 0x08, 0xf9, 0x3d, 0x50, 0x04, 0x79, 0xdf, 0x76, 0xb1, 0xe1, 0x74, 0x6c, 0xf3, 0x6d, 0xdc,
		0x9a, 0x80, 0xfa, 0x8f, 0x87, 0xb6, 0xea, 0x24, 0x02, 0x27, 0xcc, 0xbb, 0x20, 0x07, 0xfd, 0x86,
		0x66, 0x76, 0x7b, 0x8e, 0xeb, 0xc7, 0x30, 0xfe, 0x89, 0xd8, 0xa9, 0x00, 0xb7, 0x4b, 0x61, 0xb5,
		0x06, 0x94, 0xe8, 0x70, 0xd2, 0x90, 0xfc, 0x53, 0x4e, 0x34, 0x15, 0xa2, 0x78, 0xe2, 0x30, 0x9c,
		0x6e, 0x4f, 0x77, 0x27, 0xc9, 0x7f, 0x7f, 0x26, 0x12, 0x07, 0x87, 0xb0, 0xe8, 0x2b, 0x0f, 0x55,
		0x62, 0x14, 0xf7, 0xf9, 0x55, 0xf9, 0xe9, 0x47, 0xfc, 0xcc, 0x0e, 0x16, 0xe2, 0xda, 0x1e, 0x71,
		0xcf, 0x60, 0xb9, 0x8c, 0x27, 0x7b, 0xf7, 0x51, 0xe0, 0xa1, 0x81, 0x6a, 0x59, 0x7b, 0x15, 0xa6,
		0x06, 0x4a, 0x65, 0x3c, 0xd5, 0xcf, 0x70, 0xaa, 0x62, 0xb4, 0x52, 0xd6, 0x56, 0x21, 0x45, 0xca,
		0x5e, 0x3c, 0xfc, 0x67, 0x39, 0x9c, 0x9a, 0xd7, 0x3e, 0x05, 0x39, 0x51, 0xee, 0xe2, 0xa1, 0x3f,
		0xc7, 0xa1, 0x01, 0x84, 0xc0, 0x45, 0xa9, 0x8b, 0x87, 0xff, 0xbc, 0x80, 0x0b, 0x08, 0x81, 0x4f,
		0xee, 0xc2, 0xbf, 0xfc, 0x85, 0x14, 0x4f, 0x57, 0xc2, 0x77, 0x77, 0x21, 0xcb, 0x6b, 0x5c, 0x3c,
		0xfa, 0xf3, 0xfc, 0xe1, 0x02, 0x51, 0xbb, 0x03, 0xe9, 0x09, 0x1d, 0xfe, 0x8b, 0x1c, 0xca, 0xec,
		0x6b, 0x5b, 0x50, 0x88, 0xd4, 0xb5, 0x78, 0xf8, 0x17, 0x38, 0x3c, 0x8a, 0x22, 0x53, 0xe7, 0x75,
		0x2d, 0x9e, 0xe0, 0x97, 0xc4, 0xd4, 0x39, 0x82, 0xb8, 0x4d, 0x94, 0xb4, 0x78, 0xf4, 0x2f, 0x0b,
		0xaf, 0x0b, 0x48, 0xed, 0x15, 0xc8, 0x07, 0x69, 0x2a, 0x1e, 0xff, 0x2b, 0x1c, 0x1f, 0x62, 0x88,
		0x07, 0x22, 0x69, 0x32, 0x9e, 0xe2, 0x57, 0x85, 0x07, 0x22, 0x28, 0x72, 0x8c, 0x86, 0x4b, 0x5f,
		0x3c, 0xd3, 0xaf, 0x89, 0x63, 0x34, 0x54, 0xf9, 0xc8, 0x6e, 0xd2, 0x6c, 0x11, 0x4f, 0xf1, 0xeb,
		0x62, 0x37, 0xa9, 0x3d, 0x99, 0xc6, 0x70, 0x2d, 0x89, 0xe7, 0xf8, 0x0d, 0x31, 0x8d, 0xa1, 0x52,
		0x52, 0x3b, 0x02, 0x34, 0x5a, 0x47, 0xe2, 0xf9, 0xbe, 0xc8, 0xf9, 0xa6, 0x47, 0xca, 0x48, 0xed,
		0xb3, 0x30, 0x37, 0xbe, 0x86, 0xc4, 0xb3, 0x7e, 0xe9, 0xd1, 0x50, 0xd7, 0x1f, 0x2d, 0x21, 0xb5,
		0xe3, 0xb0, 0xeb, 0x8f, 0xd6, 0x8f, 0x78, 0xda, 0xf7, 0x1e, 0x0d, 0xbe, 0xd8, 0x45, 0xcb, 0x47,
		0xad, 0x0e, 0x10, 0xa6, 0xee, 0x78, 0xae, 0xf7, 0x39, 0x57, 0x04, 0x44, 0x8e, 0x06, 0xcf, 0xdc,
		0xf1, 0xf8, 0xaf, 0x88, 0xa3, 0xc1, 0x11, 0xb5, 0xbb, 0x90, 0xb3, 0xfb, 0x96, 0x45, 0x82, 0x03,
		0x3d, 0xfe, 0x27, 0x0d, 0xca, 0xbf, 0x7c, 0xc4, 0x0f, 0x86, 0x00, 0xd4, 0x56, 0x21, 0x8d, 0xbb,
		0xa7, 0xb8, 0x15, 0x87, 0xfc, 0xd7, 0x8f, 0x44, 0x42, 0x20, 0xd6, 0xb5, 0x57, 0x00, 0xd8, 0x4b,
		0x23, 0xbd, 0xc3, 0x8e, 0xc1, 0xfe, 0xdb, 0x47, 0xfc, 0x33, 0x6b, 0x08, 0x09, 0x09, 0xd8, 0x47,
		0xdb, 0xc7, 0x13, 0x7c, 0x7f, 0x90, 0x80, 0xbe, 0x68, 0x6e, 0x40, 0xf6, 0xbe, 0xe7, 0xd8, 0xbe,
		0xde, 0x89, 0x43, 0xff, 0x3b, 0x47, 0x0b, 0x7b, 0xe2, 0xb0, 0xae, 0xe3, 0x62, 0x5f, 0xef, 0x78,
		0x71, 0xd8, 0xff, 0xe0, 0xd8, 0x00, 0x40, 0xc0, 0x86, 0xee, 0xf9, 0x93, 0xac, 0xfb, 0x3f, 0x05,
		0x58, 0x00, 0xc8, 0xa4, 0xc9, 0xff, 0x0f, 0xf0, 0x79, 0x1c, 0xf6, 0x07, 0x62, 0xd2, 0xdc, 0xbe,
		0xf6, 0x29, 0xc8, 0x93, 0x7f, 0xd9, 0x4f, 0x0f, 0x62, 0xc0, 0xff, 0xc5, 0xc1, 0x21, 0x62, 0xf3,
		0xc6, 0xf8, 0xab, 0x1d, 0xd8, 0x71, 0x76, 0x1c, 0x76, 0xa9, 0x03, 0x7f, 0x9d, 0x85, 0xa2, 0x67,
		0x76, 0x7b, 0x42, 0x8f, 0x58, 0x84, 0x92, 0x0c, 0xec, 0xcd, 0x5f, 0xee, 0xf6, 0x66, 0xe1, 0x0b,
		0x19, 0xc8, 0x34, 0x29, 0x17, 0x9a, 0x83, 0x0c, 0x9d, 0xdc, 0x6d, 0x7a, 0xc1, 0x9d, 0x50, 0x33,
		0xf4, 0x67, 0x78, 0xb7, 0x03, 0xf9, 0x12, 0xbd, 0xb9, 0x4f, 0x72, 0xf9, 0x52, 0x20, 0x5f, 0x16,
		0xbf, 0x6e, 0xa2, 0xf2, 0xe5, 0x40, 0xbe, 0x42, 0xaf, 0xbe, 0x24, 0x2e, 0x5f, 0x09, 0xe4, 0xab,
		0xf4, 0xee, 0x72, 0x8a, 0xcb, 0x57, 0x03, 0xf9, 0x1a, 0xbd, 0xab, 0x4c, 0x71, 0xf9, 0x5a, 0x20,
		0xbf, 0x43, 0x2f, 0x28, 0xa7, 0xb9, 0xfc, 0x4e, 0x20, 0x5f, 0xa7, 0x57, 0x92, 0x88, 0xcb, 0xd7,
		0x03, 0xf9, 0x06, 0xfd, 0x96, 0x9c, 0xe5, 0xf2, 0x0d, 0xa4, 0x40, 0x96, 0xad, 0xeb, 0x16, 0xfd,
		0xf2, 0x52, 0x56, 0xb3, 0x6c, 0x61, 0xb7, 0x42, 0xcd, 0x6d, 0xfa, 0xad, 0x38, 0x23, 0x34, 0xb7,
		0x43, 0xcd, 0x12, 0xfd, 0xe5, 0xa3, 0x2c, 0x34, 0x4b, 0xa1, 0x66, 0x59, 0x99, 0xe2, 0x6f, 0xf4,
		0x6c, 0x18, 0x6a, 0x56, 0x94, 0x12, 0x0b, 0x09, 0xa6, 0x59, 0x09, 0x35, 0xab, 0x4a, 0x99, 0xde,
		0xb5, 0x72, 0xcd, 0x6a, 0xa0, 0xf1, 0x6e, 0x2b, 0x4f, 0x54, 0xa4, 0x6a, 0x82, 0x6b, 0xbc, 0x70,
		0x06, 0xde, 0x92, 0x32, 0x57, 0x91, 0xaa, 0x49, 0xa1, 0x09, 0x67, 0xe0, 0x2d, 0x2b, 0x57, 0xe8,
		0x0f, 0x69, 0xb9, 0x26, 0x9c, 0x81, 0xb7, 0xa2, 0x28, 0x15, 0xa9, 0x2a, 0x09, 0x4d, 0x38, 0x03,
		0x6f, 0x55, 0xb9, 0x5a, 0x91, 0xaa, 0x53, 0x42, 0x13, 0x99, 0xc1, 0x9a, 0x32, 0x5f, 0x91, 0xaa,
		0x29, 0xa1, 0x59, 0x0b, 0x35, 0x77, 0x94, 0x27, 0x2b, 0x52, 0x75, 0x5a, 0x68, 0xee, 0x84, 0x9a,
		0x75, 0xe5, 0xa9, 0x8a, 0x54, 0x45, 0x42, 0xb3, 0x1e, 0x6a, 0x36, 0x94, 0xa7, 0x2b, 0x52, 0x35,
		0x2b, 0x34, 0x1b, 0x68, 0x1e, 0x72, 0x7c, 0xa5, 0xb7, 0x94, 0x6b, 0x15, 0xa9, 0x5a, 0x56, 0x73,
		0x7c, 0xa9, 0xb7, 0x22, 0xba, 0xdb, 0xca, 0xf5, 0x8a, 0x54, 0xcd, 0x04, 0xba, 0xdb, 0x11, 0xdd,
		0x92, 0x52, 0xa9, 0x48, 0x55, 0x39, 0xd0, 0x2d, 0x45, 0x74, 0xcb, 0xca, 0x8d, 0x8a, 0x44, 0xf2,
		0x25, 0xd7, 0x2d, 0x47, 0x74, 0x2b, 0xca, 0x02, 0xbd, 0x4d, 0x15, 0xba, 0x95, 0x88, 0x6e, 0x55,
		0x79, 0xa6, 0x22, 0x55, 0x8b, 0x81, 0x6e, 0x75, 0xe1, 0x75, 0xc8, 0x1c, 0xd0, 0xdf, 0x7e, 0xa2,
		0x67, 0x41, 0x3a, 0xb4, 0xd9, 0x27, 0xc9, 0xc2, 0x12, 0x5a, 0x0c, 0xcf, 0xd8, 0x22, 0x3b, 0x30,
		0xaa, 0x44, 0x9a, 0xbb, 0xe7, 0x21, 0xb5, 0xaf, 0xdb, 0xe7, 0xfc, 0xcb, 0xc1, 0x38, 0xb3, 0x54,
		0x57, 0xb7, 0xcf, 0x37, 0xe5, 0x1f, 0x7c, 0xf7, 0x5a, 0xe2, 0x7f, 0xbe, 0x7b, 0x2d, 0xf1, 0x8d,
		0xef, 0x5d, 0x4b, 0x7c, 0xeb, 0x7b, 0xd7, 0x12, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x46, 0x9f,
		0xad, 0xdf, 0x31, 0x2e, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *Simple) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Simple)
	if !ok {
		that2, ok := that.(Simple)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field1 != nil && that1.Field1 != nil {
		if *this.Field1 != *that1.Field1 {
			return false
		}
	} else if this.Field1 != nil {
		return false
	} else if that1.Field1 != nil {
		return false
	}
	if this.Field2 != nil && that1.Field2 != nil {
		if *this.Field2 != *that1.Field2 {
			return false
		}
	} else if this.Field2 != nil {
		return false
	} else if that1.Field2 != nil {
		return false
	}
	if this.Field3 != nil && that1.Field3 != nil {
		if *this.Field3 != *that1.Field3 {
			return false
		}
	} else if this.Field3 != nil {
		return false
	} else if that1.Field3 != nil {
		return false
	}
	if this.Field4 != nil && that1.Field4 != nil {
		if *this.Field4 != *that1.Field4 {
			return false
		}
	} else if this.Field4 != nil {
		return false
	} else if that1.Field4 != nil {
		return false
	}
	if this.Field5 != nil && that1.Field5 != nil {
		if *this.Field5 != *that1.Field5 {
			return false
		}
	} else if this.Field5 != nil {
		return false
	} else if that1.Field5 != nil {
		return false
	}
	if this.Field6 != nil && that1.Field6 != nil {
		if *this.Field6 != *that1.Field6 {
			return false
		}
	} else if this.Field6 != nil {
		return false
	} else if that1.Field6 != nil {
		return false
	}
	if this.Field7 != nil && that1.Field7 != nil {
		if *this.Field7 != *that1.Field7 {
			return false
		}
	} else if this.Field7 != nil {
		return false
	} else if that1.Field7 != nil {
		return false
	}
	if this.Field8 != nil && that1.Field8 != nil {
		if *this.Field8 != *that1.Field8 {
			return false
		}
	} else if this.Field8 != nil {
		return false
	} else if that1.Field8 != nil {
		return false
	}
	if this.Field9 != nil && that1.Field9 != nil {
		if *this.Field9 != *that1.Field9 {
			return false
		}
	} else if this.Field9 != nil {
		return false
	} else if that1.Field9 != nil {
		return false
	}
	if this.Field10 != nil && that1.Field10 != nil {
		if *this.Field10 != *that1.Field10 {
			return false
		}
	} else if this.Field10 != nil {
		return false
	} else if that1.Field10 != nil {
		return false
	}
	if this.Field11 != nil && that1.Field11 != nil {
		if *this.Field11 != *that1.Field11 {
			return false
		}
	} else if this.Field11 != nil {
		return false
	} else if that1.Field11 != nil {
		return false
	}
	if this.Field12 != nil && that1.Field12 != nil {
		if *this.Field12 != *that1.Field12 {
			return false
		}
	} else if this.Field12 != nil {
		return false
	} else if that1.Field12 != nil {
		return false
	}
	if this.Field13 != nil && that1.Field13 != nil {
		if *this.Field13 != *that1.Field13 {
			return false
		}
	} else if this.Field13 != nil {
		return false
	} else if that1.Field13 != nil {
		return false
	}
	if this.Field14 != nil && that1.Field14 != nil {
		if *this.Field14 != *that1.Field14 {
			return false
		}
	} else if this.Field14 != nil {
		return false
	} else if that1.Field14 != nil {
		return false
	}
	if !bytes.Equal(this.Field15, that1.Field15) {
		return false
	}
	if len(this.Fields1) != len(that1.Fields1) {
		return false
	}
	for i := range this.Fields1 {
		if this.Fields1[i] != that1.Fields1[i] {
			return false
		}
	}
	if len(this.Fields2) != len(that1.Fields2) {
		return false
	}
	for i := range this.Fields2 {
		if this.Fields2[i] != that1.Fields2[i] {
			return false
		}
	}
	if len(this.Fields3) != len(that1.Fields3) {
		return false
	}
	for i := range this.Fields3 {
		if this.Fields3[i] != that1.Fields3[i] {
			return false
		}
	}
	if len(this.Fields4) != len(that1.Fields4) {
		return false
	}
	for i := range this.Fields4 {
		if this.Fields4[i] != that1.Fields4[i] {
			return false
		}
	}
	if len(this.Fields5) != len(that1.Fields5) {
		return false
	}
	for i := range this.Fields5 {
		if this.Fields5[i] != that1.Fields5[i] {
			return false
		}
	}
	if len(this.Fields6) != len(that1.Fields6) {
		return false
	}
	for i := range this.Fields6 {
		if this.Fields6[i] != that1.Fields6[i] {
			return false
		}
	}
	if len(this.Fields7) != len(that1.Fields7) {
		return false
	}
	for i := range this.Fields7 {
		if this.Fields7[i] != that1.Fields7[i] {
			return false
		}
	}
	if len(this.Fields8) != len(that1.Fields8) {
		return false
	}
	for i := range this.Fields8 {
		if this.Fields8[i] != that1.Fields8[i] {
			return false
		}
	}
	if len(this.Fields9) != len(that1.Fields9) {
		return false
	}
	for i := range this.Fields9 {
		if this.Fields9[i] != that1.Fields9[i] {
			return false
		}
	}
	if len(this.Fields10) != len(that1.Fields10) {
		return false
	}
	for i := range this.Fields10 {
		if this.Fields10[i] != that1.Fields10[i] {
			return false
		}
	}
	if len(this.Fields11) != len(that1.Fields11) {
		return false
	}
	for i := range this.Fields11 {
		if this.Fields11[i] != that1.Fields11[i] {
			return false
		}
	}
	if len(this.Fields12) != len(that1.Fields12) {
		return false
	}
	for i := range this.Fields12 {
		if this.Fields12[i] != that1.Fields12[i] {
			return false
		}
	}
	if len(this.Fields13) != len(that1.Fields13) {
		return false
	}
	for i := range this.Fields13 {
		if this.Fields13[i] != that1.Fields13[i] {
			return false
		}
	}
	if len(this.Fields14) != len(that1.Fields14) {
		return false
	}
	for i := range this.Fields14 {
		if this.Fields14[i] != that1.Fields14[i] {
			return false
		}
	}
	if len(this.Fields15) != len(that1.Fields15) {
		return false
	}
	for i := range this.Fields15 {
		if !bytes.Equal(this.Fields15[i], that1.Fields15[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Nested) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Nested)
	if !ok {
		that2, ok := that.(Nested)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.One.Equal(that1.One) {
		return false
	}
	if len(this.Many) != len(that1.Many) {
		return false
	}
	for i := range this.Many {
		if !this.Many[i].Equal(that1.Many[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Simple) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 34)
	s = append(s, "&prototests.Simple{")
	if this.Field1 != nil {
		s = append(s, "Field1: "+valueToGoStringSimple(this.Field1, "float64")+",\n")
	}
	if this.Field2 != nil {
		s = append(s, "Field2: "+valueToGoStringSimple(this.Field2, "float32")+",\n")
	}
	if this.Field3 != nil {
		s = append(s, "Field3: "+valueToGoStringSimple(this.Field3, "int32")+",\n")
	}
	if this.Field4 != nil {
		s = append(s, "Field4: "+valueToGoStringSimple(this.Field4, "int64")+",\n")
	}
	if this.Field5 != nil {
		s = append(s, "Field5: "+valueToGoStringSimple(this.Field5, "uint32")+",\n")
	}
	if this.Field6 != nil {
		s = append(s, "Field6: "+valueToGoStringSimple(this.Field6, "uint64")+",\n")
	}
	if this.Field7 != nil {
		s = append(s, "Field7: "+valueToGoStringSimple(this.Field7, "int32")+",\n")
	}
	if this.Field8 != nil {
		s = append(s, "Field8: "+valueToGoStringSimple(this.Field8, "int64")+",\n")
	}
	if this.Field9 != nil {
		s = append(s, "Field9: "+valueToGoStringSimple(this.Field9, "uint32")+",\n")
	}
	if this.Field10 != nil {
		s = append(s, "Field10: "+valueToGoStringSimple(this.Field10, "int32")+",\n")
	}
	if this.Field11 != nil {
		s = append(s, "Field11: "+valueToGoStringSimple(this.Field11, "uint64")+",\n")
	}
	if this.Field12 != nil {
		s = append(s, "Field12: "+valueToGoStringSimple(this.Field12, "int64")+",\n")
	}
	if this.Field13 != nil {
		s = append(s, "Field13: "+valueToGoStringSimple(this.Field13, "bool")+",\n")
	}
	if this.Field14 != nil {
		s = append(s, "Field14: "+valueToGoStringSimple(this.Field14, "string")+",\n")
	}
	if this.Field15 != nil {
		s = append(s, "Field15: "+valueToGoStringSimple(this.Field15, "byte")+",\n")
	}
	if this.Fields1 != nil {
		s = append(s, "Fields1: "+fmt.Sprintf("%#v", this.Fields1)+",\n")
	}
	if this.Fields2 != nil {
		s = append(s, "Fields2: "+fmt.Sprintf("%#v", this.Fields2)+",\n")
	}
	if this.Fields3 != nil {
		s = append(s, "Fields3: "+fmt.Sprintf("%#v", this.Fields3)+",\n")
	}
	if this.Fields4 != nil {
		s = append(s, "Fields4: "+fmt.Sprintf("%#v", this.Fields4)+",\n")
	}
	if this.Fields5 != nil {
		s = append(s, "Fields5: "+fmt.Sprintf("%#v", this.Fields5)+",\n")
	}
	if this.Fields6 != nil {
		s = append(s, "Fields6: "+fmt.Sprintf("%#v", this.Fields6)+",\n")
	}
	if this.Fields7 != nil {
		s = append(s, "Fields7: "+fmt.Sprintf("%#v", this.Fields7)+",\n")
	}
	if this.Fields8 != nil {
		s = append(s, "Fields8: "+fmt.Sprintf("%#v", this.Fields8)+",\n")
	}
	if this.Fields9 != nil {
		s = append(s, "Fields9: "+fmt.Sprintf("%#v", this.Fields9)+",\n")
	}
	if this.Fields10 != nil {
		s = append(s, "Fields10: "+fmt.Sprintf("%#v", this.Fields10)+",\n")
	}
	if this.Fields11 != nil {
		s = append(s, "Fields11: "+fmt.Sprintf("%#v", this.Fields11)+",\n")
	}
	if this.Fields12 != nil {
		s = append(s, "Fields12: "+fmt.Sprintf("%#v", this.Fields12)+",\n")
	}
	if this.Fields13 != nil {
		s = append(s, "Fields13: "+fmt.Sprintf("%#v", this.Fields13)+",\n")
	}
	if this.Fields14 != nil {
		s = append(s, "Fields14: "+fmt.Sprintf("%#v", this.Fields14)+",\n")
	}
	if this.Fields15 != nil {
		s = append(s, "Fields15: "+fmt.Sprintf("%#v", this.Fields15)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Nested) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&prototests.Nested{")
	if this.One != nil {
		s = append(s, "One: "+fmt.Sprintf("%#v", this.One)+",\n")
	}
	if this.Many != nil {
		s = append(s, "Many: "+fmt.Sprintf("%#v", this.Many)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSimple(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringSimple(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func NewPopulatedSimple(r randySimple, easy bool) *Simple {
	this := &Simple{}
	if r.Intn(10) != 0 {
		v1 := float64(r.Float64())
		if r.Intn(2) == 0 {
			v1 *= -1
		}
		this.Field1 = &v1
	}
	if r.Intn(10) != 0 {
		v2 := float32(r.Float32())
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		this.Field2 = &v2
	}
	if r.Intn(10) != 0 {
		v3 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		this.Field3 = &v3
	}
	if r.Intn(10) != 0 {
		v4 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		this.Field4 = &v4
	}
	if r.Intn(10) != 0 {
		v5 := uint32(r.Uint32())
		this.Field5 = &v5
	}
	if r.Intn(10) != 0 {
		v6 := uint64(uint64(r.Uint32()))
		this.Field6 = &v6
	}
	if r.Intn(10) != 0 {
		v7 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		this.Field7 = &v7
	}
	if r.Intn(10) != 0 {
		v8 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		this.Field8 = &v8
	}
	if r.Intn(10) != 0 {
		v9 := uint32(r.Uint32())
		this.Field9 = &v9
	}
	if r.Intn(10) != 0 {
		v10 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v10 *= -1
		}
		this.Field10 = &v10
	}
	if r.Intn(10) != 0 {
		v11 := uint64(uint64(r.Uint32()))
		this.Field11 = &v11
	}
	if r.Intn(10) != 0 {
		v12 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		this.Field12 = &v12
	}
	if r.Intn(10) != 0 {
		v13 := bool(bool(r.Intn(2) == 0))
		this.Field13 = &v13
	}
	if r.Intn(10) != 0 {
		v14 := randStringSimple(r)
		this.Field14 = &v14
	}
	if r.Intn(10) != 0 {
		v15 := r.Intn(100)
		this.Field15 = make([]byte, v15)
		for i := 0; i < v15; i++ {
			this.Field15[i] = byte(r.Intn(256))
		}
	}
	if r.Intn(10) != 0 {
		v16 := r.Intn(10)
		this.Fields1 = make([]float64, v16)
		for i := 0; i < v16; i++ {
			this.Fields1[i] = float64(r.Float64())
			if r.Intn(2) == 0 {
				this.Fields1[i] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v17 := r.Intn(10)
		this.Fields2 = make([]float32, v17)
		for i := 0; i < v17; i++ {
			this.Fields2[i] = float32(r.Float32())
			if r.Intn(2) == 0 {
				this.Fields2[i] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v18 := r.Intn(10)
		this.Fields3 = make([]int32, v18)
		for i := 0; i < v18; i++ {
			this.Fields3[i] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Fields3[i] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v19 := r.Intn(10)
		this.Fields4 = make([]int64, v19)
		for i := 0; i < v19; i++ {
			this.Fields4[i] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Fields4[i] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v20 := r.Intn(10)
		this.Fields5 = make([]uint32, v20)
		for i := 0; i < v20; i++ {
			this.Fields5[i] = uint32(r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v21 := r.Intn(10)
		this.Fields6 = make([]uint64, v21)
		for i := 0; i < v21; i++ {
			this.Fields6[i] = uint64(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v22 := r.Intn(10)
		this.Fields7 = make([]int32, v22)
		for i := 0; i < v22; i++ {
			this.Fields7[i] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Fields7[i] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v23 := r.Intn(10)
		this.Fields8 = make([]int64, v23)
		for i := 0; i < v23; i++ {
			this.Fields8[i] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Fields8[i] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v24 := r.Intn(10)
		this.Fields9 = make([]uint32, v24)
		for i := 0; i < v24; i++ {
			this.Fields9[i] = uint32(r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v25 := r.Intn(10)
		this.Fields10 = make([]int32, v25)
		for i := 0; i < v25; i++ {
			this.Fields10[i] = int32(r.Int31())
			if r.Intn(2) == 0 {
				this.Fields10[i] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v26 := r.Intn(10)
		this.Fields11 = make([]uint64, v26)
		for i := 0; i < v26; i++ {
			this.Fields11[i] = uint64(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v27 := r.Intn(10)
		this.Fields12 = make([]int64, v27)
		for i := 0; i < v27; i++ {
			this.Fields12[i] = int64(r.Int63())
			if r.Intn(2) == 0 {
				this.Fields12[i] *= -1
			}
		}
	}
	if r.Intn(10) != 0 {
		v28 := r.Intn(10)
		this.Fields13 = make([]bool, v28)
		for i := 0; i < v28; i++ {
			this.Fields13[i] = bool(bool(r.Intn(2) == 0))
		}
	}
	if r.Intn(10) != 0 {
		v29 := r.Intn(10)
		this.Fields14 = make([]string, v29)
		for i := 0; i < v29; i++ {
			this.Fields14[i] = randStringSimple(r)
		}
	}
	if r.Intn(10) != 0 {
		v30 := r.Intn(10)
		this.Fields15 = make([][]byte, v30)
		for i := 0; i < v30; i++ {
			v31 := r.Intn(100)
			this.Fields15[i] = make([]byte, v31)
			for j := 0; j < v31; j++ {
				this.Fields15[i][j] = byte(r.Intn(256))
			}
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSimple(r, 36)
	}
	return this
}

func NewPopulatedNested(r randySimple, easy bool) *Nested {
	this := &Nested{}
	if r.Intn(10) != 0 {
		this.One = NewPopulatedSimple(r, easy)
	}
	if r.Intn(10) != 0 {
		v32 := r.Intn(5)
		this.Many = make([]*Simple, v32)
		for i := 0; i < v32; i++ {
			this.Many[i] = NewPopulatedSimple(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedSimple(r, 3)
	}
	return this
}

type randySimple interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSimple(r randySimple) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSimple(r randySimple) string {
	v33 := r.Intn(100)
	tmps := make([]rune, v33)
	for i := 0; i < v33; i++ {
		tmps[i] = randUTF8RuneSimple(r)
	}
	return string(tmps)
}
func randUnrecognizedSimple(r randySimple, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldSimple(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldSimple(data []byte, r randySimple, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateSimple(data, uint64(key))
		v34 := r.Int63()
		if r.Intn(2) == 0 {
			v34 *= -1
		}
		data = encodeVarintPopulateSimple(data, uint64(v34))
	case 1:
		data = encodeVarintPopulateSimple(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateSimple(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateSimple(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateSimple(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateSimple(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}

func init() { proto.RegisterFile("simple.proto", fileDescriptorSimple) }

var fileDescriptorSimple = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0xd3, 0xbd, 0x6e, 0xd3, 0x50,
	0x14, 0xc0, 0x71, 0x9d, 0x9c, 0xd4, 0x49, 0x6e, 0x13, 0x92, 0x5a, 0xa2, 0x1c, 0x02, 0x98, 0x43,
	0x40, 0xe8, 0x2c, 0xa4, 0xf1, 0x57, 0x3e, 0x56, 0x06, 0x36, 0x40, 0x0a, 0x12, 0x7b, 0x4b, 0xdd,
	0x10, 0xa9, 0x89, 0x2b, 0xae, 0x3b, 0xf4, 0x25, 0x78, 0x0e, 0x46, 0x5e, 0xa9, 0x7d, 0x02, 0x46,
	0x46, 0x24, 0xe7, 0x7e, 0x78, 0x61, 0x4a, 0xee, 0xff, 0x67, 0x5b, 0xe7, 0x0c, 0x57, 0xf5, 0xf5,
	0x76, 0x77, 0x73, 0x5d, 0x4c, 0x6f, 0x7e, 0x94, 0x55, 0x19, 0xaa, 0xfa, 0xa7, 0x2a, 0x74, 0xa5,
	0xc7, 0xef, 0x36, 0xdb, 0xea, 0xfb, 0xed, 0xc5, 0xf4, 0x5b, 0xb9, 0x3b, 0xdb, 0x94, 0x9b, 0xf2,
	0xac, 0xb6, 0x8b, 0xdb, 0xab, 0xfa, 0x54, 0x1f, 0xea, 0x7f, 0x87, 0x57, 0x27, 0x3f, 0x03, 0x15,
	0x7c, 0xa9, 0xbf, 0x15, 0x9e, 0xaa, 0xe0, 0xc3, 0xb6, 0xb8, 0xbe, 0x8c, 0x09, 0x18, 0x04, 0xd6,
	0xc1, 0x55, 0x7d, 0x72, 0x3d, 0xa1, 0x16, 0x83, 0xb4, 0x4c, 0x4f, 0x5c, 0x4f, 0x09, 0x19, 0xe4,
	0xc8, 0xf4, 0xd4, 0xf5, 0x8c, 0xda, 0x0c, 0x82, 0xa6, 0x67, 0xae, 0xe7, 0x74, 0xc4, 0x20, 0x03,
	0xd3, 0x73, 0xd7, 0xe7, 0x14, 0x30, 0x48, 0xdb, 0xf4, 0xb9, 0xeb, 0x0b, 0xea, 0x30, 0xc8, 0x89,
	0xe9, 0x0b, 0xd7, 0x97, 0xd4, 0x65, 0x90, 0xd0, 0xf4, 0xa5, 0xeb, 0x2b, 0xea, 0x31, 0x48, 0xc7,
	0xf4, 0x55, 0x48, 0xaa, 0x73, 0xd8, 0x6b, 0x46, 0x8a, 0x41, 0x86, 0xeb, 0xce, 0x61, 0xb1, 0x99,
	0x97, 0x98, 0x8e, 0x19, 0x24, 0xb0, 0x12, 0x7b, 0x49, 0xa8, 0xcf, 0x20, 0x23, 0x2b, 0x89, 0x97,
	0x94, 0x06, 0x0c, 0xd2, 0xb5, 0x92, 0x7a, 0xc9, 0xe8, 0x11, 0x83, 0xf4, 0xac, 0x64, 0x5e, 0x72,
	0x1a, 0x32, 0x48, 0xdf, 0x4a, 0xee, 0x44, 0xc7, 0xf4, 0x98, 0x51, 0xc0, 0x88, 0xf6, 0x13, 0xe8,
	0x84, 0x4e, 0x19, 0xa5, 0x65, 0xc5, 0x4f, 0xa0, 0x53, 0x7a, 0xc2, 0x28, 0x47, 0x56, 0xfc, 0x04,
	0x3a, 0x23, 0x62, 0x14, 0xb4, 0xe2, 0x27, 0xd0, 0x39, 0x3d, 0x65, 0x94, 0x81, 0x95, 0xc6, 0x04,
	0x73, 0x1a, 0x33, 0x4a, 0xdb, 0xca, 0xdc, 0xcb, 0x82, 0x9e, 0x31, 0xca, 0x89, 0x95, 0x85, 0x97,
	0x25, 0x3d, 0x67, 0x94, 0xd0, 0xca, 0xd2, 0xcb, 0x8a, 0x5e, 0x30, 0x4a, 0xc7, 0xca, 0x2a, 0x1c,
	0xab, 0xae, 0xd9, 0x74, 0x46, 0x11, 0xa3, 0x0c, 0xd7, 0x5d, 0xb3, 0xea, 0xac, 0x61, 0x31, 0xbd,
	0x64, 0x94, 0xc0, 0x59, 0xdc, 0xb0, 0x84, 0x98, 0x51, 0x46, 0xce, 0x92, 0x86, 0xa5, 0xf4, 0x8a,
	0x51, 0xba, 0xce, 0xd2, 0x86, 0x65, 0x34, 0x61, 0x94, 0x9e, 0xb3, 0xac, 0x61, 0x39, 0xbd, 0x66,
	0x94, 0xbe, 0xb3, 0x7c, 0xf2, 0x55, 0x05, 0x9f, 0x0a, 0x5d, 0x15, 0x97, 0xe1, 0x1b, 0x85, 0x9f,
	0xf7, 0x45, 0x7d, 0x19, 0x8e, 0x93, 0x70, 0xea, 0xef, 0xd8, 0xf4, 0x70, 0x61, 0xd6, 0x58, 0xee,
	0x8b, 0xf0, 0xad, 0x6a, 0x7f, 0x3c, 0xdf, 0xdf, 0x51, 0x8b, 0xf1, 0x3f, 0x8f, 0xb5, 0x77, 0xe7,
	0xfb, 0xbb, 0xf7, 0xa3, 0x3f, 0xf7, 0x11, 0xfc, 0xbd, 0x8f, 0xe0, 0xd7, 0x43, 0x04, 0xbf, 0x1f,
	0x22, 0xf8, 0x17, 0x00, 0x00, 0xff, 0xff, 0x81, 0x21, 0xc1, 0x4c, 0xc4, 0x03, 0x00, 0x00,
}
