// Code generated by protoc-gen-gogo.
// source: msg.proto
// DO NOT EDIT!

/*
Package prototests is a generated protocol buffer package.

It is generated from these files:
	msg.proto

It has these top-level messages:
	BigMsg
	SmallMsg
*/
package prototests

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// BigMsg contains a field and a message field.
type BigMsg struct {
	Field            *int64    `protobuf:"varint,1,opt,name=Field,json=field" json:"Field,omitempty"`
	Msg              *SmallMsg `protobuf:"bytes,3,opt,name=Msg,json=msg" json:"Msg,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *BigMsg) Reset()                    { *m = BigMsg{} }
func (m *BigMsg) String() string            { return proto.CompactTextString(m) }
func (*BigMsg) ProtoMessage()               {}
func (*BigMsg) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{0} }

func (m *BigMsg) GetField() int64 {
	if m != nil && m.Field != nil {
		return *m.Field
	}
	return 0
}

func (m *BigMsg) GetMsg() *SmallMsg {
	if m != nil {
		return m.Msg
	}
	return nil
}

// SmallMsg only contains some native fields.
type SmallMsg struct {
	ScarBusStop      *string  `protobuf:"bytes,1,opt,name=ScarBusStop,json=scarBusStop" json:"ScarBusStop,omitempty"`
	FlightParachute  []uint32 `protobuf:"fixed32,12,rep,name=FlightParachute,json=flightParachute" json:"FlightParachute,omitempty"`
	MapShark         *string  `protobuf:"bytes,18,opt,name=MapShark,json=mapShark" json:"MapShark,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *SmallMsg) Reset()                    { *m = SmallMsg{} }
func (m *SmallMsg) String() string            { return proto.CompactTextString(m) }
func (*SmallMsg) ProtoMessage()               {}
func (*SmallMsg) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{1} }

func (m *SmallMsg) GetScarBusStop() string {
	if m != nil && m.ScarBusStop != nil {
		return *m.ScarBusStop
	}
	return ""
}

func (m *SmallMsg) GetFlightParachute() []uint32 {
	if m != nil {
		return m.FlightParachute
	}
	return nil
}

func (m *SmallMsg) GetMapShark() string {
	if m != nil && m.MapShark != nil {
		return *m.MapShark
	}
	return ""
}

func init() {
	proto.RegisterType((*BigMsg)(nil), "prototests.BigMsg")
	proto.RegisterType((*SmallMsg)(nil), "prototests.SmallMsg")
}
func (this *BigMsg) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return MsgDescription()
}
func (this *SmallMsg) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return MsgDescription()
}
func MsgDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 3391 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x5a, 0x5b, 0x6c, 0x1b, 0x57,
		0x7a, 0x0e, 0x6f, 0x12, 0xf9, 0x93, 0x22, 0x47, 0x47, 0x8a, 0x4c, 0x2b, 0x89, 0x2d, 0x2b, 0x37,
		0xc5, 0x69, 0xe4, 0xd4, 0xb1, 0x1d, 0x9b, 0x6e, 0x62, 0x50, 0x12, 0xad, 0xc8, 0xd0, 0x85, 0x1d,
		0x4a, 0x89, 0x93, 0x3e, 0x0c, 0x8e, 0x86, 0x87, 0xd4, 0xd8, 0xc3, 0x19, 0x76, 0xce, 0xd0, 0xb6,
		0xfc, 0xe4, 0x22, 0xbd, 0x20, 0x28, 0xda, 0xa6, 0x17, 0xa0, 0xb9, 0xb7, 0x09, 0xd0, 0xa6, 0x4d,
		0x6f, 0x49, 0x6f, 0x0f, 0x7d, 0x2a, 0x50, 0xa4, 0x7d, 0x2b, 0xd0, 0x3e, 0xf7, 0x25, 0x45, 0x80,
		0x76, 0x77, 0xb3, 0xbb, 0x59, 0xc0, 0xc0, 0x2e, 0x90, 0x97, 0xc5, 0xb9, 0x0d, 0x87, 0x17, 0x79,
		0xa8, 0x00, 0xd9, 0xec, 0x93, 0x78, 0xfe, 0xf3, 0x7f, 0xdf, 0xfc, 0xe7, 0x3f, 0xff, 0xf9, 0xff,
		0x7f, 0xce, 0x08, 0xfe, 0xed, 0x17, 0x61, 0xae, 0xe9, 0xba, 0x4d, 0x9b, 0x9c, 0x6a, 0x7b, 0xae,
		0xef, 0xee, 0x76, 0x1a, 0xa7, 0xea, 0x84, 0x9a, 0x9e, 0xd5, 0xf6, 0x5d, 0x6f, 0x91, 0xcb, 0x50,
		0x41, 0x68, 0x2c, 0x2a, 0x8d, 0xf9, 0x0d, 0x98, 0xbc, 0x6c, 0xd9, 0x64, 0x25, 0x50, 0xac, 0x11,
		0x1f, 0x9d, 0x87, 0x64, 0xc3, 0xb2, 0x49, 0x31, 0x36, 0x97, 0x58, 0xc8, 0x9e, 0x7e, 0x64, 0xb1,
		0x0f, 0xb4, 0xd8, 0x8b, 0xa8, 0x32, 0xb1, 0xce, 0x11, 0xf3, 0x9f, 0x27, 0x61, 0x6a, 0xc8, 0x2c,
		0x42, 0x90, 0x74, 0x70, 0x8b, 0x31, 0xc6, 0x16, 0x32, 0x3a, 0xff, 0x8d, 0x8a, 0x30, 0xde, 0xc6,
		0xe6, 0x75, 0xdc, 0x24, 0xc5, 0x38, 0x17, 0xab, 0x21, 0x3a, 0x06, 0x50, 0x27, 0x6d, 0xe2, 0xd4,
		0x89, 0x63, 0xee, 0x17, 0x13, 0x73, 0x89, 0x85, 0x8c, 0x1e, 0x92, 0xa0, 0x27, 0x61, 0xb2, 0xdd,
		0xd9, 0xb5, 0x2d, 0xd3, 0x08, 0xa9, 0xc1, 0x5c, 0x62, 0x21, 0xa5, 0x6b, 0x62, 0x62, 0xa5, 0xab,
		0xfc, 0x38, 0x14, 0x6e, 0x12, 0x7c, 0x3d, 0xac, 0x9a, 0xe5, 0xaa, 0x79, 0x26, 0x0e, 0x29, 0x2e,
		0x43, 0xae, 0x45, 0x28, 0xc5, 0x4d, 0x62, 0xf8, 0xfb, 0x6d, 0x52, 0x4c, 0xf2, 0xd5, 0xcf, 0x0d,
		0xac, 0xbe, 0x7f, 0xe5, 0x59, 0x89, 0xda, 0xde, 0x6f, 0x13, 0x54, 0x86, 0x0c, 0x71, 0x3a, 0x2d,
		0xc1, 0x90, 0x3a, 0xc0, 0x7f, 0x15, 0xa7, 0xd3, 0xea, 0x67, 0x49, 0x33, 0x98, 0xa4, 0x18, 0xa7,
		0xc4, 0xbb, 0x61, 0x99, 0xa4, 0x38, 0xc6, 0x09, 0x1e, 0x1f, 0x20, 0xa8, 0x89, 0xf9, 0x7e, 0x0e,
		0x85, 0x43, 0xcb, 0x90, 0x21, 0xb7, 0x7c, 0xe2, 0x50, 0xcb, 0x75, 0x8a, 0xe3, 0x9c, 0xe4, 0xd1,
		0x21, 0xbb, 0x48, 0xec, 0x7a, 0x3f, 0x45, 0x17, 0x87, 0xce, 0xc1, 0xb8, 0xdb, 0xf6, 0x2d, 0xd7,
		0xa1, 0xc5, 0xf4, 0x5c, 0x6c, 0x21, 0x7b, 0xfa, 0xc1, 0xa1, 0x81, 0xb0, 0x25, 0x74, 0x74, 0xa5,
		0x8c, 0xd6, 0x40, 0xa3, 0x6e, 0xc7, 0x33, 0x89, 0x61, 0xba, 0x75, 0x62, 0x58, 0x4e, 0xc3, 0x2d,
		0x66, 0x38, 0xc1, 0xf1, 0xc1, 0x85, 0x70, 0xc5, 0x65, 0xb7, 0x4e, 0xd6, 0x9c, 0x86, 0xab, 0xe7,
		0x69, 0xcf, 0x18, 0xcd, 0xc0, 0x18, 0xdd, 0x77, 0x7c, 0x7c, 0xab, 0x98, 0xe3, 0x11, 0x22, 0x47,
		0xf3, 0x3f, 0x4e, 0x41, 0x61, 0x94, 0x10, 0xbb, 0x08, 0xa9, 0x06, 0x5b, 0x65, 0x31, 0x7e, 0x18,
		0x1f, 0x08, 0x4c, 0xaf, 0x13, 0xc7, 0xbe, 0xa6, 0x13, 0xcb, 0x90, 0x75, 0x08, 0xf5, 0x49, 0x5d,
		0x44, 0x44, 0x62, 0xc4, 0x98, 0x02, 0x01, 0x1a, 0x0c, 0xa9, 0xe4, 0xd7, 0x0a, 0xa9, 0xab, 0x50,
		0x08, 0x4c, 0x32, 0x3c, 0xec, 0x34, 0x55, 0x6c, 0x9e, 0x8a, 0xb2, 0x64, 0xb1, 0xa2, 0x70, 0x3a,
		0x83, 0xe9, 0x79, 0xd2, 0x33, 0x46, 0x2b, 0x00, 0xae, 0x43, 0xdc, 0x86, 0x51, 0x27, 0xa6, 0x5d,
		0x4c, 0x1f, 0xe0, 0xa5, 0x2d, 0xa6, 0x32, 0xe0, 0x25, 0x57, 0x48, 0x4d, 0x1b, 0x5d, 0xe8, 0x86,
		0xda, 0xf8, 0x01, 0x91, 0xb2, 0x21, 0x0e, 0xd9, 0x40, 0xb4, 0xed, 0x40, 0xde, 0x23, 0x2c, 0xee,
		0x49, 0x5d, 0xae, 0x2c, 0xc3, 0x8d, 0x58, 0x8c, 0x5c, 0x99, 0x2e, 0x61, 0x62, 0x61, 0x13, 0x5e,
		0x78, 0x88, 0x1e, 0x86, 0x40, 0x60, 0xf0, 0xb0, 0x02, 0x9e, 0x85, 0x72, 0x4a, 0xb8, 0x89, 0x5b,
		0x64, 0xf6, 0x3c, 0xe4, 0x7b, 0xdd, 0x83, 0xa6, 0x21, 0x45, 0x7d, 0xec, 0xf9, 0x3c, 0x0a, 0x53,
		0xba, 0x18, 0x20, 0x0d, 0x12, 0xc4, 0xa9, 0xf3, 0x2c, 0x97, 0xd2, 0xd9, 0xcf, 0xd9, 0x67, 0x61,
		0xa2, 0xe7, 0xf1, 0xa3, 0x02, 0xe7, 0xdf, 0x18, 0x83, 0xe9, 0x61, 0x31, 0x37, 0x34, 0xfc, 0x67,
		0x60, 0xcc, 0xe9, 0xb4, 0x76, 0x89, 0x57, 0x4c, 0x70, 0x06, 0x39, 0x42, 0x65, 0x48, 0xd9, 0x78,
		0x97, 0xd8, 0xc5, 0xe4, 0x5c, 0x6c, 0x21, 0x7f, 0xfa, 0xc9, 0x91, 0xa2, 0x7a, 0x71, 0x9d, 0x41,
		0x74, 0x81, 0x44, 0xcf, 0x43, 0x52, 0xa6, 0x38, 0xc6, 0x70, 0x72, 0x34, 0x06, 0x16, 0x8b, 0x3a,
		0xc7, 0xa1, 0x07, 0x20, 0xc3, 0xfe, 0x0a, 0xdf, 0x8e, 0x71, 0x9b, 0xd3, 0x4c, 0xc0, 0xfc, 0x8a,
		0x66, 0x21, 0xcd, 0xc3, 0xac, 0x4e, 0x54, 0x69, 0x08, 0xc6, 0x6c, 0x63, 0xea, 0xa4, 0x81, 0x3b,
		0xb6, 0x6f, 0xdc, 0xc0, 0x76, 0x87, 0xf0, 0x80, 0xc9, 0xe8, 0x39, 0x29, 0x7c, 0x91, 0xc9, 0xd0,
		0x71, 0xc8, 0x8a, 0xa8, 0xb4, 0x9c, 0x3a, 0xb9, 0xc5, 0xb3, 0x4f, 0x4a, 0x17, 0x81, 0xba, 0xc6,
		0x24, 0xec, 0xf1, 0xd7, 0xa8, 0xeb, 0xa8, 0xad, 0xe5, 0x8f, 0x60, 0x02, 0xfe, 0xf8, 0x67, 0xfb,
		0x13, 0xdf, 0x43, 0xc3, 0x97, 0xd7, 0x1f, 0x8b, 0xf3, 0xff, 0x1c, 0x87, 0x24, 0x3f, 0x6f, 0x05,
		0xc8, 0x6e, 0xbf, 0x5c, 0xad, 0x18, 0x2b, 0x5b, 0x3b, 0x4b, 0xeb, 0x15, 0x2d, 0x86, 0xf2, 0x00,
		0x5c, 0x70, 0x79, 0x7d, 0xab, 0xbc, 0xad, 0xc5, 0x83, 0xf1, 0xda, 0xe6, 0xf6, 0xb9, 0x33, 0x5a,
		0x22, 0x00, 0xec, 0x08, 0x41, 0x32, 0xac, 0xf0, 0xcc, 0x69, 0x2d, 0x85, 0x34, 0xc8, 0x09, 0x82,
		0xb5, 0xab, 0x95, 0x95, 0x73, 0x67, 0xb4, 0xb1, 0x5e, 0xc9, 0x33, 0xa7, 0xb5, 0x71, 0x34, 0x01,
		0x19, 0x2e, 0x59, 0xda, 0xda, 0x5a, 0xd7, 0xd2, 0x01, 0x67, 0x6d, 0x5b, 0x5f, 0xdb, 0x5c, 0xd5,
		0x32, 0x01, 0xe7, 0xaa, 0xbe, 0xb5, 0x53, 0xd5, 0x20, 0x60, 0xd8, 0xa8, 0xd4, 0x6a, 0xe5, 0xd5,
		0x8a, 0x96, 0x0d, 0x34, 0x96, 0x5e, 0xde, 0xae, 0xd4, 0xb4, 0x5c, 0x8f, 0x59, 0xcf, 0x9c, 0xd6,
		0x26, 0x82, 0x47, 0x54, 0x36, 0x77, 0x36, 0xb4, 0x3c, 0x9a, 0x84, 0x09, 0xf1, 0x08, 0x65, 0x44,
		0xa1, 0x4f, 0x74, 0xee, 0x8c, 0xa6, 0x75, 0x0d, 0x11, 0x2c, 0x93, 0x3d, 0x82, 0x73, 0x67, 0x34,
		0x34, 0xbf, 0x0c, 0x29, 0x1e, 0x5d, 0x08, 0x41, 0x7e, 0xbd, 0xbc, 0x54, 0x59, 0x37, 0xb6, 0xaa,
		0xdb, 0x6b, 0x5b, 0x9b, 0xe5, 0x75, 0x2d, 0xd6, 0x95, 0xe9, 0x95, 0x5f, 0xde, 0x59, 0xd3, 0x2b,
		0x2b, 0x5a, 0x3c, 0x2c, 0xab, 0x56, 0xca, 0xdb, 0x95, 0x15, 0x2d, 0x31, 0x7f, 0x12, 0xa6, 0x87,
		0xe5, 0x99, 0x61, 0x27, 0x63, 0xfe, 0x83, 0x18, 0x4c, 0x0d, 0x49, 0x99, 0x43, 0x4f, 0xd1, 0x25,
		0x48, 0x89, 0x48, 0x13, 0x45, 0xe4, 0x89, 0xa1, 0xb9, 0x97, 0xc7, 0xdd, 0x40, 0x21, 0xe1, 0xb8,
		0x70, 0x21, 0x4d, 0x1c, 0x50, 0x48, 0x19, 0xc5, 0x40, 0x38, 0xbd, 0x1a, 0x83, 0xe2, 0x41, 0xdc,
		0x11, 0xe7, 0x3d, 0xde, 0x73, 0xde, 0x2f, 0xf6, 0x1b, 0x70, 0xe2, 0xe0, 0x35, 0x0c, 0x58, 0xf1,
		0x61, 0x0c, 0x66, 0x86, 0xf7, 0x1b, 0x43, 0x6d, 0x78, 0x1e, 0xc6, 0x5a, 0xc4, 0xdf, 0x73, 0x55,
		0xcd, 0x7d, 0x6c, 0x48, 0x26, 0x67, 0xd3, 0xfd, 0xbe, 0x92, 0xa8, 0x70, 0x29, 0x48, 0x1c, 0xd4,
		0x34, 0x08, 0x6b, 0x06, 0x2c, 0x7d, 0x2d, 0x0e, 0xf7, 0x0f, 0x25, 0x1f, 0x6a, 0xe8, 0x43, 0x00,
		0x96, 0xd3, 0xee, 0xf8, 0xa2, 0xae, 0x8a, 0x34, 0x93, 0xe1, 0x12, 0x7e, 0x84, 0x59, 0x0a, 0xe9,
		0xf8, 0xc1, 0x7c, 0x82, 0xcf, 0x83, 0x10, 0x71, 0x85, 0xf3, 0x5d, 0x43, 0x93, 0xdc, 0xd0, 0x63,
		0x07, 0xac, 0x74, 0xa0, 0x64, 0x3d, 0x0d, 0x9a, 0x69, 0x5b, 0xc4, 0xf1, 0x0d, 0xea, 0x7b, 0x04,
		0xb7, 0x2c, 0xa7, 0xc9, 0xf3, 0x68, 0xba, 0x94, 0x6a, 0x60, 0x9b, 0x12, 0xbd, 0x20, 0xa6, 0x6b,
		0x6a, 0x96, 0x21, 0x78, 0xb1, 0xf0, 0x42, 0x88, 0xb1, 0x1e, 0x84, 0x98, 0x0e, 0x10, 0xf3, 0xff,
		0x3d, 0x0e, 0xd9, 0x50, 0x77, 0x86, 0x4e, 0x40, 0xee, 0x1a, 0xbe, 0x81, 0x0d, 0xd5, 0x71, 0x0b,
		0x4f, 0x64, 0x99, 0xac, 0x2a, 0xbb, 0xee, 0xa7, 0x61, 0x9a, 0xab, 0xb8, 0x1d, 0x9f, 0x78, 0x86,
		0x69, 0x63, 0x4a, 0xb9, 0xd3, 0xd2, 0x5c, 0x15, 0xb1, 0xb9, 0x2d, 0x36, 0xb5, 0xac, 0x66, 0xd0,
		0x59, 0x98, 0xe2, 0x88, 0x56, 0xc7, 0xf6, 0xad, 0xb6, 0x4d, 0x0c, 0xf6, 0x0e, 0x40, 0x79, 0x3e,
		0x0d, 0x2c, 0x9b, 0x64, 0x1a, 0x1b, 0x52, 0x81, 0x59, 0x44, 0xd1, 0x2a, 0x3c, 0xc4, 0x61, 0x4d,
		0xe2, 0x10, 0x0f, 0xfb, 0xc4, 0x20, 0xbf, 0xda, 0xc1, 0x36, 0x35, 0xb0, 0x53, 0x37, 0xf6, 0x30,
		0xdd, 0x2b, 0x4e, 0x87, 0x09, 0x8e, 0x32, 0xdd, 0x55, 0xa9, 0x5a, 0xe1, 0x9a, 0x65, 0xa7, 0xfe,
		0x02, 0xa6, 0x7b, 0xa8, 0x04, 0x33, 0x9c, 0x88, 0xfa, 0x9e, 0xe5, 0x34, 0x0d, 0x73, 0x8f, 0x98,
		0xd7, 0x8d, 0x8e, 0xdf, 0x38, 0x5f, 0x7c, 0x20, 0xcc, 0xc0, 0x8d, 0xac, 0x71, 0x9d, 0x65, 0xa6,
		0xb2, 0xe3, 0x37, 0xce, 0xa3, 0x1a, 0xe4, 0xd8, 0x7e, 0xb4, 0xac, 0xdb, 0xc4, 0x68, 0xb8, 0x1e,
		0xaf, 0x11, 0xf9, 0x21, 0x87, 0x3b, 0xe4, 0xc4, 0xc5, 0x2d, 0x09, 0xd8, 0x70, 0xeb, 0xa4, 0x94,
		0xaa, 0x55, 0x2b, 0x95, 0x15, 0x3d, 0xab, 0x58, 0x2e, 0xbb, 0x1e, 0x8b, 0xa9, 0xa6, 0x1b, 0xf8,
		0x38, 0x2b, 0x62, 0xaa, 0xe9, 0x2a, 0x0f, 0x9f, 0x85, 0x29, 0xd3, 0x14, 0xcb, 0xb6, 0x4c, 0x43,
		0x36, 0xeb, 0xb4, 0xa8, 0xf5, 0xf8, 0xcb, 0x34, 0x57, 0x85, 0x82, 0x0c, 0x73, 0x8a, 0x2e, 0xc0,
		0xfd, 0x5d, 0x7f, 0x85, 0x81, 0x93, 0x03, 0xab, 0xec, 0x87, 0x9e, 0x85, 0xa9, 0xf6, 0xfe, 0x20,
		0x10, 0xf5, 0x3c, 0xb1, 0xbd, 0xdf, 0x0f, 0x7b, 0x94, 0xbf, 0x80, 0x79, 0xc4, 0xc4, 0x3e, 0xa9,
		0x17, 0x8f, 0x84, 0xb5, 0x43, 0x13, 0xe8, 0x14, 0x68, 0xa6, 0x69, 0x10, 0x07, 0xef, 0xda, 0xc4,
		0xc0, 0x1e, 0x71, 0x30, 0x2d, 0x1e, 0x0f, 0x2b, 0xe7, 0x4d, 0xb3, 0xc2, 0x67, 0xcb, 0x7c, 0x12,
		0x9d, 0x84, 0x49, 0x77, 0xf7, 0x9a, 0x29, 0x82, 0xcb, 0x68, 0x7b, 0xa4, 0x61, 0xdd, 0x2a, 0x3e,
		0xc2, 0xdd, 0x54, 0x60, 0x13, 0x3c, 0xb4, 0xaa, 0x5c, 0x8c, 0x9e, 0x00, 0xcd, 0xa4, 0x7b, 0xd8,
		0x6b, 0xf3, 0x22, 0x4d, 0xdb, 0xd8, 0x24, 0xc5, 0x47, 0x85, 0xaa, 0x90, 0x6f, 0x2a, 0x31, 0xaa,
		0xc0, 0x71, 0xb6, 0x78, 0x07, 0x3b, 0xae, 0xd1, 0xa1, 0xc4, 0xe8, 0x9a, 0x18, 0xec, 0xc5, 0x63,
		0xcc, 0x2c, 0xfd, 0x41, 0xa5, 0xb6, 0x43, 0xc9, 0x4a, 0xa0, 0xa4, 0xb6, 0xe7, 0x2a, 0x4c, 0x77,
		0x1c, 0xcb, 0xf1, 0x89, 0xd7, 0xf6, 0x08, 0x03, 0x8b, 0x03, 0x5b, 0xfc, 0xbf, 0xf1, 0x03, 0x9a,
		0xee, 0x9d, 0xb0, 0xb6, 0x08, 0x12, 0x7d, 0xaa, 0x33, 0x28, 0x9c, 0x2f, 0x41, 0x2e, 0x1c, 0x3b,
		0x28, 0x03, 0x22, 0x7a, 0xb4, 0x18, 0xab, 0xa8, 0xcb, 0x5b, 0x2b, 0xac, 0x16, 0xbe, 0x52, 0xd1,
		0xe2, 0xac, 0x26, 0xaf, 0xaf, 0x6d, 0x57, 0x0c, 0x7d, 0x67, 0x73, 0x7b, 0x6d, 0xa3, 0xa2, 0x25,
		0x4e, 0x66, 0xd2, 0xff, 0x3f, 0xae, 0xdd, 0xb9, 0x73, 0xe7, 0x4e, 0x7c, 0xfe, 0xd3, 0x38, 0xe4,
		0x7b, 0xfb, 0x60, 0xf4, 0x4b, 0x70, 0x44, 0xbd, 0xb4, 0x52, 0xe2, 0x1b, 0x37, 0x2d, 0x8f, 0x87,
		0x73, 0x0b, 0x8b, 0x4e, 0x32, 0xd8, 0x89, 0x69, 0xa9, 0x55, 0x23, 0xfe, 0x4b, 0x96, 0xc7, 0x82,
		0xb5, 0x85, 0x7d, 0xb4, 0x0e, 0xc7, 0x1d, 0xd7, 0xa0, 0x3e, 0x76, 0xea, 0xd8, 0xab, 0x1b, 0xdd,
		0xeb, 0x02, 0x03, 0x9b, 0x26, 0xa1, 0xd4, 0x15, 0x95, 0x24, 0x60, 0x79, 0xd0, 0x71, 0x6b, 0x52,
		0xb9, 0x9b, 0x62, 0xcb, 0x52, 0xb5, 0x2f, 0x6a, 0x12, 0x07, 0x45, 0xcd, 0x03, 0x90, 0x69, 0xe1,
		0xb6, 0x41, 0x1c, 0xdf, 0xdb, 0xe7, 0xdd, 0x5b, 0x5a, 0x4f, 0xb7, 0x70, 0xbb, 0xc2, 0xc6, 0xdf,
		0xdc, 0x1e, 0x84, 0xfd, 0xf8, 0x3f, 0x09, 0xc8, 0x85, 0x3b, 0x38, 0xd6, 0x10, 0x9b, 0x3c, 0xcd,
		0xc7, 0x78, 0x16, 0x78, 0xf8, 0x9e, 0xfd, 0xde, 0xe2, 0x32, 0xcb, 0xff, 0xa5, 0x31, 0xd1, 0x57,
		0xe9, 0x02, 0xc9, 0x6a, 0x2f, 0x8b, 0x35, 0x22, 0xba, 0xf5, 0xb4, 0x2e, 0x47, 0x68, 0x15, 0xc6,
		0xae, 0x51, 0xce, 0x3d, 0xc6, 0xb9, 0x1f, 0xb9, 0x37, 0xf7, 0x95, 0x1a, 0x27, 0xcf, 0x5c, 0xa9,
		0x19, 0x9b, 0x5b, 0xfa, 0x46, 0x79, 0x5d, 0x97, 0x70, 0x74, 0x14, 0x92, 0x36, 0xbe, 0xbd, 0xdf,
		0x5b, 0x29, 0xb8, 0x68, 0x54, 0xc7, 0x1f, 0x85, 0xe4, 0x4d, 0x82, 0xaf, 0xf7, 0xe6, 0x67, 0x2e,
		0xfa, 0x06, 0x43, 0xff, 0x14, 0xa4, 0xb8, 0xbf, 0x10, 0x80, 0xf4, 0x98, 0x76, 0x1f, 0x4a, 0x43,
		0x72, 0x79, 0x4b, 0x67, 0xe1, 0xaf, 0x41, 0x4e, 0x48, 0x8d, 0xea, 0x5a, 0x65, 0xb9, 0xa2, 0xc5,
		0xe7, 0xcf, 0xc2, 0x98, 0x70, 0x02, 0x3b, 0x1a, 0x81, 0x1b, 0xb4, 0xfb, 0xe4, 0x50, 0x72, 0xc4,
		0xd4, 0xec, 0xce, 0xc6, 0x52, 0x45, 0xd7, 0xe2, 0xe1, 0xed, 0xfd, 0x97, 0x18, 0x64, 0x43, 0x0d,
		0x15, 0x2b, 0xe5, 0xd8, 0xb6, 0xdd, 0x9b, 0x06, 0xb6, 0x2d, 0x4c, 0xe5, 0xfe, 0x00, 0x17, 0x95,
		0x99, 0x64, 0x54, 0xff, 0xfd, 0x4c, 0x62, 0xf3, 0xbd, 0x18, 0x68, 0xfd, 0xcd, 0x58, 0x9f, 0x81,
		0xb1, 0x6f, 0xd5, 0xc0, 0x77, 0x62, 0x90, 0xef, 0xed, 0xc0, 0xfa, 0xcc, 0x3b, 0xf1, 0xad, 0x9a,
		0xf7, 0x76, 0x0c, 0x26, 0x7a, 0xfa, 0xae, 0x9f, 0x2b, 0xeb, 0xde, 0x4a, 0xc0, 0xd4, 0x10, 0x1c,
		0x2a, 0xcb, 0x06, 0x55, 0xf4, 0xcc, 0x4f, 0x8d, 0xf2, 0xac, 0x45, 0x56, 0xff, 0xaa, 0xd8, 0xf3,
		0x65, 0x3f, 0xfb, 0x04, 0x68, 0x56, 0x9d, 0x38, 0xbe, 0xd5, 0xb0, 0x88, 0x27, 0xdf, 0x8d, 0x45,
		0xd7, 0x5a, 0xe8, 0xca, 0xc5, 0xeb, 0xf1, 0x2f, 0x00, 0x6a, 0xbb, 0xd4, 0xf2, 0xad, 0x1b, 0xc4,
		0xb0, 0x1c, 0xf5, 0x22, 0xcd, 0xba, 0xd8, 0xa4, 0xae, 0xa9, 0x99, 0x35, 0xc7, 0x0f, 0xb4, 0x1d,
		0xd2, 0xc4, 0x7d, 0xda, 0x2c, 0x0d, 0x25, 0x74, 0x4d, 0xcd, 0x04, 0xda, 0x27, 0x20, 0x57, 0x77,
		0x3b, 0xac, 0x21, 0x10, 0x7a, 0x2c, 0xeb, 0xc5, 0xf4, 0xac, 0x90, 0x05, 0x2a, 0xb2, 0x63, 0xeb,
		0xbe, 0xc1, 0xe7, 0xf4, 0xac, 0x90, 0x09, 0x95, 0xc7, 0xa1, 0x80, 0x9b, 0x4d, 0x8f, 0x91, 0x2b,
		0x22, 0xd1, 0x86, 0xe6, 0x03, 0x31, 0x57, 0x9c, 0xbd, 0x02, 0x69, 0xe5, 0x07, 0x56, 0x58, 0x98,
		0x27, 0x8c, 0xb6, 0xb8, 0x47, 0x89, 0xb3, 0x97, 0x7a, 0x47, 0x4d, 0x9e, 0x80, 0x9c, 0x45, 0x8d,
		0xee, 0x85, 0x5e, 0x7c, 0x2e, 0xbe, 0x90, 0xd6, 0xb3, 0x16, 0x0d, 0x6e, 0x70, 0xe6, 0x3f, 0x8c,
		0x43, 0xbe, 0xf7, 0x42, 0x12, 0xad, 0x40, 0xda, 0x76, 0x4d, 0xcc, 0x03, 0x41, 0xdc, 0x86, 0x2f,
		0x44, 0xdc, 0x61, 0x2e, 0xae, 0x4b, 0x7d, 0x3d, 0x40, 0xce, 0xfe, 0x67, 0x0c, 0xd2, 0x4a, 0x8c,
		0x66, 0x20, 0xd9, 0xc6, 0xfe, 0x1e, 0xa7, 0x4b, 0x2d, 0xc5, 0xb5, 0x98, 0xce, 0xc7, 0x4c, 0x4e,
		0xdb, 0xd8, 0xe1, 0x21, 0x20, 0xe5, 0x6c, 0xcc, 0xf6, 0xd5, 0x26, 0xb8, 0xce, 0x1b, 0x5c, 0xb7,
		0xd5, 0x22, 0x8e, 0x4f, 0xd5, 0xbe, 0x4a, 0xf9, 0xb2, 0x14, 0xa3, 0x27, 0x61, 0xd2, 0xf7, 0xb0,
		0x65, 0xf7, 0xe8, 0x26, 0xb9, 0xae, 0xa6, 0x26, 0x02, 0xe5, 0x12, 0x1c, 0x55, 0xbc, 0x75, 0xe2,
		0x63, 0x73, 0x8f, 0xd4, 0xbb, 0xa0, 0x31, 0x7e, 0xdb, 0x75, 0x44, 0x2a, 0xac, 0xc8, 0x79, 0x85,
		0x5d, 0xba, 0x0a, 0x53, 0xa6, 0xdb, 0xea, 0xf7, 0xc4, 0x92, 0xd6, 0xf7, 0xde, 0x45, 0x5f, 0x88,
		0xbd, 0x02, 0xdd, 0xa6, 0xe2, 0x83, 0x78, 0x62, 0xb5, 0xba, 0xf4, 0x51, 0x7c, 0x76, 0x55, 0xe0,
		0xaa, 0xca, 0x83, 0x3a, 0x69, 0xd8, 0xc4, 0x64, 0xde, 0x81, 0xf7, 0x1f, 0x86, 0xa7, 0x9a, 0x96,
		0xbf, 0xd7, 0xd9, 0x5d, 0x34, 0xdd, 0xd6, 0xa9, 0xa6, 0xdb, 0x74, 0xbb, 0x9f, 0x33, 0xd8, 0x88,
		0x0f, 0xf8, 0x2f, 0xf9, 0x49, 0x23, 0x13, 0x48, 0x67, 0x23, 0xbf, 0x7f, 0x94, 0x36, 0x61, 0x4a,
		0x2a, 0x1b, 0xfc, 0x4e, 0x55, 0xb4, 0xa0, 0xe8, 0x9e, 0x2f, 0xe4, 0xc5, 0x4f, 0x3e, 0xe7, 0x25,
		0x41, 0x9f, 0x94, 0x50, 0x36, 0x27, 0x9a, 0xd4, 0x92, 0x0e, 0xf7, 0xf7, 0xf0, 0x89, 0x18, 0x26,
		0x5e, 0x04, 0xe3, 0xa7, 0x92, 0x71, 0x2a, 0xc4, 0x58, 0x93, 0xd0, 0xd2, 0x32, 0x4c, 0x1c, 0x86,
		0xeb, 0xdf, 0x25, 0x57, 0x8e, 0x84, 0x49, 0x56, 0xa1, 0xc0, 0x49, 0xcc, 0x0e, 0xf5, 0xdd, 0x16,
		0x4f, 0x10, 0xf7, 0xa6, 0xf9, 0x8f, 0xcf, 0x45, 0x50, 0xe5, 0x19, 0x6c, 0x39, 0x40, 0x95, 0x5e,
		0x84, 0x69, 0x26, 0xe1, 0x67, 0x30, 0xcc, 0x16, 0x7d, 0x85, 0x50, 0xfc, 0xaf, 0x57, 0x45, 0xec,
		0x4d, 0x05, 0x04, 0x21, 0xde, 0xd0, 0x4e, 0x34, 0x89, 0xef, 0x13, 0x8f, 0x1a, 0xd8, 0xb6, 0xd1,
		0x3d, 0xbf, 0x31, 0x14, 0xdf, 0xfc, 0xa2, 0x77, 0x27, 0x56, 0x05, 0xb2, 0x6c, 0xdb, 0xa5, 0x1d,
		0x38, 0x32, 0x64, 0x67, 0x47, 0xe0, 0x7c, 0x4b, 0x72, 0x4e, 0x0f, 0xec, 0x2e, 0xa3, 0xad, 0x82,
		0x92, 0x07, 0xfb, 0x31, 0x02, 0xe7, 0xdb, 0x92, 0x13, 0x49, 0xac, 0xda, 0x16, 0xc6, 0x78, 0x05,
		0x26, 0x6f, 0x10, 0x6f, 0xd7, 0xa5, 0xf2, 0xbd, 0x77, 0x04, 0xba, 0x77, 0x24, 0x5d, 0x41, 0x02,
		0xf9, 0x5b, 0x30, 0xe3, 0xba, 0x00, 0xe9, 0x06, 0x36, 0xc9, 0x08, 0x14, 0xef, 0x4a, 0x8a, 0x71,
		0xa6, 0xcf, 0xa0, 0x65, 0xc8, 0x35, 0x5d, 0x99, 0x86, 0xa3, 0xe1, 0xef, 0x49, 0x78, 0x56, 0x61,
		0x24, 0x45, 0xdb, 0x6d, 0x77, 0x6c, 0x96, 0xa3, 0xa3, 0x29, 0xfe, 0x44, 0x51, 0x28, 0x8c, 0xa4,
		0x38, 0x84, 0x5b, 0xff, 0x54, 0x51, 0xd0, 0x90, 0x3f, 0x2f, 0x41, 0xd6, 0x75, 0xec, 0x7d, 0xd7,
		0x19, 0xc5, 0x88, 0xf7, 0x25, 0x03, 0x48, 0x08, 0x23, 0xb8, 0x08, 0x99, 0x51, 0x37, 0xe2, 0xcf,
		0x24, 0x3c, 0x4d, 0xd4, 0x0e, 0xac, 0x42, 0x41, 0x25, 0x19, 0xcb, 0x75, 0x46, 0xa0, 0xf8, 0x73,
		0x49, 0x91, 0x0f, 0xc1, 0xe4, 0x32, 0x7c, 0x42, 0xfd, 0x26, 0x19, 0x85, 0xe4, 0x43, 0xb5, 0x0c,
		0x09, 0x91, 0xae, 0xdc, 0x25, 0x8e, 0xb9, 0x37, 0x1a, 0xc3, 0x5f, 0x28, 0x57, 0x2a, 0x0c, 0xa3,
		0x58, 0x86, 0x89, 0x16, 0xf6, 0xe8, 0x1e, 0xb6, 0x47, 0xda, 0x8e, 0xbf, 0x94, 0x1c, 0xb9, 0x00,
		0x24, 0x3d, 0xd2, 0x71, 0x0e, 0x43, 0xf3, 0x91, 0xf2, 0x48, 0x08, 0x26, 0x8f, 0x1e, 0xf5, 0xf9,
		0xd5, 0xc2, 0x61, 0xd8, 0xfe, 0x4a, 0x1d, 0x3d, 0x81, 0xdd, 0x08, 0x33, 0x5e, 0x84, 0x0c, 0xb5,
		0x6e, 0x8f, 0x44, 0xf3, 0xd7, 0x6a, 0xa7, 0x39, 0x80, 0x81, 0x5f, 0x86, 0xa3, 0x43, 0x53, 0xfd,
		0x08, 0x64, 0x7f, 0x23, 0xc9, 0x66, 0x86, 0xa4, 0x7b, 0x99, 0x12, 0x0e, 0x4b, 0xf9, 0xb7, 0x2a,
		0x25, 0x90, 0x3e, 0xae, 0x2a, 0x6b, 0x63, 0x29, 0x6e, 0x1c, 0xce, 0x6b, 0x7f, 0xa7, 0xbc, 0x26,
		0xb0, 0x3d, 0x5e, 0xdb, 0x86, 0x19, 0xc9, 0x78, 0xb8, 0x7d, 0xfd, 0x58, 0x25, 0x56, 0x81, 0xde,
		0xe9, 0xdd, 0xdd, 0x5f, 0x81, 0xd9, 0xc0, 0x9d, 0xaa, 0x03, 0xa3, 0x46, 0x0b, 0xb7, 0x47, 0x60,
		0xfe, 0x44, 0x32, 0xab, 0x8c, 0x1f, 0xb4, 0x70, 0x74, 0x03, 0xb7, 0x19, 0xf9, 0x55, 0x28, 0x2a,
		0xf2, 0x8e, 0xe3, 0x11, 0xd3, 0x6d, 0x3a, 0xd6, 0x6d, 0x52, 0x1f, 0x81, 0xfa, 0xef, 0xfb, 0xb6,
		0x6a, 0x27, 0x04, 0x67, 0xcc, 0x6b, 0xa0, 0x05, 0xfd, 0x86, 0x61, 0xb5, 0xda, 0xae, 0xe7, 0x47,
		0x30, 0xfe, 0x83, 0xda, 0xa9, 0x00, 0xb7, 0xc6, 0x61, 0xa5, 0x0a, 0xe4, 0xf9, 0x70, 0xd4, 0x90,
		0xfc, 0x47, 0x49, 0x34, 0xd1, 0x45, 0xc9, 0xc4, 0x61, 0xba, 0xad, 0x36, 0xf6, 0x46, 0xc9, 0x7f,
		0xff, 0xa4, 0x12, 0x87, 0x84, 0x88, 0xe8, 0x2b, 0xf4, 0x55, 0x62, 0x14, 0xf5, 0xf9, 0xb5, 0xf8,
		0x6b, 0x77, 0xe5, 0x99, 0xed, 0x2d, 0xc4, 0xa5, 0x75, 0xe6, 0x9e, 0xde, 0x72, 0x19, 0x4d, 0xf6,
		0xea, 0xdd, 0xc0, 0x43, 0x3d, 0xd5, 0xb2, 0x74, 0x19, 0x26, 0x7a, 0x4a, 0x65, 0x34, 0xd5, 0xaf,
		0x4b, 0xaa, 0x5c, 0xb8, 0x52, 0x96, 0xce, 0x42, 0x92, 0x95, 0xbd, 0x68, 0xf8, 0x6f, 0x48, 0x38,
		0x57, 0x2f, 0x3d, 0x07, 0x69, 0x55, 0xee, 0xa2, 0xa1, 0xbf, 0x29, 0xa1, 0x01, 0x84, 0xc1, 0x55,
		0xa9, 0x8b, 0x86, 0xff, 0x96, 0x82, 0x2b, 0x08, 0x83, 0x8f, 0xee, 0xc2, 0x7f, 0xfd, 0xed, 0xa4,
		0x4c, 0x57, 0xca, 0x77, 0x17, 0x61, 0x5c, 0xd6, 0xb8, 0x68, 0xf4, 0x6b, 0xf2, 0xe1, 0x0a, 0x51,
		0x7a, 0x16, 0x52, 0x23, 0x3a, 0xfc, 0x77, 0x24, 0x54, 0xe8, 0x97, 0x96, 0x21, 0x1b, 0xaa, 0x6b,
		0xd1, 0xf0, 0xdf, 0x95, 0xf0, 0x30, 0x8a, 0x99, 0x2e, 0xeb, 0x5a, 0x34, 0xc1, 0xef, 0x29, 0xd3,
		0x25, 0x82, 0xb9, 0x4d, 0x95, 0xb4, 0x68, 0xf4, 0xeb, 0xca, 0xeb, 0x0a, 0x52, 0xba, 0x04, 0x99,
		0x20, 0x4d, 0x45, 0xe3, 0x7f, 0x5f, 0xe2, 0xbb, 0x18, 0xe6, 0x81, 0x50, 0x9a, 0x8c, 0xa6, 0xf8,
		0x03, 0xe5, 0x81, 0x10, 0x8a, 0x1d, 0xa3, 0xfe, 0xd2, 0x17, 0xcd, 0xf4, 0x87, 0xea, 0x18, 0xf5,
		0x55, 0x3e, 0xb6, 0x9b, 0x3c, 0x5b, 0x44, 0x53, 0xfc, 0x91, 0xda, 0x4d, 0xae, 0xcf, 0xcc, 0xe8,
		0xaf, 0x25, 0xd1, 0x1c, 0x7f, 0xac, 0xcc, 0xe8, 0x2b, 0x25, 0xa5, 0x2a, 0xa0, 0xc1, 0x3a, 0x12,
		0xcd, 0xf7, 0x86, 0xe4, 0x9b, 0x1c, 0x28, 0x23, 0xa5, 0x97, 0x60, 0x66, 0x78, 0x0d, 0x89, 0x66,
		0x7d, 0xf3, 0x6e, 0x5f, 0xd7, 0x1f, 0x2e, 0x21, 0xa5, 0xed, 0x6e, 0xd7, 0x1f, 0xae, 0x1f, 0xd1,
		0xb4, 0x6f, 0xdd, 0xed, 0x7d, 0xb1, 0x0b, 0x97, 0x8f, 0x52, 0x19, 0xa0, 0x9b, 0xba, 0xa3, 0xb9,
		0xde, 0x91, 0x5c, 0x21, 0x10, 0x3b, 0x1a, 0x32, 0x73, 0x47, 0xe3, 0xdf, 0x55, 0x47, 0x43, 0x22,
		0x4a, 0x17, 0x21, 0xed, 0x74, 0x6c, 0x9b, 0x05, 0x07, 0xba, 0xf7, 0xbf, 0x34, 0x14, 0xbf, 0xf3,
		0x95, 0x3c, 0x18, 0x0a, 0x50, 0x3a, 0x0b, 0x29, 0xd2, 0xda, 0x25, 0xf5, 0x28, 0xe4, 0x77, 0xbf,
		0x52, 0x09, 0x81, 0x69, 0x97, 0x2e, 0x01, 0x88, 0x97, 0x46, 0x7e, 0x87, 0x1d, 0x81, 0xfd, 0xde,
		0x57, 0xf2, 0x33, 0x6b, 0x17, 0xd2, 0x25, 0x10, 0x1f, 0x6d, 0xef, 0x4d, 0xf0, 0x45, 0x2f, 0x01,
		0x7f, 0xd1, 0xbc, 0x00, 0xe3, 0xd7, 0xa8, 0xeb, 0xf8, 0xb8, 0x19, 0x85, 0xfe, 0xbe, 0x44, 0x2b,
		0x7d, 0xe6, 0xb0, 0x96, 0xeb, 0x11, 0x1f, 0x37, 0x69, 0x14, 0xf6, 0x07, 0x12, 0x1b, 0x00, 0x18,
		0xd8, 0xc4, 0xd4, 0x1f, 0x65, 0xdd, 0x3f, 0x54, 0x60, 0x05, 0x60, 0x46, 0xb3, 0xdf, 0xd7, 0xc9,
		0x7e, 0x14, 0xf6, 0x4b, 0x65, 0xb4, 0xd4, 0x2f, 0x3d, 0x07, 0x19, 0xf6, 0x53, 0xfc, 0xeb, 0x41,
		0x04, 0xf8, 0x47, 0x12, 0xdc, 0x45, 0x2c, 0x9d, 0x18, 0x7e, 0xb5, 0x03, 0xab, 0xee, 0xaa, 0x2b,
		0x2e, 0x75, 0xe0, 0xf5, 0x38, 0x64, 0x5a, 0xb4, 0x29, 0xef, 0x5f, 0x44, 0x78, 0xb2, 0xf4, 0x4b,
		0x67, 0x0f, 0x77, 0x75, 0x33, 0x7f, 0x19, 0xc6, 0x96, 0xac, 0xe6, 0x06, 0x6d, 0xa2, 0x69, 0x48,
		0x71, 0xc3, 0xf8, 0xdd, 0x76, 0x42, 0xfd, 0x07, 0xde, 0x63, 0x90, 0xd8, 0xa0, 0x4d, 0xf9, 0x7f,
		0x00, 0xd3, 0x8b, 0xdd, 0x07, 0x2d, 0xd6, 0x5a, 0xd8, 0xb6, 0x37, 0x68, 0x53, 0x4f, 0xb4, 0x68,
		0x73, 0xde, 0x83, 0xb4, 0x12, 0xa0, 0x39, 0xc8, 0xd6, 0x4c, 0xec, 0x2d, 0x75, 0x68, 0xcd, 0x77,
		0xdb, 0xea, 0x3b, 0x37, 0xed, 0x8a, 0xd0, 0x02, 0x14, 0x2e, 0xdb, 0x56, 0x73, 0xcf, 0xaf, 0x62,
		0x0f, 0x9b, 0x7b, 0x1d, 0x9f, 0x14, 0x73, 0x73, 0x89, 0x85, 0x71, 0xbd, 0xd0, 0xe8, 0x15, 0xa3,
		0x59, 0x48, 0x6f, 0xe0, 0x76, 0x6d, 0x0f, 0x7b, 0xd7, 0xf9, 0x27, 0xd3, 0x0c, 0xff, 0x50, 0xc5,
		0xc7, 0x4b, 0xb9, 0x2f, 0x3f, 0x3b, 0x16, 0xfb, 0xc9, 0x67, 0xc7, 0x62, 0x1f, 0xff, 0xef, 0xb1,
		0xd8, 0x4f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x5e, 0x52, 0xa5, 0x1b, 0x7d, 0x2b, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *BigMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&prototests.BigMsg{")
	if this.Field != nil {
		s = append(s, "Field: "+valueToGoStringMsg(this.Field, "int64")+",\n")
	}
	if this.Msg != nil {
		s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SmallMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&prototests.SmallMsg{")
	if this.ScarBusStop != nil {
		s = append(s, "ScarBusStop: "+valueToGoStringMsg(this.ScarBusStop, "string")+",\n")
	}
	if this.FlightParachute != nil {
		s = append(s, "FlightParachute: "+fmt.Sprintf("%#v", this.FlightParachute)+",\n")
	}
	if this.MapShark != nil {
		s = append(s, "MapShark: "+valueToGoStringMsg(this.MapShark, "string")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMsg(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringMsg(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func NewPopulatedBigMsg(r randyMsg, easy bool) *BigMsg {
	this := &BigMsg{}
	if r.Intn(10) != 0 {
		v1 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v1 *= -1
		}
		this.Field = &v1
	}
	if r.Intn(10) != 0 {
		this.Msg = NewPopulatedSmallMsg(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMsg(r, 4)
	}
	return this
}

func NewPopulatedSmallMsg(r randyMsg, easy bool) *SmallMsg {
	this := &SmallMsg{}
	if r.Intn(10) != 0 {
		v2 := randStringMsg(r)
		this.ScarBusStop = &v2
	}
	if r.Intn(10) != 0 {
		v3 := r.Intn(10)
		this.FlightParachute = make([]uint32, v3)
		for i := 0; i < v3; i++ {
			this.FlightParachute[i] = uint32(r.Uint32())
		}
	}
	if r.Intn(10) != 0 {
		v4 := randStringMsg(r)
		this.MapShark = &v4
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedMsg(r, 19)
	}
	return this
}

type randyMsg interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMsg(r randyMsg) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMsg(r randyMsg) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneMsg(r)
	}
	return string(tmps)
}
func randUnrecognizedMsg(r randyMsg, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldMsg(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldMsg(data []byte, r randyMsg, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateMsg(data, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		data = encodeVarintPopulateMsg(data, uint64(v6))
	case 1:
		data = encodeVarintPopulateMsg(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateMsg(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateMsg(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateMsg(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateMsg(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}

func init() { proto.RegisterFile("msg.proto", fileDescriptorMsg) }

var fileDescriptorMsg = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x8d, 0xb1, 0x6a, 0xc3, 0x30,
	0x10, 0x86, 0x11, 0x22, 0xad, 0x73, 0x0e, 0x04, 0x44, 0x06, 0x93, 0xc1, 0x98, 0x0c, 0xc5, 0x4b,
	0x1d, 0xe8, 0x23, 0x78, 0xf0, 0x66, 0x28, 0xf6, 0x13, 0x28, 0xae, 0x7d, 0x12, 0x95, 0x90, 0xd1,
	0x49, 0xef, 0xd5, 0x57, 0x4a, 0x9f, 0xa0, 0x63, 0xc7, 0x52, 0xb5, 0x25, 0x74, 0xba, 0xfb, 0xbe,
	0xe3, 0xfe, 0x1f, 0xb6, 0x96, 0xb0, 0x59, 0xbd, 0x0b, 0x4e, 0x40, 0x1a, 0x61, 0xa6, 0x40, 0xc7,
	0x47, 0xd4, 0x41, 0xc5, 0x4b, 0x33, 0x39, 0x7b, 0x46, 0x87, 0xee, 0x9c, 0x6e, 0x97, 0xb8, 0x24,
	0x4a, 0x90, 0xb6, 0x9f, 0xd7, 0x53, 0x07, 0x77, 0xad, 0xc6, 0x9e, 0x50, 0x1c, 0x60, 0xd3, 0xe9,
	0xd9, 0xbc, 0x14, 0xac, 0x62, 0x35, 0x1f, 0x36, 0xcb, 0x37, 0x88, 0x07, 0xe0, 0x3d, 0x61, 0xc1,
	0x2b, 0x56, 0xe7, 0x4f, 0x87, 0xe6, 0x56, 0xd4, 0x8c, 0x56, 0x1a, 0xd3, 0x13, 0x0e, 0xdc, 0x12,
	0x9e, 0x3c, 0x64, 0x7f, 0x42, 0x54, 0x90, 0x8f, 0x93, 0xf4, 0x6d, 0xa4, 0x31, 0xb8, 0x35, 0xe5,
	0x6d, 0x87, 0x9c, 0x6e, 0x4a, 0xd4, 0xb0, 0xef, 0x8c, 0x46, 0x15, 0x9e, 0xa5, 0x97, 0x93, 0x8a,
	0x61, 0x2e, 0x76, 0x15, 0xaf, 0xef, 0x87, 0xfd, 0xf2, 0x5f, 0x8b, 0x23, 0x64, 0xbd, 0x5c, 0x47,
	0x25, 0xfd, 0x6b, 0x21, 0x52, 0x50, 0x66, 0x7f, 0xb9, 0xdd, 0x7d, 0x5c, 0x4b, 0xf6, 0x79, 0x2d,
	0xd9, 0xdb, 0x7b, 0xc9, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x02, 0xb3, 0x90, 0x62, 0x10, 0x01,
	0x00, 0x00,
}
